var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2202";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__6959__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__6959 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6959__delegate.call(this, args);
    };
    G__6959.cljs$lang$maxFixedArity = 0;
    G__6959.cljs$lang$applyTo = function(arglist__6960) {
      var args = cljs.core.seq(arglist__6960);
      return G__6959__delegate(args);
    };
    G__6959.cljs$core$IFn$_invoke$arity$variadic = G__6959__delegate;
    return G__6959;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3467__auto__ = ty;
    if (cljs.core.truth_(and__3467__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3467__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4327__auto___6961 = len;
  var i_6962 = 0;
  while (true) {
    if (i_6962 < n__4327__auto___6961) {
      new_arr[i_6962] = arr[i_6962];
      var G__6963 = i_6962 + 1;
      i_6962 = G__6963;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__6964__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__6964 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6964__delegate.call(this, array, i, idxs);
    };
    G__6964.cljs$lang$maxFixedArity = 2;
    G__6964.cljs$lang$applyTo = function(arglist__6965) {
      var array = cljs.core.first(arglist__6965);
      arglist__6965 = cljs.core.next(arglist__6965);
      var i = cljs.core.first(arglist__6965);
      var idxs = cljs.core.rest(arglist__6965);
      return G__6964__delegate(array, i, idxs);
    };
    G__6964.cljs$core$IFn$_invoke$arity$variadic = G__6964__delegate;
    return G__6964;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__6966__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__6966 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6966__delegate.call(this, array, idx, idx2, idxv);
    };
    G__6966.cljs$lang$maxFixedArity = 3;
    G__6966.cljs$lang$applyTo = function(arglist__6967) {
      var array = cljs.core.first(arglist__6967);
      arglist__6967 = cljs.core.next(arglist__6967);
      var idx = cljs.core.first(arglist__6967);
      arglist__6967 = cljs.core.next(arglist__6967);
      var idx2 = cljs.core.first(arglist__6967);
      var idxv = cljs.core.rest(arglist__6967);
      return G__6966__delegate(array, idx, idx2, idxv);
    };
    G__6966.cljs$core$IFn$_invoke$arity$variadic = G__6966__delegate;
    return G__6966;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj6969 = {};
  return obj6969;
}();
cljs.core.IFn = function() {
  var obj6971 = {};
  return obj6971;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj6973 = {};
  return obj6973;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3467__auto__ = value;
    if (and__3467__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4106__auto__ = value == null ? null : value;
    return function() {
      var or__3479__auto__ = cljs.core._clone[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._clone["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj6975 = {};
  return obj6975;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._count[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._count["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj6977 = {};
  return obj6977;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._empty[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._empty["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj6979 = {};
  return obj6979;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._conj[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._conj["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj6981 = {};
  return obj6981;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3467__auto__ = coll;
      if (and__3467__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4106__auto__ = coll == null ? null : coll;
      return function() {
        var or__3479__auto__ = cljs.core._nth[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._nth["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3467__auto__ = coll;
      if (and__3467__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4106__auto__ = coll == null ? null : coll;
      return function() {
        var or__3479__auto__ = cljs.core._nth[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._nth["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj6983 = {};
  return obj6983;
}();
cljs.core.ISeq = function() {
  var obj6985 = {};
  return obj6985;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._first[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._first["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._rest[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._rest["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj6987 = {};
  return obj6987;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._next[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._next["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj6989 = {};
  return obj6989;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._lookup[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._lookup["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._lookup[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._lookup["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj6991 = {};
  return obj6991;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._assoc[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._assoc["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj6993 = {};
  return obj6993;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._dissoc[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._dissoc["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj6995 = {};
  return obj6995;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._key[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._key["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._val[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._val["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj6997 = {};
  return obj6997;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._disjoin[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._disjoin["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj6999 = {};
  return obj6999;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._peek[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._peek["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._pop[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._pop["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj7001 = {};
  return obj7001;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._assoc_n[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj7003 = {};
  return obj7003;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._deref[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._deref["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj7005 = {};
  return obj7005;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj7007 = {};
  return obj7007;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._meta[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._meta["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj7009 = {};
  return obj7009;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._with_meta[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._with_meta["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj7011 = {};
  return obj7011;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3467__auto__ = coll;
      if (and__3467__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4106__auto__ = coll == null ? null : coll;
      return function() {
        var or__3479__auto__ = cljs.core._reduce[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._reduce["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3467__auto__ = coll;
      if (and__3467__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4106__auto__ = coll == null ? null : coll;
      return function() {
        var or__3479__auto__ = cljs.core._reduce[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._reduce["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj7013 = {};
  return obj7013;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj7015 = {};
  return obj7015;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._equiv[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._equiv["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj7017 = {};
  return obj7017;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._hash[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._hash["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj7019 = {};
  return obj7019;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._seq[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._seq["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj7021 = {};
  return obj7021;
}();
cljs.core.IList = function() {
  var obj7023 = {};
  return obj7023;
}();
cljs.core.IRecord = function() {
  var obj7025 = {};
  return obj7025;
}();
cljs.core.IReversible = function() {
  var obj7027 = {};
  return obj7027;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._rseq[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._rseq["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj7029 = {};
  return obj7029;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._entry_key[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._entry_key["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._comparator[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._comparator["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj7031 = {};
  return obj7031;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3467__auto__ = writer;
    if (and__3467__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4106__auto__ = writer == null ? null : writer;
    return function() {
      var or__3479__auto__ = cljs.core._write[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._write["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3467__auto__ = writer;
    if (and__3467__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4106__auto__ = writer == null ? null : writer;
    return function() {
      var or__3479__auto__ = cljs.core._flush[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._flush["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj7033 = {};
  return obj7033;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._pr_writer[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj7035 = {};
  return obj7035;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3467__auto__ = d;
    if (and__3467__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4106__auto__ = d == null ? null : d;
    return function() {
      var or__3479__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj7037 = {};
  return obj7037;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = cljs.core._notify_watches[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = cljs.core._add_watch[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._add_watch["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = cljs.core._remove_watch[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj7039 = {};
  return obj7039;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._as_transient[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._as_transient["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj7041 = {};
  return obj7041;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj7043 = {};
  return obj7043;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj7045 = {};
  return obj7045;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj7047 = {};
  return obj7047;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj7049 = {};
  return obj7049;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj7051 = {};
  return obj7051;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._compare[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._compare["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj7053 = {};
  return obj7053;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._drop_first[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._drop_first["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj7055 = {};
  return obj7055;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._chunked_first[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj7057 = {};
  return obj7057;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._chunked_next[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj7059 = {};
  return obj7059;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._name[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._name["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._namespace[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._namespace["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3467__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3467__auto__) {
        return b.ns;
      } else {
        return and__3467__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3890__auto__ = self__._hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__7061 = null;
  var G__7061__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__7061__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__7061 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7061__2.call(this, self__, coll);
      case 3:
        return G__7061__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7061;
}();
cljs.core.Symbol.prototype.apply = function(self__, args7060) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7060)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__7063 = value;
  if (G__7063) {
    var bit__4129__auto__ = G__7063.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4129__auto__ || G__7063.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__7063.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__7063);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__7063);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__7065 = coll;
      if (G__7065) {
        var bit__4122__auto__ = G__7065.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4122__auto__ || G__7065.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__7067 = coll;
      if (G__7067) {
        var bit__4122__auto__ = G__7067.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4122__auto__ || G__7067.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__7069 = coll;
      if (G__7069) {
        var bit__4122__auto__ = G__7069.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4122__auto__ || G__7069.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__7071 = coll;
      if (G__7071) {
        var bit__4122__auto__ = G__7071.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4122__auto__ || G__7071.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__7072__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__7073 = y;
            var G__7074 = cljs.core.first.call(null, more);
            var G__7075 = cljs.core.next.call(null, more);
            x = G__7073;
            y = G__7074;
            more = G__7075;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7072 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7072__delegate.call(this, x, y, more);
    };
    G__7072.cljs$lang$maxFixedArity = 2;
    G__7072.cljs$lang$applyTo = function(arglist__7076) {
      var x = cljs.core.first(arglist__7076);
      arglist__7076 = cljs.core.next(arglist__7076);
      var y = cljs.core.first(arglist__7076);
      var more = cljs.core.rest(arglist__7076);
      return G__7072__delegate(x, y, more);
    };
    G__7072.cljs$core$IFn$_invoke$arity$variadic = G__7072__delegate;
    return G__7072;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__7077 = nval;
            var G__7078 = n + 1;
            val = G__7077;
            n = G__7078;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__7079 = nval;
          var G__7080 = n + 1;
          val__$1 = G__7079;
          n = G__7080;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__7081 = nval;
          var G__7082 = n + 1;
          val__$1 = G__7081;
          n = G__7082;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__7083 = nval;
            var G__7084 = n + 1;
            val = G__7083;
            n = G__7084;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__7085 = nval;
          var G__7086 = n + 1;
          val__$1 = G__7085;
          n = G__7086;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__7087 = nval;
          var G__7088 = n + 1;
          val__$1 = G__7087;
          n = G__7088;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__7090 = x;
  if (G__7090) {
    var bit__4129__auto__ = G__7090.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4129__auto__ || G__7090.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__7090.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__7090);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__7090);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__7092 = x;
  if (G__7092) {
    var bit__4129__auto__ = G__7092.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4129__auto__ || G__7092.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__7092.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__7092);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__7092);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__7093 = sn;
      s = G__7093;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__7094__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__7095 = conj.call(null, coll, x);
          var G__7096 = cljs.core.first.call(null, xs);
          var G__7097 = cljs.core.next.call(null, xs);
          coll = G__7095;
          x = G__7096;
          xs = G__7097;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__7094 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7094__delegate.call(this, coll, x, xs);
    };
    G__7094.cljs$lang$maxFixedArity = 2;
    G__7094.cljs$lang$applyTo = function(arglist__7098) {
      var coll = cljs.core.first(arglist__7098);
      arglist__7098 = cljs.core.next(arglist__7098);
      var x = cljs.core.first(arglist__7098);
      var xs = cljs.core.rest(arglist__7098);
      return G__7094__delegate(coll, x, xs);
    };
    G__7094.cljs$core$IFn$_invoke$arity$variadic = G__7094__delegate;
    return G__7094;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__7099 = cljs.core.next.call(null, s);
      var G__7100 = acc + 1;
      s = G__7099;
      acc = G__7100;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__7102 = coll;
      if (G__7102) {
        var bit__4122__auto__ = G__7102.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4122__auto__ || G__7102.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__7103 = cljs.core.next.call(null, coll);
              var G__7104 = n - 1;
              coll = G__7103;
              n = G__7104;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__7105 = cljs.core.next.call(null, coll);
              var G__7106 = n - 1;
              var G__7107 = not_found;
              coll = G__7105;
              n = G__7106;
              not_found = G__7107;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__7112 = coll;
          if (G__7112) {
            var bit__4122__auto__ = G__7112.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4122__auto__ || G__7112.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__7113 = coll;
                  if (G__7113) {
                    var bit__4129__auto__ = G__7113.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4129__auto__ || G__7113.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__7113.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__7113);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__7113);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__7114 = coll;
          if (G__7114) {
            var bit__4122__auto__ = G__7114.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4122__auto__ || G__7114.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__7115 = coll;
                  if (G__7115) {
                    var bit__4129__auto__ = G__7115.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4129__auto__ || G__7115.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__7115.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__7115);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__7115);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__7118 = o;
        if (G__7118) {
          var bit__4122__auto__ = G__7118.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4122__auto__ || G__7118.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__7119 = o;
        if (G__7119) {
          var bit__4122__auto__ = G__7119.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4122__auto__ || G__7119.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__7120__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__7121 = ret;
          var G__7122 = cljs.core.first.call(null, kvs);
          var G__7123 = cljs.core.second.call(null, kvs);
          var G__7124 = cljs.core.nnext.call(null, kvs);
          coll = G__7121;
          k = G__7122;
          v = G__7123;
          kvs = G__7124;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__7120 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7120__delegate.call(this, coll, k, v, kvs);
    };
    G__7120.cljs$lang$maxFixedArity = 3;
    G__7120.cljs$lang$applyTo = function(arglist__7125) {
      var coll = cljs.core.first(arglist__7125);
      arglist__7125 = cljs.core.next(arglist__7125);
      var k = cljs.core.first(arglist__7125);
      arglist__7125 = cljs.core.next(arglist__7125);
      var v = cljs.core.first(arglist__7125);
      var kvs = cljs.core.rest(arglist__7125);
      return G__7120__delegate(coll, k, v, kvs);
    };
    G__7120.cljs$core$IFn$_invoke$arity$variadic = G__7120__delegate;
    return G__7120;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__7126__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__7127 = ret;
            var G__7128 = cljs.core.first.call(null, ks);
            var G__7129 = cljs.core.next.call(null, ks);
            coll = G__7127;
            k = G__7128;
            ks = G__7129;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__7126 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7126__delegate.call(this, coll, k, ks);
    };
    G__7126.cljs$lang$maxFixedArity = 2;
    G__7126.cljs$lang$applyTo = function(arglist__7130) {
      var coll = cljs.core.first(arglist__7130);
      arglist__7130 = cljs.core.next(arglist__7130);
      var k = cljs.core.first(arglist__7130);
      var ks = cljs.core.rest(arglist__7130);
      return G__7126__delegate(coll, k, ks);
    };
    G__7126.cljs$core$IFn$_invoke$arity$variadic = G__7126__delegate;
    return G__7126;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3479__auto__ = goog.isFunction(f);
  if (or__3479__auto__) {
    return or__3479__auto__;
  } else {
    var G__7134 = f;
    if (G__7134) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto____$1 = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto____$1)) {
          return or__3479__auto____$1;
        } else {
          return G__7134.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__7134.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__7134);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__7134);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__7142 = o;
    if (G__7142) {
      var bit__4129__auto__ = G__7142.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4129__auto__ || G__7142.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__7142.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__7142);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__7142);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t7143 !== "undefined") {
      } else {
        cljs.core.t7143 = function(meta, o, with_meta, meta7144) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta7144 = meta7144;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t7143.cljs$lang$type = true;
        cljs.core.t7143.cljs$lang$ctorStr = "cljs.core/t7143";
        cljs.core.t7143.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
          return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/t7143");
        };
        cljs.core.t7143.prototype.call = function() {
          var G__7147__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__7147 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__7147__delegate.call(this, self__, args);
          };
          G__7147.cljs$lang$maxFixedArity = 1;
          G__7147.cljs$lang$applyTo = function(arglist__7148) {
            var self__ = cljs.core.first(arglist__7148);
            var args = cljs.core.rest(arglist__7148);
            return G__7147__delegate(self__, args);
          };
          G__7147.cljs$core$IFn$_invoke$arity$variadic = G__7147__delegate;
          return G__7147;
        }();
        cljs.core.t7143.prototype.apply = function(self__, args7146) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7146)));
        };
        cljs.core.t7143.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__7149__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__7149 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__7149__delegate.call(this, args);
          };
          G__7149.cljs$lang$maxFixedArity = 0;
          G__7149.cljs$lang$applyTo = function(arglist__7150) {
            var args = cljs.core.seq(arglist__7150);
            return G__7149__delegate(args);
          };
          G__7149.cljs$core$IFn$_invoke$arity$variadic = G__7149__delegate;
          return G__7149;
        }();
        cljs.core.t7143.prototype.cljs$core$Fn$ = true;
        cljs.core.t7143.prototype.cljs$core$IMeta$_meta$arity$1 = function(_7145) {
          var self__ = this;
          var _7145__$1 = this;
          return self__.meta7144;
        };
        cljs.core.t7143.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_7145, meta7144__$1) {
          var self__ = this;
          var _7145__$1 = this;
          return new cljs.core.t7143(self__.meta, self__.o, self__.with_meta, meta7144__$1);
        };
        cljs.core.__GT_t7143 = function __GT_t7143(meta__$1, o__$1, with_meta__$1, meta7144) {
          return new cljs.core.t7143(meta__$1, o__$1, with_meta__$1, meta7144);
        };
      }
      return new cljs.core.t7143(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3467__auto__ = !(o == null);
    if (and__3467__auto__) {
      var G__7154 = o;
      if (G__7154) {
        var bit__4129__auto__ = G__7154.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4129__auto__ || G__7154.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__7154.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__7154);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__7154);
      }
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__7155__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__7156 = ret;
            var G__7157 = cljs.core.first.call(null, ks);
            var G__7158 = cljs.core.next.call(null, ks);
            coll = G__7156;
            k = G__7157;
            ks = G__7158;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__7155 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7155__delegate.call(this, coll, k, ks);
    };
    G__7155.cljs$lang$maxFixedArity = 2;
    G__7155.cljs$lang$applyTo = function(arglist__7159) {
      var coll = cljs.core.first(arglist__7159);
      arglist__7159 = cljs.core.next(arglist__7159);
      var k = cljs.core.first(arglist__7159);
      var ks = cljs.core.rest(arglist__7159);
      return G__7155__delegate(coll, k, ks);
    };
    G__7155.cljs$core$IFn$_invoke$arity$variadic = G__7155__delegate;
    return G__7155;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj7161 = {};
  return obj7161;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj7165 = {};
      return obj7165;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__7167 = o;
    if (G__7167) {
      var bit__4122__auto__ = G__7167.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4122__auto__ || G__7167.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7169 = x;
    if (G__7169) {
      var bit__4129__auto__ = G__7169.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4129__auto__ || G__7169.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__7169.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__7169);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__7169);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7171 = x;
    if (G__7171) {
      var bit__4129__auto__ = G__7171.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4129__auto__ || G__7171.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__7171.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__7171);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__7171);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__7173 = x;
  if (G__7173) {
    var bit__4129__auto__ = G__7173.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4129__auto__ || G__7173.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__7173.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__7173);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__7173);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__7175 = x;
  if (G__7175) {
    var bit__4129__auto__ = G__7175.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4129__auto__ || G__7175.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__7175.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__7175);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__7175);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__7177 = x;
  if (G__7177) {
    var bit__4129__auto__ = G__7177.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4129__auto__ || G__7177.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__7177.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__7177);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__7177);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__7179 = x;
  if (G__7179) {
    var bit__4129__auto__ = G__7179.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4129__auto__ || G__7179.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__7179.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__7179);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__7179);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7181 = x;
    if (G__7181) {
      var bit__4129__auto__ = G__7181.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4129__auto__ || G__7181.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__7181.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__7181);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__7181);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__7183 = x;
  if (G__7183) {
    var bit__4129__auto__ = G__7183.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4129__auto__ || G__7183.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__7183.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__7183);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__7183);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__7185 = x;
  if (G__7185) {
    var bit__4122__auto__ = G__7185.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4122__auto__ || G__7185.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj7189 = {};
    return obj7189;
  };
  var js_obj__1 = function() {
    var G__7190__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__7190 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__7190__delegate.call(this, keyvals);
    };
    G__7190.cljs$lang$maxFixedArity = 0;
    G__7190.cljs$lang$applyTo = function(arglist__7191) {
      var keyvals = cljs.core.seq(arglist__7191);
      return G__7190__delegate(keyvals);
    };
    G__7190.cljs$core$IFn$_invoke$arity$variadic = G__7190__delegate;
    return G__7190;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7192 = i__$1 + 1;
      var G__7193 = j__$1 + 1;
      var G__7194 = len__$1 - 1;
      i__$1 = G__7192;
      j__$1 = G__7193;
      len__$1 = G__7194;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7195 = i__$1 - 1;
      var G__7196 = j__$1 - 1;
      var G__7197 = len__$1 - 1;
      i__$1 = G__7195;
      j__$1 = G__7196;
      len__$1 = G__7197;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj7199 = {};
  return obj7199;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__7201 = s;
    if (G__7201) {
      var bit__4129__auto__ = G__7201.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4129__auto__ || G__7201.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__7201.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__7201);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__7201);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__7203 = s;
  if (G__7203) {
    var bit__4129__auto__ = G__7203.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4129__auto__ || G__7203.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__7203.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__7203);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__7203);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3479__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3479__auto__) {
    return or__3479__auto__;
  } else {
    var G__7207 = f;
    if (G__7207) {
      var bit__4129__auto__ = G__7207.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4129__auto__ || G__7207.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__7207.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__7207);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__7207);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__7208__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__7209 = cljs.core.conj.call(null, s, x__$1);
              var G__7210 = etc;
              s = G__7209;
              xs = G__7210;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__7208 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7208__delegate.call(this, x, y, more);
    };
    G__7208.cljs$lang$maxFixedArity = 2;
    G__7208.cljs$lang$applyTo = function(arglist__7211) {
      var x = cljs.core.first(arglist__7211);
      arglist__7211 = cljs.core.next(arglist__7211);
      var y = cljs.core.first(arglist__7211);
      var more = cljs.core.rest(arglist__7211);
      return G__7208__delegate(x, y, more);
    };
    G__7208.cljs$core$IFn$_invoke$arity$variadic = G__7208__delegate;
    return G__7208;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3479__auto__ = cljs.core.seq.call(null, coll);
    if (or__3479__auto__) {
      return or__3479__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__7213 = x;
            if (G__7213) {
              var bit__4122__auto__ = G__7213.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4122__auto__ || G__7213.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__7214 = xs;
        var G__7215 = ys;
        var G__7216 = len;
        var G__7217 = n + 1;
        xs = G__7214;
        ys = G__7215;
        len = G__7216;
        n = G__7217;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__7218 = nval;
          var G__7219 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__7218;
          coll__$1 = G__7219;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__7222 = coll;
      if (G__7222) {
        var bit__4122__auto__ = G__7222.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4122__auto__ || G__7222.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__7223 = coll;
      if (G__7223) {
        var bit__4122__auto__ = G__7223.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4122__auto__ || G__7223.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__7224__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__7224 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7224__delegate.call(this, x, y, more);
    };
    G__7224.cljs$lang$maxFixedArity = 2;
    G__7224.cljs$lang$applyTo = function(arglist__7225) {
      var x = cljs.core.first(arglist__7225);
      arglist__7225 = cljs.core.next(arglist__7225);
      var y = cljs.core.first(arglist__7225);
      var more = cljs.core.rest(arglist__7225);
      return G__7224__delegate(x, y, more);
    };
    G__7224.cljs$core$IFn$_invoke$arity$variadic = G__7224__delegate;
    return G__7224;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__7226__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__7226 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7226__delegate.call(this, x, y, more);
    };
    G__7226.cljs$lang$maxFixedArity = 2;
    G__7226.cljs$lang$applyTo = function(arglist__7227) {
      var x = cljs.core.first(arglist__7227);
      arglist__7227 = cljs.core.next(arglist__7227);
      var y = cljs.core.first(arglist__7227);
      var more = cljs.core.rest(arglist__7227);
      return G__7226__delegate(x, y, more);
    };
    G__7226.cljs$core$IFn$_invoke$arity$variadic = G__7226__delegate;
    return G__7226;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__7228__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__7228 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7228__delegate.call(this, x, y, more);
    };
    G__7228.cljs$lang$maxFixedArity = 2;
    G__7228.cljs$lang$applyTo = function(arglist__7229) {
      var x = cljs.core.first(arglist__7229);
      arglist__7229 = cljs.core.next(arglist__7229);
      var y = cljs.core.first(arglist__7229);
      var more = cljs.core.rest(arglist__7229);
      return G__7228__delegate(x, y, more);
    };
    G__7228.cljs$core$IFn$_invoke$arity$variadic = G__7228__delegate;
    return G__7228;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__7230__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__7230 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7230__delegate.call(this, x, y, more);
    };
    G__7230.cljs$lang$maxFixedArity = 2;
    G__7230.cljs$lang$applyTo = function(arglist__7231) {
      var x = cljs.core.first(arglist__7231);
      arglist__7231 = cljs.core.next(arglist__7231);
      var y = cljs.core.first(arglist__7231);
      var more = cljs.core.rest(arglist__7231);
      return G__7230__delegate(x, y, more);
    };
    G__7230.cljs$core$IFn$_invoke$arity$variadic = G__7230__delegate;
    return G__7230;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__7232__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__7233 = y;
            var G__7234 = cljs.core.first.call(null, more);
            var G__7235 = cljs.core.next.call(null, more);
            x = G__7233;
            y = G__7234;
            more = G__7235;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7232 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7232__delegate.call(this, x, y, more);
    };
    G__7232.cljs$lang$maxFixedArity = 2;
    G__7232.cljs$lang$applyTo = function(arglist__7236) {
      var x = cljs.core.first(arglist__7236);
      arglist__7236 = cljs.core.next(arglist__7236);
      var y = cljs.core.first(arglist__7236);
      var more = cljs.core.rest(arglist__7236);
      return G__7232__delegate(x, y, more);
    };
    G__7232.cljs$core$IFn$_invoke$arity$variadic = G__7232__delegate;
    return G__7232;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__7237__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__7238 = y;
            var G__7239 = cljs.core.first.call(null, more);
            var G__7240 = cljs.core.next.call(null, more);
            x = G__7238;
            y = G__7239;
            more = G__7240;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7237 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7237__delegate.call(this, x, y, more);
    };
    G__7237.cljs$lang$maxFixedArity = 2;
    G__7237.cljs$lang$applyTo = function(arglist__7241) {
      var x = cljs.core.first(arglist__7241);
      arglist__7241 = cljs.core.next(arglist__7241);
      var y = cljs.core.first(arglist__7241);
      var more = cljs.core.rest(arglist__7241);
      return G__7237__delegate(x, y, more);
    };
    G__7237.cljs$core$IFn$_invoke$arity$variadic = G__7237__delegate;
    return G__7237;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__7242__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__7243 = y;
            var G__7244 = cljs.core.first.call(null, more);
            var G__7245 = cljs.core.next.call(null, more);
            x = G__7243;
            y = G__7244;
            more = G__7245;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7242 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7242__delegate.call(this, x, y, more);
    };
    G__7242.cljs$lang$maxFixedArity = 2;
    G__7242.cljs$lang$applyTo = function(arglist__7246) {
      var x = cljs.core.first(arglist__7246);
      arglist__7246 = cljs.core.next(arglist__7246);
      var y = cljs.core.first(arglist__7246);
      var more = cljs.core.rest(arglist__7246);
      return G__7242__delegate(x, y, more);
    };
    G__7242.cljs$core$IFn$_invoke$arity$variadic = G__7242__delegate;
    return G__7242;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__7247__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__7248 = y;
            var G__7249 = cljs.core.first.call(null, more);
            var G__7250 = cljs.core.next.call(null, more);
            x = G__7248;
            y = G__7249;
            more = G__7250;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7247 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7247__delegate.call(this, x, y, more);
    };
    G__7247.cljs$lang$maxFixedArity = 2;
    G__7247.cljs$lang$applyTo = function(arglist__7251) {
      var x = cljs.core.first(arglist__7251);
      arglist__7251 = cljs.core.next(arglist__7251);
      var y = cljs.core.first(arglist__7251);
      var more = cljs.core.rest(arglist__7251);
      return G__7247__delegate(x, y, more);
    };
    G__7247.cljs$core$IFn$_invoke$arity$variadic = G__7247__delegate;
    return G__7247;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3786__auto__ = x;
    var y__3787__auto__ = y;
    return x__3786__auto__ > y__3787__auto__ ? x__3786__auto__ : y__3787__auto__;
  };
  var max__3 = function() {
    var G__7252__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3786__auto__ = x;
        var y__3787__auto__ = y;
        return x__3786__auto__ > y__3787__auto__ ? x__3786__auto__ : y__3787__auto__;
      }(), more);
    };
    var G__7252 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7252__delegate.call(this, x, y, more);
    };
    G__7252.cljs$lang$maxFixedArity = 2;
    G__7252.cljs$lang$applyTo = function(arglist__7253) {
      var x = cljs.core.first(arglist__7253);
      arglist__7253 = cljs.core.next(arglist__7253);
      var y = cljs.core.first(arglist__7253);
      var more = cljs.core.rest(arglist__7253);
      return G__7252__delegate(x, y, more);
    };
    G__7252.cljs$core$IFn$_invoke$arity$variadic = G__7252__delegate;
    return G__7252;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3793__auto__ = x;
    var y__3794__auto__ = y;
    return x__3793__auto__ < y__3794__auto__ ? x__3793__auto__ : y__3794__auto__;
  };
  var min__3 = function() {
    var G__7254__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3793__auto__ = x;
        var y__3794__auto__ = y;
        return x__3793__auto__ < y__3794__auto__ ? x__3793__auto__ : y__3794__auto__;
      }(), more);
    };
    var G__7254 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7254__delegate.call(this, x, y, more);
    };
    G__7254.cljs$lang$maxFixedArity = 2;
    G__7254.cljs$lang$applyTo = function(arglist__7255) {
      var x = cljs.core.first(arglist__7255);
      arglist__7255 = cljs.core.next(arglist__7255);
      var y = cljs.core.first(arglist__7255);
      var more = cljs.core.rest(arglist__7255);
      return G__7254__delegate(x, y, more);
    };
    G__7254.cljs$core$IFn$_invoke$arity$variadic = G__7254__delegate;
    return G__7254;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__7256__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__7256 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7256__delegate.call(this, x, y, more);
    };
    G__7256.cljs$lang$maxFixedArity = 2;
    G__7256.cljs$lang$applyTo = function(arglist__7257) {
      var x = cljs.core.first(arglist__7257);
      arglist__7257 = cljs.core.next(arglist__7257);
      var y = cljs.core.first(arglist__7257);
      var more = cljs.core.rest(arglist__7257);
      return G__7256__delegate(x, y, more);
    };
    G__7256.cljs$core$IFn$_invoke$arity$variadic = G__7256__delegate;
    return G__7256;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__7258__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__7258 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7258__delegate.call(this, x, y, more);
    };
    G__7258.cljs$lang$maxFixedArity = 2;
    G__7258.cljs$lang$applyTo = function(arglist__7259) {
      var x = cljs.core.first(arglist__7259);
      arglist__7259 = cljs.core.next(arglist__7259);
      var y = cljs.core.first(arglist__7259);
      var more = cljs.core.rest(arglist__7259);
      return G__7258__delegate(x, y, more);
    };
    G__7258.cljs$core$IFn$_invoke$arity$variadic = G__7258__delegate;
    return G__7258;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__7260__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__7260 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7260__delegate.call(this, x, y, more);
    };
    G__7260.cljs$lang$maxFixedArity = 2;
    G__7260.cljs$lang$applyTo = function(arglist__7261) {
      var x = cljs.core.first(arglist__7261);
      arglist__7261 = cljs.core.next(arglist__7261);
      var y = cljs.core.first(arglist__7261);
      var more = cljs.core.rest(arglist__7261);
      return G__7260__delegate(x, y, more);
    };
    G__7260.cljs$core$IFn$_invoke$arity$variadic = G__7260__delegate;
    return G__7260;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__7262__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__7262 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7262__delegate.call(this, x, y, more);
    };
    G__7262.cljs$lang$maxFixedArity = 2;
    G__7262.cljs$lang$applyTo = function(arglist__7263) {
      var x = cljs.core.first(arglist__7263);
      arglist__7263 = cljs.core.next(arglist__7263);
      var y = cljs.core.first(arglist__7263);
      var more = cljs.core.rest(arglist__7263);
      return G__7262__delegate(x, y, more);
    };
    G__7262.cljs$core$IFn$_invoke$arity$variadic = G__7262__delegate;
    return G__7262;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__7264__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__7264 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7264__delegate.call(this, x, y, more);
    };
    G__7264.cljs$lang$maxFixedArity = 2;
    G__7264.cljs$lang$applyTo = function(arglist__7265) {
      var x = cljs.core.first(arglist__7265);
      arglist__7265 = cljs.core.next(arglist__7265);
      var y = cljs.core.first(arglist__7265);
      var more = cljs.core.rest(arglist__7265);
      return G__7264__delegate(x, y, more);
    };
    G__7264.cljs$core$IFn$_invoke$arity$variadic = G__7264__delegate;
    return G__7264;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__7266__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__7266 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7266__delegate.call(this, x, y, more);
    };
    G__7266.cljs$lang$maxFixedArity = 2;
    G__7266.cljs$lang$applyTo = function(arglist__7267) {
      var x = cljs.core.first(arglist__7267);
      arglist__7267 = cljs.core.next(arglist__7267);
      var y = cljs.core.first(arglist__7267);
      var more = cljs.core.rest(arglist__7267);
      return G__7266__delegate(x, y, more);
    };
    G__7266.cljs$core$IFn$_invoke$arity$variadic = G__7266__delegate;
    return G__7266;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__7268__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__7268 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7268__delegate.call(this, x, y, more);
    };
    G__7268.cljs$lang$maxFixedArity = 2;
    G__7268.cljs$lang$applyTo = function(arglist__7269) {
      var x = cljs.core.first(arglist__7269);
      arglist__7269 = cljs.core.next(arglist__7269);
      var y = cljs.core.first(arglist__7269);
      var more = cljs.core.rest(arglist__7269);
      return G__7268__delegate(x, y, more);
    };
    G__7268.cljs$core$IFn$_invoke$arity$variadic = G__7268__delegate;
    return G__7268;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__7270__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__7271 = y;
            var G__7272 = cljs.core.first.call(null, more);
            var G__7273 = cljs.core.next.call(null, more);
            x = G__7271;
            y = G__7272;
            more = G__7273;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7270 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7270__delegate.call(this, x, y, more);
    };
    G__7270.cljs$lang$maxFixedArity = 2;
    G__7270.cljs$lang$applyTo = function(arglist__7274) {
      var x = cljs.core.first(arglist__7274);
      arglist__7274 = cljs.core.next(arglist__7274);
      var y = cljs.core.first(arglist__7274);
      var more = cljs.core.rest(arglist__7274);
      return G__7270__delegate(x, y, more);
    };
    G__7270.cljs$core$IFn$_invoke$arity$variadic = G__7270__delegate;
    return G__7270;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__7275 = n__$1 - 1;
      var G__7276 = cljs.core.next.call(null, xs);
      n__$1 = G__7275;
      xs = G__7276;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__7277__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__7278 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__7279 = cljs.core.next.call(null, more);
          sb = G__7278;
          more = G__7279;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__7277 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7277__delegate.call(this, x, ys);
    };
    G__7277.cljs$lang$maxFixedArity = 1;
    G__7277.cljs$lang$applyTo = function(arglist__7280) {
      var x = cljs.core.first(arglist__7280);
      var ys = cljs.core.rest(arglist__7280);
      return G__7277__delegate(x, ys);
    };
    G__7277.cljs$core$IFn$_invoke$arity$variadic = G__7277__delegate;
    return G__7277;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__7281 = cljs.core.next.call(null, xs);
            var G__7282 = cljs.core.next.call(null, ys);
            xs = G__7281;
            ys = G__7282;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__7283 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__7284 = cljs.core.next.call(null, s);
        res = G__7283;
        s = G__7284;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__7285 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__7286 = cljs.core.next.call(null, s);
      h = G__7285;
      s = G__7286;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__7287 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__7288 = cljs.core.next.call(null, s__$1);
      h = G__7287;
      s__$1 = G__7288;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__7295_7301 = cljs.core.seq.call(null, fn_map);
  var chunk__7296_7302 = null;
  var count__7297_7303 = 0;
  var i__7298_7304 = 0;
  while (true) {
    if (i__7298_7304 < count__7297_7303) {
      var vec__7299_7305 = cljs.core._nth.call(null, chunk__7296_7302, i__7298_7304);
      var key_name_7306 = cljs.core.nth.call(null, vec__7299_7305, 0, null);
      var f_7307 = cljs.core.nth.call(null, vec__7299_7305, 1, null);
      var str_name_7308 = cljs.core.name.call(null, key_name_7306);
      obj[str_name_7308] = f_7307;
      var G__7309 = seq__7295_7301;
      var G__7310 = chunk__7296_7302;
      var G__7311 = count__7297_7303;
      var G__7312 = i__7298_7304 + 1;
      seq__7295_7301 = G__7309;
      chunk__7296_7302 = G__7310;
      count__7297_7303 = G__7311;
      i__7298_7304 = G__7312;
      continue;
    } else {
      var temp__4092__auto___7313 = cljs.core.seq.call(null, seq__7295_7301);
      if (temp__4092__auto___7313) {
        var seq__7295_7314__$1 = temp__4092__auto___7313;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7295_7314__$1)) {
          var c__4227__auto___7315 = cljs.core.chunk_first.call(null, seq__7295_7314__$1);
          var G__7316 = cljs.core.chunk_rest.call(null, seq__7295_7314__$1);
          var G__7317 = c__4227__auto___7315;
          var G__7318 = cljs.core.count.call(null, c__4227__auto___7315);
          var G__7319 = 0;
          seq__7295_7301 = G__7316;
          chunk__7296_7302 = G__7317;
          count__7297_7303 = G__7318;
          i__7298_7304 = G__7319;
          continue;
        } else {
          var vec__7300_7320 = cljs.core.first.call(null, seq__7295_7314__$1);
          var key_name_7321 = cljs.core.nth.call(null, vec__7300_7320, 0, null);
          var f_7322 = cljs.core.nth.call(null, vec__7300_7320, 1, null);
          var str_name_7323 = cljs.core.name.call(null, key_name_7321);
          obj[str_name_7323] = f_7322;
          var G__7324 = cljs.core.next.call(null, seq__7295_7314__$1);
          var G__7325 = null;
          var G__7326 = 0;
          var G__7327 = 0;
          seq__7295_7301 = G__7324;
          chunk__7296_7302 = G__7325;
          count__7297_7303 = G__7326;
          i__7298_7304 = G__7327;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__7329 = coll;
  if (G__7329) {
    var bit__4129__auto__ = G__7329.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4129__auto__ || G__7329.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__7329.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__7329);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__7329);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__7330 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__7330;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__7331 = i - 1;
        var G__7332 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__7331;
        r = G__7332;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__7333) {
    var xs = cljs.core.seq(arglist__7333);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3479__auto__ = coll == null;
    if (or__3479__auto__) {
      return or__3479__auto__;
    } else {
      var G__7337 = coll;
      if (G__7337) {
        var bit__4122__auto__ = G__7337.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4122__auto__ || G__7337.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__7339 = x;
  if (G__7339) {
    var bit__4129__auto__ = G__7339.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4129__auto__ || G__7339.cljs$core$IList$) {
      return true;
    } else {
      if (!G__7339.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__7339);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__7339);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7341 = null;
  var G__7341__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__7341__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__7341 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7341__2.call(this, self__, coll);
      case 3:
        return G__7341__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7341;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7340) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7340)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__7343 = x;
    if (G__7343) {
      var bit__4122__auto__ = G__7343.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4122__auto__ || G__7343.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7344 = ls.sval();
        ls = G__7344;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__7346 = s;
    if (G__7346) {
      var bit__4122__auto__ = G__7346.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4122__auto__ || G__7346.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__7347 = cljs.core.next.call(null, s__$1);
      s__$1 = G__7347;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_7348 = 0;
  var xs_7349 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_7349) {
      ret[i_7348] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_7349));
      var G__7350 = i_7348 + 1;
      var G__7351 = cljs.core.next.call(null, xs_7349);
      i_7348 = G__7350;
      xs_7349 = G__7351;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7352 = i + 1;
          var G__7353 = cljs.core.next.call(null, s__$1);
          i = G__7352;
          s__$1 = G__7353;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4327__auto___7354 = size;
      var i_7355 = 0;
      while (true) {
        if (i_7355 < n__4327__auto___7354) {
          a[i_7355] = init_val_or_seq;
          var G__7356 = i_7355 + 1;
          i_7355 = G__7356;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7357 = i + 1;
          var G__7358 = cljs.core.next.call(null, s__$1);
          i = G__7357;
          s__$1 = G__7358;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4327__auto___7359 = size;
      var i_7360 = 0;
      while (true) {
        if (i_7360 < n__4327__auto___7359) {
          a[i_7360] = init_val_or_seq;
          var G__7361 = i_7360 + 1;
          i_7360 = G__7361;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7362 = i + 1;
          var G__7363 = cljs.core.next.call(null, s__$1);
          i = G__7362;
          s__$1 = G__7363;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4327__auto___7364 = size;
      var i_7365 = 0;
      while (true) {
        if (i_7365 < n__4327__auto___7364) {
          a[i_7365] = init_val_or_seq;
          var G__7366 = i_7365 + 1;
          i_7365 = G__7366;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7367 = i + 1;
          var G__7368 = cljs.core.next.call(null, s__$1);
          i = G__7367;
          s__$1 = G__7368;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4327__auto___7369 = size;
      var i_7370 = 0;
      while (true) {
        if (i_7370 < n__4327__auto___7369) {
          a[i_7370] = init_val_or_seq;
          var G__7371 = i_7370 + 1;
          i_7370 = G__7371;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__7372 = cljs.core.next.call(null, s__$1);
        var G__7373 = i - 1;
        var G__7374 = sum + 1;
        s__$1 = G__7372;
        i = G__7373;
        sum = G__7374;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__7375__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__7375 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7375__delegate.call(this, x, y, zs);
    };
    G__7375.cljs$lang$maxFixedArity = 2;
    G__7375.cljs$lang$applyTo = function(arglist__7376) {
      var x = cljs.core.first(arglist__7376);
      arglist__7376 = cljs.core.next(arglist__7376);
      var y = cljs.core.first(arglist__7376);
      var zs = cljs.core.rest(arglist__7376);
      return G__7375__delegate(x, y, zs);
    };
    G__7375.cljs$core$IFn$_invoke$arity$variadic = G__7375__delegate;
    return G__7375;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__7377__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__7377 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7377__delegate.call(this, a, b, c, d, more);
    };
    G__7377.cljs$lang$maxFixedArity = 4;
    G__7377.cljs$lang$applyTo = function(arglist__7378) {
      var a = cljs.core.first(arglist__7378);
      arglist__7378 = cljs.core.next(arglist__7378);
      var b = cljs.core.first(arglist__7378);
      arglist__7378 = cljs.core.next(arglist__7378);
      var c = cljs.core.first(arglist__7378);
      arglist__7378 = cljs.core.next(arglist__7378);
      var d = cljs.core.first(arglist__7378);
      var more = cljs.core.rest(arglist__7378);
      return G__7377__delegate(a, b, c, d, more);
    };
    G__7377.cljs$core$IFn$_invoke$arity$variadic = G__7377__delegate;
    return G__7377;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__7379__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7380 = ntcoll;
          var G__7381 = cljs.core.first.call(null, vals);
          var G__7382 = cljs.core.next.call(null, vals);
          tcoll = G__7380;
          val = G__7381;
          vals = G__7382;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7379 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7379__delegate.call(this, tcoll, val, vals);
    };
    G__7379.cljs$lang$maxFixedArity = 2;
    G__7379.cljs$lang$applyTo = function(arglist__7383) {
      var tcoll = cljs.core.first(arglist__7383);
      arglist__7383 = cljs.core.next(arglist__7383);
      var val = cljs.core.first(arglist__7383);
      var vals = cljs.core.rest(arglist__7383);
      return G__7379__delegate(tcoll, val, vals);
    };
    G__7379.cljs$core$IFn$_invoke$arity$variadic = G__7379__delegate;
    return G__7379;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__7384__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__7385 = ntcoll;
          var G__7386 = cljs.core.first.call(null, kvs);
          var G__7387 = cljs.core.second.call(null, kvs);
          var G__7388 = cljs.core.nnext.call(null, kvs);
          tcoll = G__7385;
          key = G__7386;
          val = G__7387;
          kvs = G__7388;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7384 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7384__delegate.call(this, tcoll, key, val, kvs);
    };
    G__7384.cljs$lang$maxFixedArity = 3;
    G__7384.cljs$lang$applyTo = function(arglist__7389) {
      var tcoll = cljs.core.first(arglist__7389);
      arglist__7389 = cljs.core.next(arglist__7389);
      var key = cljs.core.first(arglist__7389);
      arglist__7389 = cljs.core.next(arglist__7389);
      var val = cljs.core.first(arglist__7389);
      var kvs = cljs.core.rest(arglist__7389);
      return G__7384__delegate(tcoll, key, val, kvs);
    };
    G__7384.cljs$core$IFn$_invoke$arity$variadic = G__7384__delegate;
    return G__7384;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__7390__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__7391 = ntcoll;
          var G__7392 = cljs.core.first.call(null, ks);
          var G__7393 = cljs.core.next.call(null, ks);
          tcoll = G__7391;
          key = G__7392;
          ks = G__7393;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7390 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7390__delegate.call(this, tcoll, key, ks);
    };
    G__7390.cljs$lang$maxFixedArity = 2;
    G__7390.cljs$lang$applyTo = function(arglist__7394) {
      var tcoll = cljs.core.first(arglist__7394);
      arglist__7394 = cljs.core.next(arglist__7394);
      var key = cljs.core.first(arglist__7394);
      var ks = cljs.core.rest(arglist__7394);
      return G__7390__delegate(tcoll, key, ks);
    };
    G__7390.cljs$core$IFn$_invoke$arity$variadic = G__7390__delegate;
    return G__7390;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__7395__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7396 = ntcoll;
          var G__7397 = cljs.core.first.call(null, vals);
          var G__7398 = cljs.core.next.call(null, vals);
          tcoll = G__7396;
          val = G__7397;
          vals = G__7398;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7395 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7395__delegate.call(this, tcoll, val, vals);
    };
    G__7395.cljs$lang$maxFixedArity = 2;
    G__7395.cljs$lang$applyTo = function(arglist__7399) {
      var tcoll = cljs.core.first(arglist__7399);
      arglist__7399 = cljs.core.next(arglist__7399);
      var val = cljs.core.first(arglist__7399);
      var vals = cljs.core.rest(arglist__7399);
      return G__7395__delegate(tcoll, val, vals);
    };
    G__7395.cljs$core$IFn$_invoke$arity$variadic = G__7395__delegate;
    return G__7395;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4371 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4371);
      } else {
        return f.call(null, a4371);
      }
    } else {
      var b4372 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4371, b4372);
        } else {
          return f.call(null, a4371, b4372);
        }
      } else {
        var c4373 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4371, b4372, c4373);
          } else {
            return f.call(null, a4371, b4372, c4373);
          }
        } else {
          var d4374 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4371, b4372, c4373, d4374);
            } else {
              return f.call(null, a4371, b4372, c4373, d4374);
            }
          } else {
            var e4375 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4371, b4372, c4373, d4374, e4375);
              } else {
                return f.call(null, a4371, b4372, c4373, d4374, e4375);
              }
            } else {
              var f4376 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4371, b4372, c4373, d4374, e4375, f4376);
                } else {
                  return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376);
                }
              } else {
                var g4377 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4371, b4372, c4373, d4374, e4375, f4376, g4377);
                  } else {
                    return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377);
                  }
                } else {
                  var h4378 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378);
                    } else {
                      return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378);
                    }
                  } else {
                    var i4379 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379);
                      } else {
                        return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379);
                      }
                    } else {
                      var j4380 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380);
                        } else {
                          return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380);
                        }
                      } else {
                        var k4381 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381);
                          } else {
                            return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381);
                          }
                        } else {
                          var l4382 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382);
                            } else {
                              return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382);
                            }
                          } else {
                            var m4383 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383);
                              } else {
                                return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383);
                              }
                            } else {
                              var n4384 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384);
                                } else {
                                  return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384);
                                }
                              } else {
                                var o4385 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385);
                                  } else {
                                    return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385);
                                  }
                                } else {
                                  var p4386 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386);
                                    } else {
                                      return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386);
                                    }
                                  } else {
                                    var q4387 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387);
                                      } else {
                                        return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387);
                                      }
                                    } else {
                                      var r4388 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388);
                                        } else {
                                          return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388);
                                        }
                                      } else {
                                        var s4389 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388, s4389);
                                          } else {
                                            return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388, s4389);
                                          }
                                        } else {
                                          var t4390 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388, s4389, t4390);
                                            } else {
                                              return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388, s4389, t4390);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__7400__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__7400 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__7400__delegate.call(this, f, a, b, c, d, args);
    };
    G__7400.cljs$lang$maxFixedArity = 5;
    G__7400.cljs$lang$applyTo = function(arglist__7401) {
      var f = cljs.core.first(arglist__7401);
      arglist__7401 = cljs.core.next(arglist__7401);
      var a = cljs.core.first(arglist__7401);
      arglist__7401 = cljs.core.next(arglist__7401);
      var b = cljs.core.first(arglist__7401);
      arglist__7401 = cljs.core.next(arglist__7401);
      var c = cljs.core.first(arglist__7401);
      arglist__7401 = cljs.core.next(arglist__7401);
      var d = cljs.core.first(arglist__7401);
      var args = cljs.core.rest(arglist__7401);
      return G__7400__delegate(f, a, b, c, d, args);
    };
    G__7400.cljs$core$IFn$_invoke$arity$variadic = G__7400__delegate;
    return G__7400;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__7402__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__7402 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__7402__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__7402.cljs$lang$maxFixedArity = 6;
    G__7402.cljs$lang$applyTo = function(arglist__7403) {
      var obj = cljs.core.first(arglist__7403);
      arglist__7403 = cljs.core.next(arglist__7403);
      var f = cljs.core.first(arglist__7403);
      arglist__7403 = cljs.core.next(arglist__7403);
      var a = cljs.core.first(arglist__7403);
      arglist__7403 = cljs.core.next(arglist__7403);
      var b = cljs.core.first(arglist__7403);
      arglist__7403 = cljs.core.next(arglist__7403);
      var c = cljs.core.first(arglist__7403);
      arglist__7403 = cljs.core.next(arglist__7403);
      var d = cljs.core.first(arglist__7403);
      var args = cljs.core.rest(arglist__7403);
      return G__7402__delegate(obj, f, a, b, c, d, args);
    };
    G__7402.cljs$core$IFn$_invoke$arity$variadic = G__7402__delegate;
    return G__7402;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__7404__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__7404 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7404__delegate.call(this, x, y, more);
    };
    G__7404.cljs$lang$maxFixedArity = 2;
    G__7404.cljs$lang$applyTo = function(arglist__7405) {
      var x = cljs.core.first(arglist__7405);
      arglist__7405 = cljs.core.next(arglist__7405);
      var y = cljs.core.first(arglist__7405);
      var more = cljs.core.rest(arglist__7405);
      return G__7404__delegate(x, y, more);
    };
    G__7404.cljs$core$IFn$_invoke$arity$variadic = G__7404__delegate;
    return G__7404;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__7406 = pred;
        var G__7407 = cljs.core.next.call(null, coll);
        pred = G__7406;
        coll = G__7407;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3479__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        var G__7408 = pred;
        var G__7409 = cljs.core.next.call(null, coll);
        pred = G__7408;
        coll = G__7409;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__7410 = null;
    var G__7410__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__7410__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__7410__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__7410__3 = function() {
      var G__7411__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__7411 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__7411__delegate.call(this, x, y, zs);
      };
      G__7411.cljs$lang$maxFixedArity = 2;
      G__7411.cljs$lang$applyTo = function(arglist__7412) {
        var x = cljs.core.first(arglist__7412);
        arglist__7412 = cljs.core.next(arglist__7412);
        var y = cljs.core.first(arglist__7412);
        var zs = cljs.core.rest(arglist__7412);
        return G__7411__delegate(x, y, zs);
      };
      G__7411.cljs$core$IFn$_invoke$arity$variadic = G__7411__delegate;
      return G__7411;
    }();
    G__7410 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__7410__0.call(this);
        case 1:
          return G__7410__1.call(this, x);
        case 2:
          return G__7410__2.call(this, x, y);
        default:
          return G__7410__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7410.cljs$lang$maxFixedArity = 2;
    G__7410.cljs$lang$applyTo = G__7410__3.cljs$lang$applyTo;
    return G__7410;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__7413__delegate = function(args) {
      return x;
    };
    var G__7413 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__7413__delegate.call(this, args);
    };
    G__7413.cljs$lang$maxFixedArity = 0;
    G__7413.cljs$lang$applyTo = function(arglist__7414) {
      var args = cljs.core.seq(arglist__7414);
      return G__7413__delegate(args);
    };
    G__7413.cljs$core$IFn$_invoke$arity$variadic = G__7413__delegate;
    return G__7413;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__7415 = null;
      var G__7415__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__7415__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__7415__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__7415__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__7415__4 = function() {
        var G__7416__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__7416 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7416__delegate.call(this, x, y, z, args);
        };
        G__7416.cljs$lang$maxFixedArity = 3;
        G__7416.cljs$lang$applyTo = function(arglist__7417) {
          var x = cljs.core.first(arglist__7417);
          arglist__7417 = cljs.core.next(arglist__7417);
          var y = cljs.core.first(arglist__7417);
          arglist__7417 = cljs.core.next(arglist__7417);
          var z = cljs.core.first(arglist__7417);
          var args = cljs.core.rest(arglist__7417);
          return G__7416__delegate(x, y, z, args);
        };
        G__7416.cljs$core$IFn$_invoke$arity$variadic = G__7416__delegate;
        return G__7416;
      }();
      G__7415 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7415__0.call(this);
          case 1:
            return G__7415__1.call(this, x);
          case 2:
            return G__7415__2.call(this, x, y);
          case 3:
            return G__7415__3.call(this, x, y, z);
          default:
            return G__7415__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7415.cljs$lang$maxFixedArity = 3;
      G__7415.cljs$lang$applyTo = G__7415__4.cljs$lang$applyTo;
      return G__7415;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__7418 = null;
      var G__7418__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__7418__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__7418__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__7418__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__7418__4 = function() {
        var G__7419__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__7419 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7419__delegate.call(this, x, y, z, args);
        };
        G__7419.cljs$lang$maxFixedArity = 3;
        G__7419.cljs$lang$applyTo = function(arglist__7420) {
          var x = cljs.core.first(arglist__7420);
          arglist__7420 = cljs.core.next(arglist__7420);
          var y = cljs.core.first(arglist__7420);
          arglist__7420 = cljs.core.next(arglist__7420);
          var z = cljs.core.first(arglist__7420);
          var args = cljs.core.rest(arglist__7420);
          return G__7419__delegate(x, y, z, args);
        };
        G__7419.cljs$core$IFn$_invoke$arity$variadic = G__7419__delegate;
        return G__7419;
      }();
      G__7418 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7418__0.call(this);
          case 1:
            return G__7418__1.call(this, x);
          case 2:
            return G__7418__2.call(this, x, y);
          case 3:
            return G__7418__3.call(this, x, y, z);
          default:
            return G__7418__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7418.cljs$lang$maxFixedArity = 3;
      G__7418.cljs$lang$applyTo = G__7418__4.cljs$lang$applyTo;
      return G__7418;
    }();
  };
  var comp__4 = function() {
    var G__7421__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__7422__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__7423 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__7424 = cljs.core.next.call(null, fs__$2);
                ret = G__7423;
                fs__$2 = G__7424;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__7422 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__7422__delegate.call(this, args);
          };
          G__7422.cljs$lang$maxFixedArity = 0;
          G__7422.cljs$lang$applyTo = function(arglist__7425) {
            var args = cljs.core.seq(arglist__7425);
            return G__7422__delegate(args);
          };
          G__7422.cljs$core$IFn$_invoke$arity$variadic = G__7422__delegate;
          return G__7422;
        }();
      }(fs__$1);
    };
    var G__7421 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7421__delegate.call(this, f1, f2, f3, fs);
    };
    G__7421.cljs$lang$maxFixedArity = 3;
    G__7421.cljs$lang$applyTo = function(arglist__7426) {
      var f1 = cljs.core.first(arglist__7426);
      arglist__7426 = cljs.core.next(arglist__7426);
      var f2 = cljs.core.first(arglist__7426);
      arglist__7426 = cljs.core.next(arglist__7426);
      var f3 = cljs.core.first(arglist__7426);
      var fs = cljs.core.rest(arglist__7426);
      return G__7421__delegate(f1, f2, f3, fs);
    };
    G__7421.cljs$core$IFn$_invoke$arity$variadic = G__7421__delegate;
    return G__7421;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__7427__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__7427 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7427__delegate.call(this, args);
      };
      G__7427.cljs$lang$maxFixedArity = 0;
      G__7427.cljs$lang$applyTo = function(arglist__7428) {
        var args = cljs.core.seq(arglist__7428);
        return G__7427__delegate(args);
      };
      G__7427.cljs$core$IFn$_invoke$arity$variadic = G__7427__delegate;
      return G__7427;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__7429__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__7429 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7429__delegate.call(this, args);
      };
      G__7429.cljs$lang$maxFixedArity = 0;
      G__7429.cljs$lang$applyTo = function(arglist__7430) {
        var args = cljs.core.seq(arglist__7430);
        return G__7429__delegate(args);
      };
      G__7429.cljs$core$IFn$_invoke$arity$variadic = G__7429__delegate;
      return G__7429;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__7431__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__7431 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7431__delegate.call(this, args);
      };
      G__7431.cljs$lang$maxFixedArity = 0;
      G__7431.cljs$lang$applyTo = function(arglist__7432) {
        var args = cljs.core.seq(arglist__7432);
        return G__7431__delegate(args);
      };
      G__7431.cljs$core$IFn$_invoke$arity$variadic = G__7431__delegate;
      return G__7431;
    }();
  };
  var partial__5 = function() {
    var G__7433__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__7434__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__7434 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__7434__delegate.call(this, args);
        };
        G__7434.cljs$lang$maxFixedArity = 0;
        G__7434.cljs$lang$applyTo = function(arglist__7435) {
          var args = cljs.core.seq(arglist__7435);
          return G__7434__delegate(args);
        };
        G__7434.cljs$core$IFn$_invoke$arity$variadic = G__7434__delegate;
        return G__7434;
      }();
    };
    var G__7433 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7433__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__7433.cljs$lang$maxFixedArity = 4;
    G__7433.cljs$lang$applyTo = function(arglist__7436) {
      var f = cljs.core.first(arglist__7436);
      arglist__7436 = cljs.core.next(arglist__7436);
      var arg1 = cljs.core.first(arglist__7436);
      arglist__7436 = cljs.core.next(arglist__7436);
      var arg2 = cljs.core.first(arglist__7436);
      arglist__7436 = cljs.core.next(arglist__7436);
      var arg3 = cljs.core.first(arglist__7436);
      var more = cljs.core.rest(arglist__7436);
      return G__7433__delegate(f, arg1, arg2, arg3, more);
    };
    G__7433.cljs$core$IFn$_invoke$arity$variadic = G__7433__delegate;
    return G__7433;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__7437 = null;
      var G__7437__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__7437__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__7437__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__7437__4 = function() {
        var G__7438__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__7438 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7438__delegate.call(this, a, b, c, ds);
        };
        G__7438.cljs$lang$maxFixedArity = 3;
        G__7438.cljs$lang$applyTo = function(arglist__7439) {
          var a = cljs.core.first(arglist__7439);
          arglist__7439 = cljs.core.next(arglist__7439);
          var b = cljs.core.first(arglist__7439);
          arglist__7439 = cljs.core.next(arglist__7439);
          var c = cljs.core.first(arglist__7439);
          var ds = cljs.core.rest(arglist__7439);
          return G__7438__delegate(a, b, c, ds);
        };
        G__7438.cljs$core$IFn$_invoke$arity$variadic = G__7438__delegate;
        return G__7438;
      }();
      G__7437 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__7437__1.call(this, a);
          case 2:
            return G__7437__2.call(this, a, b);
          case 3:
            return G__7437__3.call(this, a, b, c);
          default:
            return G__7437__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7437.cljs$lang$maxFixedArity = 3;
      G__7437.cljs$lang$applyTo = G__7437__4.cljs$lang$applyTo;
      return G__7437;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__7440 = null;
      var G__7440__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__7440__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__7440__4 = function() {
        var G__7441__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__7441 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7441__delegate.call(this, a, b, c, ds);
        };
        G__7441.cljs$lang$maxFixedArity = 3;
        G__7441.cljs$lang$applyTo = function(arglist__7442) {
          var a = cljs.core.first(arglist__7442);
          arglist__7442 = cljs.core.next(arglist__7442);
          var b = cljs.core.first(arglist__7442);
          arglist__7442 = cljs.core.next(arglist__7442);
          var c = cljs.core.first(arglist__7442);
          var ds = cljs.core.rest(arglist__7442);
          return G__7441__delegate(a, b, c, ds);
        };
        G__7441.cljs$core$IFn$_invoke$arity$variadic = G__7441__delegate;
        return G__7441;
      }();
      G__7440 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__7440__2.call(this, a, b);
          case 3:
            return G__7440__3.call(this, a, b, c);
          default:
            return G__7440__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7440.cljs$lang$maxFixedArity = 3;
      G__7440.cljs$lang$applyTo = G__7440__4.cljs$lang$applyTo;
      return G__7440;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__7443 = null;
      var G__7443__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__7443__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__7443__4 = function() {
        var G__7444__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__7444 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7444__delegate.call(this, a, b, c, ds);
        };
        G__7444.cljs$lang$maxFixedArity = 3;
        G__7444.cljs$lang$applyTo = function(arglist__7445) {
          var a = cljs.core.first(arglist__7445);
          arglist__7445 = cljs.core.next(arglist__7445);
          var b = cljs.core.first(arglist__7445);
          arglist__7445 = cljs.core.next(arglist__7445);
          var c = cljs.core.first(arglist__7445);
          var ds = cljs.core.rest(arglist__7445);
          return G__7444__delegate(a, b, c, ds);
        };
        G__7444.cljs$core$IFn$_invoke$arity$variadic = G__7444__delegate;
        return G__7444;
      }();
      G__7443 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__7443__2.call(this, a, b);
          case 3:
            return G__7443__3.call(this, a, b, c);
          default:
            return G__7443__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7443.cljs$lang$maxFixedArity = 3;
      G__7443.cljs$lang$applyTo = G__7443__4.cljs$lang$applyTo;
      return G__7443;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4327__auto___7446 = size;
          var i_7447 = 0;
          while (true) {
            if (i_7447 < n__4327__auto___7446) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_7447, cljs.core._nth.call(null, c, i_7447)));
              var G__7448 = i_7447 + 1;
              i_7447 = G__7448;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4327__auto___7449 = size;
        var i_7450 = 0;
        while (true) {
          if (i_7450 < n__4327__auto___7449) {
            var x_7451 = f.call(null, cljs.core._nth.call(null, c, i_7450));
            if (x_7451 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_7451);
            }
            var G__7452 = i_7450 + 1;
            i_7450 = G__7452;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4327__auto___7453 = size;
          var i_7454 = 0;
          while (true) {
            if (i_7454 < n__4327__auto___7453) {
              var x_7455 = f.call(null, idx + i_7454, cljs.core._nth.call(null, c, i_7454));
              if (x_7455 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_7455);
              }
              var G__7456 = i_7454 + 1;
              i_7454 = G__7456;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            return p.call(null, y);
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__7463__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__7463 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7463__delegate.call(this, x, y, z, args);
        };
        G__7463.cljs$lang$maxFixedArity = 3;
        G__7463.cljs$lang$applyTo = function(arglist__7464) {
          var x = cljs.core.first(arglist__7464);
          arglist__7464 = cljs.core.next(arglist__7464);
          var y = cljs.core.first(arglist__7464);
          arglist__7464 = cljs.core.next(arglist__7464);
          var z = cljs.core.first(arglist__7464);
          var args = cljs.core.rest(arglist__7464);
          return G__7463__delegate(x, y, z, args);
        };
        G__7463.cljs$core$IFn$_invoke$arity$variadic = G__7463__delegate;
        return G__7463;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              var and__3467__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3467__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3467__auto____$2;
              }
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              var and__3467__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3467__auto____$2)) {
                var and__3467__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3467__auto____$3)) {
                  var and__3467__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3467__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3467__auto____$4;
                  }
                } else {
                  return and__3467__auto____$3;
                }
              } else {
                return and__3467__auto____$2;
              }
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__7465__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__7457_SHARP_) {
            var and__3467__auto__ = p1.call(null, p1__7457_SHARP_);
            if (cljs.core.truth_(and__3467__auto__)) {
              return p2.call(null, p1__7457_SHARP_);
            } else {
              return and__3467__auto__;
            }
          }, args));
        };
        var G__7465 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7465__delegate.call(this, x, y, z, args);
        };
        G__7465.cljs$lang$maxFixedArity = 3;
        G__7465.cljs$lang$applyTo = function(arglist__7466) {
          var x = cljs.core.first(arglist__7466);
          arglist__7466 = cljs.core.next(arglist__7466);
          var y = cljs.core.first(arglist__7466);
          arglist__7466 = cljs.core.next(arglist__7466);
          var z = cljs.core.first(arglist__7466);
          var args = cljs.core.rest(arglist__7466);
          return G__7465__delegate(x, y, z, args);
        };
        G__7465.cljs$core$IFn$_invoke$arity$variadic = G__7465__delegate;
        return G__7465;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              var and__3467__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3467__auto____$2)) {
                var and__3467__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3467__auto____$3)) {
                  var and__3467__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3467__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3467__auto____$4;
                  }
                } else {
                  return and__3467__auto____$3;
                }
              } else {
                return and__3467__auto____$2;
              }
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              var and__3467__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3467__auto____$2)) {
                var and__3467__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3467__auto____$3)) {
                  var and__3467__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3467__auto____$4)) {
                    var and__3467__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3467__auto____$5)) {
                      var and__3467__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3467__auto____$6)) {
                        var and__3467__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3467__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3467__auto____$7;
                        }
                      } else {
                        return and__3467__auto____$6;
                      }
                    } else {
                      return and__3467__auto____$5;
                    }
                  } else {
                    return and__3467__auto____$4;
                  }
                } else {
                  return and__3467__auto____$3;
                }
              } else {
                return and__3467__auto____$2;
              }
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__7467__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__7458_SHARP_) {
            var and__3467__auto__ = p1.call(null, p1__7458_SHARP_);
            if (cljs.core.truth_(and__3467__auto__)) {
              var and__3467__auto____$1 = p2.call(null, p1__7458_SHARP_);
              if (cljs.core.truth_(and__3467__auto____$1)) {
                return p3.call(null, p1__7458_SHARP_);
              } else {
                return and__3467__auto____$1;
              }
            } else {
              return and__3467__auto__;
            }
          }, args));
        };
        var G__7467 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7467__delegate.call(this, x, y, z, args);
        };
        G__7467.cljs$lang$maxFixedArity = 3;
        G__7467.cljs$lang$applyTo = function(arglist__7468) {
          var x = cljs.core.first(arglist__7468);
          arglist__7468 = cljs.core.next(arglist__7468);
          var y = cljs.core.first(arglist__7468);
          arglist__7468 = cljs.core.next(arglist__7468);
          var z = cljs.core.first(arglist__7468);
          var args = cljs.core.rest(arglist__7468);
          return G__7467__delegate(x, y, z, args);
        };
        G__7467.cljs$core$IFn$_invoke$arity$variadic = G__7467__delegate;
        return G__7467;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__7469__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__7459_SHARP_) {
                return p1__7459_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__7460_SHARP_) {
                var and__3467__auto__ = p1__7460_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3467__auto__)) {
                  return p1__7460_SHARP_.call(null, y);
                } else {
                  return and__3467__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__7461_SHARP_) {
                var and__3467__auto__ = p1__7461_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3467__auto__)) {
                  var and__3467__auto____$1 = p1__7461_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3467__auto____$1)) {
                    return p1__7461_SHARP_.call(null, z);
                  } else {
                    return and__3467__auto____$1;
                  }
                } else {
                  return and__3467__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__7470__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__7462_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__7462_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__7470 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__7470__delegate.call(this, x, y, z, args);
            };
            G__7470.cljs$lang$maxFixedArity = 3;
            G__7470.cljs$lang$applyTo = function(arglist__7471) {
              var x = cljs.core.first(arglist__7471);
              arglist__7471 = cljs.core.next(arglist__7471);
              var y = cljs.core.first(arglist__7471);
              arglist__7471 = cljs.core.next(arglist__7471);
              var z = cljs.core.first(arglist__7471);
              var args = cljs.core.rest(arglist__7471);
              return G__7470__delegate(x, y, z, args);
            };
            G__7470.cljs$core$IFn$_invoke$arity$variadic = G__7470__delegate;
            return G__7470;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__7469 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7469__delegate.call(this, p1, p2, p3, ps);
    };
    G__7469.cljs$lang$maxFixedArity = 3;
    G__7469.cljs$lang$applyTo = function(arglist__7472) {
      var p1 = cljs.core.first(arglist__7472);
      arglist__7472 = cljs.core.next(arglist__7472);
      var p2 = cljs.core.first(arglist__7472);
      arglist__7472 = cljs.core.next(arglist__7472);
      var p3 = cljs.core.first(arglist__7472);
      var ps = cljs.core.rest(arglist__7472);
      return G__7469__delegate(p1, p2, p3, ps);
    };
    G__7469.cljs$core$IFn$_invoke$arity$variadic = G__7469__delegate;
    return G__7469;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3479__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3479__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__7479__delegate = function(x, y, z, args) {
          var or__3479__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__7479 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7479__delegate.call(this, x, y, z, args);
        };
        G__7479.cljs$lang$maxFixedArity = 3;
        G__7479.cljs$lang$applyTo = function(arglist__7480) {
          var x = cljs.core.first(arglist__7480);
          arglist__7480 = cljs.core.next(arglist__7480);
          var y = cljs.core.first(arglist__7480);
          arglist__7480 = cljs.core.next(arglist__7480);
          var z = cljs.core.first(arglist__7480);
          var args = cljs.core.rest(arglist__7480);
          return G__7479__delegate(x, y, z, args);
        };
        G__7479.cljs$core$IFn$_invoke$arity$variadic = G__7479__delegate;
        return G__7479;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            var or__3479__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3479__auto____$2)) {
              return or__3479__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            var or__3479__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3479__auto____$2)) {
              return or__3479__auto____$2;
            } else {
              var or__3479__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3479__auto____$3)) {
                return or__3479__auto____$3;
              } else {
                var or__3479__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3479__auto____$4)) {
                  return or__3479__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__7481__delegate = function(x, y, z, args) {
          var or__3479__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3479__auto__) {
              return function(p1__7473_SHARP_) {
                var or__3479__auto____$1 = p1.call(null, p1__7473_SHARP_);
                if (cljs.core.truth_(or__3479__auto____$1)) {
                  return or__3479__auto____$1;
                } else {
                  return p2.call(null, p1__7473_SHARP_);
                }
              };
            }(or__3479__auto__), args);
          }
        };
        var G__7481 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7481__delegate.call(this, x, y, z, args);
        };
        G__7481.cljs$lang$maxFixedArity = 3;
        G__7481.cljs$lang$applyTo = function(arglist__7482) {
          var x = cljs.core.first(arglist__7482);
          arglist__7482 = cljs.core.next(arglist__7482);
          var y = cljs.core.first(arglist__7482);
          arglist__7482 = cljs.core.next(arglist__7482);
          var z = cljs.core.first(arglist__7482);
          var args = cljs.core.rest(arglist__7482);
          return G__7481__delegate(x, y, z, args);
        };
        G__7481.cljs$core$IFn$_invoke$arity$variadic = G__7481__delegate;
        return G__7481;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            var or__3479__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3479__auto____$2)) {
              return or__3479__auto____$2;
            } else {
              var or__3479__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3479__auto____$3)) {
                return or__3479__auto____$3;
              } else {
                var or__3479__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3479__auto____$4)) {
                  return or__3479__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            var or__3479__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3479__auto____$2)) {
              return or__3479__auto____$2;
            } else {
              var or__3479__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3479__auto____$3)) {
                return or__3479__auto____$3;
              } else {
                var or__3479__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3479__auto____$4)) {
                  return or__3479__auto____$4;
                } else {
                  var or__3479__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3479__auto____$5)) {
                    return or__3479__auto____$5;
                  } else {
                    var or__3479__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3479__auto____$6)) {
                      return or__3479__auto____$6;
                    } else {
                      var or__3479__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3479__auto____$7)) {
                        return or__3479__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__7483__delegate = function(x, y, z, args) {
          var or__3479__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3479__auto__) {
              return function(p1__7474_SHARP_) {
                var or__3479__auto____$1 = p1.call(null, p1__7474_SHARP_);
                if (cljs.core.truth_(or__3479__auto____$1)) {
                  return or__3479__auto____$1;
                } else {
                  var or__3479__auto____$2 = p2.call(null, p1__7474_SHARP_);
                  if (cljs.core.truth_(or__3479__auto____$2)) {
                    return or__3479__auto____$2;
                  } else {
                    return p3.call(null, p1__7474_SHARP_);
                  }
                }
              };
            }(or__3479__auto__), args);
          }
        };
        var G__7483 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7483__delegate.call(this, x, y, z, args);
        };
        G__7483.cljs$lang$maxFixedArity = 3;
        G__7483.cljs$lang$applyTo = function(arglist__7484) {
          var x = cljs.core.first(arglist__7484);
          arglist__7484 = cljs.core.next(arglist__7484);
          var y = cljs.core.first(arglist__7484);
          arglist__7484 = cljs.core.next(arglist__7484);
          var z = cljs.core.first(arglist__7484);
          var args = cljs.core.rest(arglist__7484);
          return G__7483__delegate(x, y, z, args);
        };
        G__7483.cljs$core$IFn$_invoke$arity$variadic = G__7483__delegate;
        return G__7483;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__7485__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__7475_SHARP_) {
                return p1__7475_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__7476_SHARP_) {
                var or__3479__auto__ = p1__7476_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3479__auto__)) {
                  return or__3479__auto__;
                } else {
                  return p1__7476_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__7477_SHARP_) {
                var or__3479__auto__ = p1__7477_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3479__auto__)) {
                  return or__3479__auto__;
                } else {
                  var or__3479__auto____$1 = p1__7477_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3479__auto____$1)) {
                    return or__3479__auto____$1;
                  } else {
                    return p1__7477_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__7486__delegate = function(x, y, z, args) {
              var or__3479__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3479__auto__)) {
                return or__3479__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3479__auto__, ps__$1) {
                  return function(p1__7478_SHARP_) {
                    return cljs.core.some.call(null, p1__7478_SHARP_, args);
                  };
                }(or__3479__auto__, ps__$1), ps__$1);
              }
            };
            var G__7486 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__7486__delegate.call(this, x, y, z, args);
            };
            G__7486.cljs$lang$maxFixedArity = 3;
            G__7486.cljs$lang$applyTo = function(arglist__7487) {
              var x = cljs.core.first(arglist__7487);
              arglist__7487 = cljs.core.next(arglist__7487);
              var y = cljs.core.first(arglist__7487);
              arglist__7487 = cljs.core.next(arglist__7487);
              var z = cljs.core.first(arglist__7487);
              var args = cljs.core.rest(arglist__7487);
              return G__7486__delegate(x, y, z, args);
            };
            G__7486.cljs$core$IFn$_invoke$arity$variadic = G__7486__delegate;
            return G__7486;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__7485 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7485__delegate.call(this, p1, p2, p3, ps);
    };
    G__7485.cljs$lang$maxFixedArity = 3;
    G__7485.cljs$lang$applyTo = function(arglist__7488) {
      var p1 = cljs.core.first(arglist__7488);
      arglist__7488 = cljs.core.next(arglist__7488);
      var p2 = cljs.core.first(arglist__7488);
      arglist__7488 = cljs.core.next(arglist__7488);
      var p3 = cljs.core.first(arglist__7488);
      var ps = cljs.core.rest(arglist__7488);
      return G__7485__delegate(p1, p2, p3, ps);
    };
    G__7485.cljs$core$IFn$_invoke$arity$variadic = G__7485__delegate;
    return G__7485;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4327__auto___7490 = size;
          var i_7491 = 0;
          while (true) {
            if (i_7491 < n__4327__auto___7490) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_7491)));
              var G__7492 = i_7491 + 1;
              i_7491 = G__7492;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__7493__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__7489_SHARP_) {
          return cljs.core.apply.call(null, f, p1__7489_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__7493 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7493__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__7493.cljs$lang$maxFixedArity = 4;
    G__7493.cljs$lang$applyTo = function(arglist__7494) {
      var f = cljs.core.first(arglist__7494);
      arglist__7494 = cljs.core.next(arglist__7494);
      var c1 = cljs.core.first(arglist__7494);
      arglist__7494 = cljs.core.next(arglist__7494);
      var c2 = cljs.core.first(arglist__7494);
      arglist__7494 = cljs.core.next(arglist__7494);
      var c3 = cljs.core.first(arglist__7494);
      var colls = cljs.core.rest(arglist__7494);
      return G__7493__delegate(f, c1, c2, c3, colls);
    };
    G__7493.cljs$core$IFn$_invoke$arity$variadic = G__7493__delegate;
    return G__7493;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__7495 = n__$1 - 1;
        var G__7496 = cljs.core.rest.call(null, s);
        n__$1 = G__7495;
        coll__$1 = G__7496;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__7497 = cljs.core.next.call(null, s);
      var G__7498 = cljs.core.next.call(null, lead);
      s = G__7497;
      lead = G__7498;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3467__auto__ = s;
        if (and__3467__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3467__auto__;
        }
      }())) {
        var G__7499 = pred__$1;
        var G__7500 = cljs.core.rest.call(null, s);
        pred__$1 = G__7499;
        coll__$1 = G__7500;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__7501__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__7501 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7501__delegate.call(this, c1, c2, colls);
    };
    G__7501.cljs$lang$maxFixedArity = 2;
    G__7501.cljs$lang$applyTo = function(arglist__7502) {
      var c1 = cljs.core.first(arglist__7502);
      arglist__7502 = cljs.core.next(arglist__7502);
      var c2 = cljs.core.first(arglist__7502);
      var colls = cljs.core.rest(arglist__7502);
      return G__7501__delegate(c1, c2, colls);
    };
    G__7501.cljs$core$IFn$_invoke$arity$variadic = G__7501__delegate;
    return G__7501;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__7503__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__7503 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7503__delegate.call(this, f, coll, colls);
    };
    G__7503.cljs$lang$maxFixedArity = 2;
    G__7503.cljs$lang$applyTo = function(arglist__7504) {
      var f = cljs.core.first(arglist__7504);
      arglist__7504 = cljs.core.next(arglist__7504);
      var coll = cljs.core.first(arglist__7504);
      var colls = cljs.core.rest(arglist__7504);
      return G__7503__delegate(f, coll, colls);
    };
    G__7503.cljs$core$IFn$_invoke$arity$variadic = G__7503__delegate;
    return G__7503;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4327__auto___7505 = size;
        var i_7506 = 0;
        while (true) {
          if (i_7506 < n__4327__auto___7505) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_7506)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_7506));
            } else {
            }
            var G__7507 = i_7506 + 1;
            i_7506 = G__7507;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__7508_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__7508_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__7510 = to;
      if (G__7510) {
        var bit__4122__auto__ = G__7510.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4122__auto__ || G__7510.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__7511__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__7511 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7511__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__7511.cljs$lang$maxFixedArity = 4;
    G__7511.cljs$lang$applyTo = function(arglist__7512) {
      var f = cljs.core.first(arglist__7512);
      arglist__7512 = cljs.core.next(arglist__7512);
      var c1 = cljs.core.first(arglist__7512);
      arglist__7512 = cljs.core.next(arglist__7512);
      var c2 = cljs.core.first(arglist__7512);
      arglist__7512 = cljs.core.next(arglist__7512);
      var c3 = cljs.core.first(arglist__7512);
      var colls = cljs.core.rest(arglist__7512);
      return G__7511__delegate(f, c1, c2, c3, colls);
    };
    G__7511.cljs$core$IFn$_invoke$arity$variadic = G__7511__delegate;
    return G__7511;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__7514 = m__$1;
          if (G__7514) {
            var bit__4129__auto__ = G__7514.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4129__auto__ || G__7514.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__7514.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__7514);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__7514);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__7515 = sentinel;
            var G__7516 = m__$2;
            var G__7517 = cljs.core.next.call(null, ks__$1);
            sentinel = G__7515;
            m__$1 = G__7516;
            ks__$1 = G__7517;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__7518, v) {
  var vec__7520 = p__7518;
  var k = cljs.core.nth.call(null, vec__7520, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__7520, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__7521, f) {
    var vec__7531 = p__7521;
    var k = cljs.core.nth.call(null, vec__7531, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__7531, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__7522, f, a) {
    var vec__7532 = p__7522;
    var k = cljs.core.nth.call(null, vec__7532, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__7532, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__7523, f, a, b) {
    var vec__7533 = p__7523;
    var k = cljs.core.nth.call(null, vec__7533, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__7533, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__7524, f, a, b, c) {
    var vec__7534 = p__7524;
    var k = cljs.core.nth.call(null, vec__7534, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__7534, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__7536__delegate = function(m, p__7525, f, a, b, c, args) {
      var vec__7535 = p__7525;
      var k = cljs.core.nth.call(null, vec__7535, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__7535, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__7536 = function(m, p__7525, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__7536__delegate.call(this, m, p__7525, f, a, b, c, args);
    };
    G__7536.cljs$lang$maxFixedArity = 6;
    G__7536.cljs$lang$applyTo = function(arglist__7537) {
      var m = cljs.core.first(arglist__7537);
      arglist__7537 = cljs.core.next(arglist__7537);
      var p__7525 = cljs.core.first(arglist__7537);
      arglist__7537 = cljs.core.next(arglist__7537);
      var f = cljs.core.first(arglist__7537);
      arglist__7537 = cljs.core.next(arglist__7537);
      var a = cljs.core.first(arglist__7537);
      arglist__7537 = cljs.core.next(arglist__7537);
      var b = cljs.core.first(arglist__7537);
      arglist__7537 = cljs.core.next(arglist__7537);
      var c = cljs.core.first(arglist__7537);
      var args = cljs.core.rest(arglist__7537);
      return G__7536__delegate(m, p__7525, f, a, b, c, args);
    };
    G__7536.cljs$core$IFn$_invoke$arity$variadic = G__7536__delegate;
    return G__7536;
  }();
  update_in = function(m, p__7525, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__7525, f);
      case 4:
        return update_in__4.call(this, m, p__7525, f, a);
      case 5:
        return update_in__5.call(this, m, p__7525, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__7525, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__7525, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4049__auto__, writer__4050__auto__, opts__4051__auto__) {
  return cljs.core._write.call(null, writer__4050__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__7538 = ll - 5;
      var G__7539 = r;
      ll = G__7538;
      ret = G__7539;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__7540 = cljs.core.pv_aget.call(null, node, 0);
      var G__7541 = level - 5;
      node = G__7540;
      level = G__7541;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__7542 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__7543 = level - 5;
        node = G__7542;
        level = G__7543;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__7545 = null;
  var G__7545__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__7545__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__7545 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7545__2.call(this, self__, k);
      case 3:
        return G__7545__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7545;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args7544) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7544)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__7546 = j + 1;
              var G__7547 = init__$2;
              j = G__7546;
              init__$1 = G__7547;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__7548 = i + step_init[0];
        i = G__7548;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4327__auto___7549 = len;
    var i_7550 = 0;
    while (true) {
      if (i_7550 < n__4327__auto___7549) {
        new_tail[i_7550] = self__.tail[i_7550];
        var G__7551 = i_7550 + 1;
        i_7550 = G__7551;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__7552 = i + 1;
        var G__7553 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__7552;
        out = G__7553;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__7554) {
    var args = cljs.core.seq(arglist__7554);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.call = function() {
  var G__7556 = null;
  var G__7556__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__7556__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__7556 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7556__2.call(this, self__, k);
      case 3:
        return G__7556__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7556;
}();
cljs.core.Subvec.prototype.apply = function(self__, args7555) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7555)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3786__auto__ = self__.end;
    var y__3787__auto__ = v_pos + 1;
    return x__3786__auto__ > y__3787__auto__ ? x__3786__auto__ : y__3787__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__7557 = meta;
      var G__7558 = v.v;
      var G__7559 = v.start + start;
      var G__7560 = v.start + end;
      var G__7561 = __hash;
      meta = G__7557;
      v = G__7558;
      start = G__7559;
      end = G__7560;
      __hash = G__7561;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj7565 = {};
    return obj7565;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__7566 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__7567 = level - 5;
        node = G__7566;
        level = G__7567;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__7569 = null;
  var G__7569__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7569__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7569 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7569__2.call(this, self__, k);
      case 3:
        return G__7569__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7569;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args7568) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7568)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3479__auto__ = self__.rear;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3479__auto__ = self__.front;
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__7570 = i + incr;
        i = G__7570;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__7571 = i + 1;
      var G__7572 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__7571;
      out = G__7572;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj7576 = {};
    return obj7576;
  }();
  var l = ks.length;
  var i_7577 = 0;
  while (true) {
    if (i_7577 < l) {
      var k_7578 = ks[i_7577];
      new_obj[k_7578] = obj[k_7578];
      var G__7579 = i_7577 + 1;
      i_7577 = G__7579;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__7582 = null;
  var G__7582__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7582__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7582 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7582__2.call(this, self__, k);
      case 3:
        return G__7582__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7582;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args7581) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7581)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__7583 = cljs.core.rest.call(null, keys__$1);
        var G__7584 = init__$2;
        keys__$1 = G__7583;
        init__$1 = G__7584;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__7580_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__7580_SHARP_, self__.strobj[p1__7580_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj7586 = {};
  return obj7586;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7587 = i + 2;
          i = G__7587;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7588 = i + 2;
          i = G__7588;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7589 = i + 2;
          i = G__7589;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7590 = i + 2;
          i = G__7590;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7591 = i + 2;
          i = G__7591;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_7592 = 0;
  while (true) {
    if (i_7592 < l) {
      narr[i_7592] = arr[i_7592];
      var G__7593 = i_7592 + 1;
      i_7592 = G__7593;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj7596 = {};
    return obj7596;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__7597 = cljs.core.aclone.call(null, self__.arr);
          G__7597[idx + 1] = v;
          return G__7597;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__7598 = null;
  var G__7598__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7598__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7598 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7598__2.call(this, self__, k);
      case 3:
        return G__7598__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7598;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args7594) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7594)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__7599 = i + 2;
        var G__7600 = init__$2;
        i = G__7599;
        init__$1 = G__7600;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__7601 = s + 2;
            var G__7602 = d;
            s = G__7601;
            d = G__7602;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__7603 = s + 2;
              var G__7604 = d + 2;
              s = G__7603;
              d = G__7604;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__7605 = i + 2;
        var G__7606 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__7605;
        ret = G__7606;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__7607_7609 = self__.arr;
      G__7607_7609.pop();
      G__7607_7609.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__7608 = o;
      if (G__7608) {
        var bit__4129__auto__ = G__7608.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4129__auto__ || G__7608.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__7608.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__7608);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__7608);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__7610 = cljs.core.next.call(null, es);
          var G__7611 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__7610;
          tcoll__$2 = G__7611;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__7612 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__7613 = i + 2;
      out = G__7612;
      i = G__7613;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4049__auto__, writer__4050__auto__, opts__4051__auto__) {
  return cljs.core._write.call(null, writer__4050__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__7616 = cljs.core.aclone.call(null, arr);
    G__7616[i] = a;
    return G__7616;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__7617 = cljs.core.aclone.call(null, arr);
    G__7617[i] = a;
    G__7617[j] = b;
    return G__7617;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__7618 = i + 2;
        var G__7619 = init__$2;
        i = G__7618;
        init__$1 = G__7619;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_7620 = 0;
        var j_7621 = 0;
        while (true) {
          if (i_7620 < 32) {
            if ((self__.bitmap >>> i_7620 & 1) === 0) {
              var G__7622 = i_7620 + 1;
              var G__7623 = j_7621;
              i_7620 = G__7622;
              j_7621 = G__7623;
              continue;
            } else {
              nodes[i_7620] = !(self__.arr[j_7621] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_7621]), self__.arr[j_7621], self__.arr[j_7621 + 1], added_leaf_QMARK_) : self__.arr[j_7621 + 1];
              var G__7624 = i_7620 + 1;
              var G__7625 = j_7621 + 2;
              i_7620 = G__7624;
              j_7621 = G__7625;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_7626 = 0;
      var j_7627 = 0;
      while (true) {
        if (i_7626 < 32) {
          if ((self__.bitmap >>> i_7626 & 1) === 0) {
            var G__7628 = i_7626 + 1;
            var G__7629 = j_7627;
            i_7626 = G__7628;
            j_7627 = G__7629;
            continue;
          } else {
            nodes[i_7626] = !(self__.arr[j_7627] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_7627]), self__.arr[j_7627], self__.arr[j_7627 + 1], added_leaf_QMARK_) : self__.arr[j_7627 + 1];
            var G__7630 = i_7626 + 1;
            var G__7631 = j_7627 + 2;
            i_7626 = G__7630;
            j_7627 = G__7631;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__7632 = i + 1;
        var G__7633 = j + 2;
        var G__7634 = bitmap | 1 << i;
        i = G__7632;
        j = G__7633;
        bitmap = G__7634;
        continue;
      } else {
        var G__7635 = i + 1;
        var G__7636 = j;
        var G__7637 = bitmap;
        i = G__7635;
        j = G__7636;
        bitmap = G__7637;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__7638 = i + 1;
          var G__7639 = init__$2;
          i = G__7638;
          init__$1 = G__7639;
          continue;
        }
      } else {
        var G__7640 = i + 1;
        var G__7641 = init__$1;
        i = G__7640;
        init__$1 = G__7641;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__7642 = i + 2;
        i = G__7642;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__7643 = j + 2;
                j = G__7643;
                continue;
              }
            } else {
              var G__7644 = j + 2;
              j = G__7644;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__7645 = j + 1;
              j = G__7645;
              continue;
            }
          } else {
            var G__7646 = j + 1;
            j = G__7646;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj7649 = {};
    return obj7649;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__7650 = null;
  var G__7650__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7650__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7650 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7650__2.call(this, self__, k);
      case 3:
        return G__7650__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7650;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args7647) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7647)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__7651 = i + 1;
      var G__7652 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__7651;
      out = G__7652;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__7653 = o;
      if (G__7653) {
        var bit__4129__auto__ = G__7653.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4129__auto__ || G__7653.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__7653.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__7653);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__7653);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__7654 = cljs.core.next.call(null, es);
          var G__7655 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__7654;
          tcoll__$1 = G__7655;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__7656 = ascending_QMARK_ ? t.left : t.right;
      var G__7657 = cljs.core.conj.call(null, stack__$1, t);
      t = G__7656;
      stack__$1 = G__7657;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__7659 = null;
  var G__7659__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7659__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7659 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7659__2.call(this, self__, k);
      case 3:
        return G__7659__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7659;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args7658) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7658)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__7661 = null;
  var G__7661__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7661__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7661 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7661__2.call(this, self__, k);
      case 3:
        return G__7661__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7661;
}();
cljs.core.RedNode.prototype.apply = function(self__, args7660) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7660)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__7663 = null;
  var G__7663__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7663__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7663 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7663__2.call(this, self__, k);
      case 3:
        return G__7663__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7663;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args7662) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7662)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__7664 = t.left;
          t = G__7664;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__7665 = t.right;
            t = G__7665;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__7666 = cljs.core.conj.call(null, stack, t);
              var G__7667 = t.left;
              stack = G__7666;
              t = G__7667;
              continue;
            } else {
              var G__7668 = stack;
              var G__7669 = t.right;
              stack = G__7668;
              t = G__7669;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__7670 = cljs.core.conj.call(null, stack, t);
                var G__7671 = t.right;
                stack = G__7670;
                t = G__7671;
                continue;
              } else {
                var G__7672 = stack;
                var G__7673 = t.left;
                stack = G__7672;
                t = G__7673;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__7674 = cljs.core.nnext.call(null, in$);
        var G__7675 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__7674;
        out = G__7675;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__7676) {
    var keyvals = cljs.core.seq(arglist__7676);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__7677) {
    var keyvals = cljs.core.seq(arglist__7677);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj7681 = {};
      return obj7681;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__7682 = cljs.core.nnext.call(null, kvs);
        kvs = G__7682;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__7683) {
    var keyvals = cljs.core.seq(arglist__7683);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__7684 = cljs.core.nnext.call(null, in$);
        var G__7685 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__7684;
        out = G__7685;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__7686) {
    var keyvals = cljs.core.seq(arglist__7686);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__7687 = cljs.core.nnext.call(null, in$);
        var G__7688 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__7687;
        out = G__7688;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__7689) {
    var comparator = cljs.core.first(arglist__7689);
    var keyvals = cljs.core.rest(arglist__7689);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7690 = self__.mseq;
    if (G__7690) {
      var bit__4129__auto__ = G__7690.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4129__auto__ || G__7690.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7690.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7690);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7690);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7691 = self__.mseq;
    if (G__7691) {
      var bit__4129__auto__ = G__7691.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4129__auto__ || G__7691.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7691.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7691);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7691);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7692 = self__.mseq;
    if (G__7692) {
      var bit__4129__auto__ = G__7692.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4129__auto__ || G__7692.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7692.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7692);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7692);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7693 = self__.mseq;
    if (G__7693) {
      var bit__4129__auto__ = G__7693.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4129__auto__ || G__7693.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7693.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7693);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7693);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__7694_SHARP_, p2__7695_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3479__auto__ = p1__7694_SHARP_;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__7695_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__7696) {
    var maps = cljs.core.seq(arglist__7696);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3479__auto__ = m1;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__7697) {
    var f = cljs.core.first(arglist__7697);
    var maps = cljs.core.rest(arglist__7697);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__7698 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__7699 = cljs.core.next.call(null, keys);
      ret = G__7698;
      keys = G__7699;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__7702 = null;
  var G__7702__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7702__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7702 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7702__2.call(this, self__, k);
      case 3:
        return G__7702__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7702;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args7701) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7701)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__7700_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__7700_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__7703 = i + 1;
        var G__7704 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__7703;
        out = G__7704;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__7705 = i + 1;
        var G__7706 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__7705;
        out = G__7706;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__7708 = null;
  var G__7708__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__7708__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__7708 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7708__2.call(this, self__, k);
      case 3:
        return G__7708__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7708;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args7707) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7707)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__7711 = null;
  var G__7711__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7711__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7711 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7711__2.call(this, self__, k);
      case 3:
        return G__7711__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7711;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args7710) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7710)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__7709_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__7709_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4321__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4321__auto__.length) {
        var G__7712 = i + 1;
        var G__7713 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__7712;
        res = G__7713;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__7714 = cljs.core._next.call(null, in$__$1);
            var G__7715 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__7714;
            out = G__7715;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__7716__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__7716 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__7716__delegate.call(this, keys);
    };
    G__7716.cljs$lang$maxFixedArity = 0;
    G__7716.cljs$lang$applyTo = function(arglist__7717) {
      var keys = cljs.core.seq(arglist__7717);
      return G__7716__delegate(keys);
    };
    G__7716.cljs$core$IFn$_invoke$arity$variadic = G__7716__delegate;
    return G__7716;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__7718) {
    var keys = cljs.core.seq(arglist__7718);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__7719) {
    var comparator = cljs.core.first(arglist__7719);
    var keys = cljs.core.rest(arglist__7719);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__7720_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__7720_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__7720_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__7727, seen__$1) {
        while (true) {
          var vec__7728 = p__7727;
          var f = cljs.core.nth.call(null, vec__7728, 0, null);
          var xs__$1 = vec__7728;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__7729 = cljs.core.rest.call(null, s);
              var G__7730 = seen__$1;
              p__7727 = G__7729;
              seen__$1 = G__7730;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__7731 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__7732 = cljs.core.next.call(null, s__$1);
      ret = G__7731;
      s__$1 = G__7732;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__7734 = x;
    if (G__7734) {
      var bit__4122__auto__ = G__7734.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4122__auto__ || G__7734.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__7735 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__7736 = cljs.core.next.call(null, ks);
      var G__7737 = cljs.core.next.call(null, vs);
      map = G__7735;
      ks = G__7736;
      vs = G__7737;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__7740__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__7738_SHARP_, p2__7739_SHARP_) {
        return max_key.call(null, k, p1__7738_SHARP_, p2__7739_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__7740 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7740__delegate.call(this, k, x, y, more);
    };
    G__7740.cljs$lang$maxFixedArity = 3;
    G__7740.cljs$lang$applyTo = function(arglist__7741) {
      var k = cljs.core.first(arglist__7741);
      arglist__7741 = cljs.core.next(arglist__7741);
      var x = cljs.core.first(arglist__7741);
      arglist__7741 = cljs.core.next(arglist__7741);
      var y = cljs.core.first(arglist__7741);
      var more = cljs.core.rest(arglist__7741);
      return G__7740__delegate(k, x, y, more);
    };
    G__7740.cljs$core$IFn$_invoke$arity$variadic = G__7740__delegate;
    return G__7740;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__7744__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__7742_SHARP_, p2__7743_SHARP_) {
        return min_key.call(null, k, p1__7742_SHARP_, p2__7743_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__7744 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7744__delegate.call(this, k, x, y, more);
    };
    G__7744.cljs$lang$maxFixedArity = 3;
    G__7744.cljs$lang$applyTo = function(arglist__7745) {
      var k = cljs.core.first(arglist__7745);
      arglist__7745 = cljs.core.next(arglist__7745);
      var x = cljs.core.first(arglist__7745);
      arglist__7745 = cljs.core.next(arglist__7745);
      var y = cljs.core.first(arglist__7745);
      var more = cljs.core.rest(arglist__7745);
      return G__7744__delegate(k, x, y, more);
    };
    G__7744.cljs$core$IFn$_invoke$arity$variadic = G__7744__delegate;
    return G__7744;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__7748 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__7748, 0, null);
        var s = vec__7748;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__7749 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__7749, 0, null);
      var s = vec__7749;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__7752 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__7752, 0, null);
        var s = vec__7752;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__7753 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__7753, 0, null);
      var s = vec__7753;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4092__auto__) {
        return function(p1__7754_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__7754_SHARP_));
        };
      }(fst, fv, s, temp__4092__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__7765 = null;
      var G__7765__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__7765__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__7765__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__7765__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__7765__4 = function() {
        var G__7766__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__7766 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7766__delegate.call(this, x, y, z, args);
        };
        G__7766.cljs$lang$maxFixedArity = 3;
        G__7766.cljs$lang$applyTo = function(arglist__7767) {
          var x = cljs.core.first(arglist__7767);
          arglist__7767 = cljs.core.next(arglist__7767);
          var y = cljs.core.first(arglist__7767);
          arglist__7767 = cljs.core.next(arglist__7767);
          var z = cljs.core.first(arglist__7767);
          var args = cljs.core.rest(arglist__7767);
          return G__7766__delegate(x, y, z, args);
        };
        G__7766.cljs$core$IFn$_invoke$arity$variadic = G__7766__delegate;
        return G__7766;
      }();
      G__7765 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7765__0.call(this);
          case 1:
            return G__7765__1.call(this, x);
          case 2:
            return G__7765__2.call(this, x, y);
          case 3:
            return G__7765__3.call(this, x, y, z);
          default:
            return G__7765__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7765.cljs$lang$maxFixedArity = 3;
      G__7765.cljs$lang$applyTo = G__7765__4.cljs$lang$applyTo;
      return G__7765;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__7768 = null;
      var G__7768__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__7768__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__7768__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__7768__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__7768__4 = function() {
        var G__7769__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__7769 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7769__delegate.call(this, x, y, z, args);
        };
        G__7769.cljs$lang$maxFixedArity = 3;
        G__7769.cljs$lang$applyTo = function(arglist__7770) {
          var x = cljs.core.first(arglist__7770);
          arglist__7770 = cljs.core.next(arglist__7770);
          var y = cljs.core.first(arglist__7770);
          arglist__7770 = cljs.core.next(arglist__7770);
          var z = cljs.core.first(arglist__7770);
          var args = cljs.core.rest(arglist__7770);
          return G__7769__delegate(x, y, z, args);
        };
        G__7769.cljs$core$IFn$_invoke$arity$variadic = G__7769__delegate;
        return G__7769;
      }();
      G__7768 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7768__0.call(this);
          case 1:
            return G__7768__1.call(this, x);
          case 2:
            return G__7768__2.call(this, x, y);
          case 3:
            return G__7768__3.call(this, x, y, z);
          default:
            return G__7768__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7768.cljs$lang$maxFixedArity = 3;
      G__7768.cljs$lang$applyTo = G__7768__4.cljs$lang$applyTo;
      return G__7768;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__7771 = null;
      var G__7771__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__7771__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__7771__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__7771__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__7771__4 = function() {
        var G__7772__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__7772 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7772__delegate.call(this, x, y, z, args);
        };
        G__7772.cljs$lang$maxFixedArity = 3;
        G__7772.cljs$lang$applyTo = function(arglist__7773) {
          var x = cljs.core.first(arglist__7773);
          arglist__7773 = cljs.core.next(arglist__7773);
          var y = cljs.core.first(arglist__7773);
          arglist__7773 = cljs.core.next(arglist__7773);
          var z = cljs.core.first(arglist__7773);
          var args = cljs.core.rest(arglist__7773);
          return G__7772__delegate(x, y, z, args);
        };
        G__7772.cljs$core$IFn$_invoke$arity$variadic = G__7772__delegate;
        return G__7772;
      }();
      G__7771 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7771__0.call(this);
          case 1:
            return G__7771__1.call(this, x);
          case 2:
            return G__7771__2.call(this, x, y);
          case 3:
            return G__7771__3.call(this, x, y, z);
          default:
            return G__7771__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7771.cljs$lang$maxFixedArity = 3;
      G__7771.cljs$lang$applyTo = G__7771__4.cljs$lang$applyTo;
      return G__7771;
    }();
  };
  var juxt__4 = function() {
    var G__7774__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__7775 = null;
          var G__7775__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__7755_SHARP_, p2__7756_SHARP_) {
                return cljs.core.conj.call(null, p1__7755_SHARP_, p2__7756_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7775__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__7757_SHARP_, p2__7758_SHARP_) {
                return cljs.core.conj.call(null, p1__7757_SHARP_, p2__7758_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7775__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__7759_SHARP_, p2__7760_SHARP_) {
                return cljs.core.conj.call(null, p1__7759_SHARP_, p2__7760_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7775__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__7761_SHARP_, p2__7762_SHARP_) {
                return cljs.core.conj.call(null, p1__7761_SHARP_, p2__7762_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7775__4 = function() {
            var G__7776__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__7763_SHARP_, p2__7764_SHARP_) {
                  return cljs.core.conj.call(null, p1__7763_SHARP_, cljs.core.apply.call(null, p2__7764_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__7776 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__7776__delegate.call(this, x, y, z, args);
            };
            G__7776.cljs$lang$maxFixedArity = 3;
            G__7776.cljs$lang$applyTo = function(arglist__7777) {
              var x = cljs.core.first(arglist__7777);
              arglist__7777 = cljs.core.next(arglist__7777);
              var y = cljs.core.first(arglist__7777);
              arglist__7777 = cljs.core.next(arglist__7777);
              var z = cljs.core.first(arglist__7777);
              var args = cljs.core.rest(arglist__7777);
              return G__7776__delegate(x, y, z, args);
            };
            G__7776.cljs$core$IFn$_invoke$arity$variadic = G__7776__delegate;
            return G__7776;
          }();
          G__7775 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__7775__0.call(this);
              case 1:
                return G__7775__1.call(this, x);
              case 2:
                return G__7775__2.call(this, x, y);
              case 3:
                return G__7775__3.call(this, x, y, z);
              default:
                return G__7775__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__7775.cljs$lang$maxFixedArity = 3;
          G__7775.cljs$lang$applyTo = G__7775__4.cljs$lang$applyTo;
          return G__7775;
        }();
      }(fs__$1);
    };
    var G__7774 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7774__delegate.call(this, f, g, h, fs);
    };
    G__7774.cljs$lang$maxFixedArity = 3;
    G__7774.cljs$lang$applyTo = function(arglist__7778) {
      var f = cljs.core.first(arglist__7778);
      arglist__7778 = cljs.core.next(arglist__7778);
      var g = cljs.core.first(arglist__7778);
      arglist__7778 = cljs.core.next(arglist__7778);
      var h = cljs.core.first(arglist__7778);
      var fs = cljs.core.rest(arglist__7778);
      return G__7774__delegate(f, g, h, fs);
    };
    G__7774.cljs$core$IFn$_invoke$arity$variadic = G__7774__delegate;
    return G__7774;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__7779 = cljs.core.next.call(null, coll);
        coll = G__7779;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__7780 = n - 1;
        var G__7781 = cljs.core.next.call(null, coll);
        n = G__7780;
        coll = G__7781;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__7783 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__7783, 0, null);
  var flags = cljs.core.nth.call(null, vec__7783, 1, null);
  var pattern = cljs.core.nth.call(null, vec__7783, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_7785 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_7786__$1 = cljs.core.next.call(null, coll);
      var n_7787 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_7786__$1 && (n_7787 == null || !(n_7787 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_7786__$1), writer, opts);
          var G__7788 = cljs.core.next.call(null, coll_7786__$1);
          var G__7789 = n_7787 - 1;
          coll_7786__$1 = G__7788;
          n_7787 = G__7789;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_7785;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__7794 = cljs.core.seq.call(null, ss);
    var chunk__7795 = null;
    var count__7796 = 0;
    var i__7797 = 0;
    while (true) {
      if (i__7797 < count__7796) {
        var s = cljs.core._nth.call(null, chunk__7795, i__7797);
        cljs.core._write.call(null, writer, s);
        var G__7798 = seq__7794;
        var G__7799 = chunk__7795;
        var G__7800 = count__7796;
        var G__7801 = i__7797 + 1;
        seq__7794 = G__7798;
        chunk__7795 = G__7799;
        count__7796 = G__7800;
        i__7797 = G__7801;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__7794);
        if (temp__4092__auto__) {
          var seq__7794__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7794__$1)) {
            var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__7794__$1);
            var G__7802 = cljs.core.chunk_rest.call(null, seq__7794__$1);
            var G__7803 = c__4227__auto__;
            var G__7804 = cljs.core.count.call(null, c__4227__auto__);
            var G__7805 = 0;
            seq__7794 = G__7802;
            chunk__7795 = G__7803;
            count__7796 = G__7804;
            i__7797 = G__7805;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__7794__$1);
            cljs.core._write.call(null, writer, s);
            var G__7806 = cljs.core.next.call(null, seq__7794__$1);
            var G__7807 = null;
            var G__7808 = 0;
            var G__7809 = 0;
            seq__7794 = G__7806;
            chunk__7795 = G__7807;
            count__7796 = G__7808;
            i__7797 = G__7809;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__7810) {
    var writer = cljs.core.first(arglist__7810);
    var ss = cljs.core.rest(arglist__7810);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj7812 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj7812;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3467__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = function() {
              var G__7818 = obj;
              if (G__7818) {
                var bit__4129__auto__ = G__7818.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4129__auto__ || G__7818.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__7818.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__7818);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__7818);
              }
            }();
            if (and__3467__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__7819 = obj;
              if (G__7819) {
                var bit__4122__auto__ = G__7819.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4122__auto__ || G__7819.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__7821 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__7821;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__7820 = obj;
                              if (G__7820) {
                                var bit__4129__auto__ = G__7820.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4129__auto__ || G__7820.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__7820.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__7820);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__7820);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__7826 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__7827 = null;
  var count__7828 = 0;
  var i__7829 = 0;
  while (true) {
    if (i__7829 < count__7828) {
      var obj = cljs.core._nth.call(null, chunk__7827, i__7829);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__7830 = seq__7826;
      var G__7831 = chunk__7827;
      var G__7832 = count__7828;
      var G__7833 = i__7829 + 1;
      seq__7826 = G__7830;
      chunk__7827 = G__7831;
      count__7828 = G__7832;
      i__7829 = G__7833;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__7826);
      if (temp__4092__auto__) {
        var seq__7826__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7826__$1)) {
          var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__7826__$1);
          var G__7834 = cljs.core.chunk_rest.call(null, seq__7826__$1);
          var G__7835 = c__4227__auto__;
          var G__7836 = cljs.core.count.call(null, c__4227__auto__);
          var G__7837 = 0;
          seq__7826 = G__7834;
          chunk__7827 = G__7835;
          count__7828 = G__7836;
          i__7829 = G__7837;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__7826__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__7838 = cljs.core.next.call(null, seq__7826__$1);
          var G__7839 = null;
          var G__7840 = 0;
          var G__7841 = 0;
          seq__7826 = G__7838;
          chunk__7827 = G__7839;
          count__7828 = G__7840;
          i__7829 = G__7841;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__7842) {
    var objs = cljs.core.seq(arglist__7842);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__7843) {
    var objs = cljs.core.seq(arglist__7843);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__7844) {
    var objs = cljs.core.seq(arglist__7844);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__7845) {
    var objs = cljs.core.seq(arglist__7845);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__7846) {
    var objs = cljs.core.seq(arglist__7846);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__7847) {
    var objs = cljs.core.seq(arglist__7847);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__7848) {
    var objs = cljs.core.seq(arglist__7848);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__7849) {
    var objs = cljs.core.seq(arglist__7849);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj7851 = {};
  return obj7851;
}();
cljs.core.IReset = function() {
  var obj7853 = {};
  return obj7853;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj7855 = {};
  return obj7855;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__7856 = cljs.core.seq.call(null, self__.watches);
  var chunk__7857 = null;
  var count__7858 = 0;
  var i__7859 = 0;
  while (true) {
    if (i__7859 < count__7858) {
      var vec__7860 = cljs.core._nth.call(null, chunk__7857, i__7859);
      var key = cljs.core.nth.call(null, vec__7860, 0, null);
      var f = cljs.core.nth.call(null, vec__7860, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__7862 = seq__7856;
      var G__7863 = chunk__7857;
      var G__7864 = count__7858;
      var G__7865 = i__7859 + 1;
      seq__7856 = G__7862;
      chunk__7857 = G__7863;
      count__7858 = G__7864;
      i__7859 = G__7865;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__7856);
      if (temp__4092__auto__) {
        var seq__7856__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7856__$1)) {
          var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__7856__$1);
          var G__7866 = cljs.core.chunk_rest.call(null, seq__7856__$1);
          var G__7867 = c__4227__auto__;
          var G__7868 = cljs.core.count.call(null, c__4227__auto__);
          var G__7869 = 0;
          seq__7856 = G__7866;
          chunk__7857 = G__7867;
          count__7858 = G__7868;
          i__7859 = G__7869;
          continue;
        } else {
          var vec__7861 = cljs.core.first.call(null, seq__7856__$1);
          var key = cljs.core.nth.call(null, vec__7861, 0, null);
          var f = cljs.core.nth.call(null, vec__7861, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__7870 = cljs.core.next.call(null, seq__7856__$1);
          var G__7871 = null;
          var G__7872 = 0;
          var G__7873 = 0;
          seq__7856 = G__7870;
          chunk__7857 = G__7871;
          count__7858 = G__7872;
          i__7859 = G__7873;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__7877__delegate = function(x, p__7874) {
      var map__7876 = p__7874;
      var map__7876__$1 = cljs.core.seq_QMARK_.call(null, map__7876) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7876) : map__7876;
      var validator = cljs.core.get.call(null, map__7876__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__7876__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__7877 = function(x, var_args) {
      var p__7874 = null;
      if (arguments.length > 1) {
        p__7874 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7877__delegate.call(this, x, p__7874);
    };
    G__7877.cljs$lang$maxFixedArity = 1;
    G__7877.cljs$lang$applyTo = function(arglist__7878) {
      var x = cljs.core.first(arglist__7878);
      var p__7874 = cljs.core.rest(arglist__7878);
      return G__7877__delegate(x, p__7874);
    };
    G__7877.cljs$core$IFn$_invoke$arity$variadic = G__7877__delegate;
    return G__7877;
  }();
  atom = function(x, var_args) {
    var p__7874 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__7879__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__7879 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7879__delegate.call(this, a, f, x, y, more);
    };
    G__7879.cljs$lang$maxFixedArity = 4;
    G__7879.cljs$lang$applyTo = function(arglist__7880) {
      var a = cljs.core.first(arglist__7880);
      arglist__7880 = cljs.core.next(arglist__7880);
      var f = cljs.core.first(arglist__7880);
      arglist__7880 = cljs.core.next(arglist__7880);
      var x = cljs.core.first(arglist__7880);
      arglist__7880 = cljs.core.next(arglist__7880);
      var y = cljs.core.first(arglist__7880);
      var more = cljs.core.rest(arglist__7880);
      return G__7879__delegate(a, f, x, y, more);
    };
    G__7879.cljs$core$IFn$_invoke$arity$variadic = G__7879__delegate;
    return G__7879;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__7881) {
    var iref = cljs.core.first(arglist__7881);
    arglist__7881 = cljs.core.next(arglist__7881);
    var f = cljs.core.first(arglist__7881);
    var args = cljs.core.rest(arglist__7881);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(___$1) {
    return function(p__7882) {
      var map__7883 = p__7882;
      var map__7883__$1 = cljs.core.seq_QMARK_.call(null, map__7883) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7883) : map__7883;
      var curr_state = map__7883__$1;
      var done = cljs.core.get.call(null, map__7883__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
      if (cljs.core.truth_(done)) {
        return curr_state;
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
      }
    };
  }(___$1)));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj7885 = {};
  return obj7885;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__7887 = k;
    if (G__7887) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__7887.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__7887.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7887);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7887);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__7901 = x;
      if (G__7901) {
        var bit__4129__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3479__auto__ = bit__4129__auto__;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return G__7901.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__7901.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7901);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7901);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj7903 = {};
              return obj7903;
            }();
            var seq__7904_7914 = cljs.core.seq.call(null, x);
            var chunk__7905_7915 = null;
            var count__7906_7916 = 0;
            var i__7907_7917 = 0;
            while (true) {
              if (i__7907_7917 < count__7906_7916) {
                var vec__7908_7918 = cljs.core._nth.call(null, chunk__7905_7915, i__7907_7917);
                var k_7919 = cljs.core.nth.call(null, vec__7908_7918, 0, null);
                var v_7920 = cljs.core.nth.call(null, vec__7908_7918, 1, null);
                m[cljs.core.key__GT_js.call(null, k_7919)] = clj__GT_js.call(null, v_7920);
                var G__7921 = seq__7904_7914;
                var G__7922 = chunk__7905_7915;
                var G__7923 = count__7906_7916;
                var G__7924 = i__7907_7917 + 1;
                seq__7904_7914 = G__7921;
                chunk__7905_7915 = G__7922;
                count__7906_7916 = G__7923;
                i__7907_7917 = G__7924;
                continue;
              } else {
                var temp__4092__auto___7925 = cljs.core.seq.call(null, seq__7904_7914);
                if (temp__4092__auto___7925) {
                  var seq__7904_7926__$1 = temp__4092__auto___7925;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__7904_7926__$1)) {
                    var c__4227__auto___7927 = cljs.core.chunk_first.call(null, seq__7904_7926__$1);
                    var G__7928 = cljs.core.chunk_rest.call(null, seq__7904_7926__$1);
                    var G__7929 = c__4227__auto___7927;
                    var G__7930 = cljs.core.count.call(null, c__4227__auto___7927);
                    var G__7931 = 0;
                    seq__7904_7914 = G__7928;
                    chunk__7905_7915 = G__7929;
                    count__7906_7916 = G__7930;
                    i__7907_7917 = G__7931;
                    continue;
                  } else {
                    var vec__7909_7932 = cljs.core.first.call(null, seq__7904_7926__$1);
                    var k_7933 = cljs.core.nth.call(null, vec__7909_7932, 0, null);
                    var v_7934 = cljs.core.nth.call(null, vec__7909_7932, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_7933)] = clj__GT_js.call(null, v_7934);
                    var G__7935 = cljs.core.next.call(null, seq__7904_7926__$1);
                    var G__7936 = null;
                    var G__7937 = 0;
                    var G__7938 = 0;
                    seq__7904_7914 = G__7935;
                    chunk__7905_7915 = G__7936;
                    count__7906_7916 = G__7937;
                    i__7907_7917 = G__7938;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__7910_7939 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__7911_7940 = null;
              var count__7912_7941 = 0;
              var i__7913_7942 = 0;
              while (true) {
                if (i__7913_7942 < count__7912_7941) {
                  var x_7943__$1 = cljs.core._nth.call(null, chunk__7911_7940, i__7913_7942);
                  arr.push(x_7943__$1);
                  var G__7944 = seq__7910_7939;
                  var G__7945 = chunk__7911_7940;
                  var G__7946 = count__7912_7941;
                  var G__7947 = i__7913_7942 + 1;
                  seq__7910_7939 = G__7944;
                  chunk__7911_7940 = G__7945;
                  count__7912_7941 = G__7946;
                  i__7913_7942 = G__7947;
                  continue;
                } else {
                  var temp__4092__auto___7948 = cljs.core.seq.call(null, seq__7910_7939);
                  if (temp__4092__auto___7948) {
                    var seq__7910_7949__$1 = temp__4092__auto___7948;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__7910_7949__$1)) {
                      var c__4227__auto___7950 = cljs.core.chunk_first.call(null, seq__7910_7949__$1);
                      var G__7951 = cljs.core.chunk_rest.call(null, seq__7910_7949__$1);
                      var G__7952 = c__4227__auto___7950;
                      var G__7953 = cljs.core.count.call(null, c__4227__auto___7950);
                      var G__7954 = 0;
                      seq__7910_7939 = G__7951;
                      chunk__7911_7940 = G__7952;
                      count__7912_7941 = G__7953;
                      i__7913_7942 = G__7954;
                      continue;
                    } else {
                      var x_7955__$1 = cljs.core.first.call(null, seq__7910_7949__$1);
                      arr.push(x_7955__$1);
                      var G__7956 = cljs.core.next.call(null, seq__7910_7949__$1);
                      var G__7957 = null;
                      var G__7958 = 0;
                      var G__7959 = 0;
                      seq__7910_7939 = G__7956;
                      chunk__7911_7940 = G__7957;
                      count__7912_7941 = G__7958;
                      i__7913_7942 = G__7959;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj7961 = {};
  return obj7961;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__7982__delegate = function(x, opts) {
      if (function() {
        var G__7972 = x;
        if (G__7972) {
          var bit__4129__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3479__auto__ = bit__4129__auto__;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return G__7972.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__7972.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__7972);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__7972);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__7973 = opts;
          var map__7973__$1 = cljs.core.seq_QMARK_.call(null, map__7973) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7973) : map__7973;
          var keywordize_keys = cljs.core.get.call(null, map__7973__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__7973, map__7973__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4196__auto__ = function(map__7973, map__7973__$1, keywordize_keys, keyfn) {
                          return function iter__7978(s__7979) {
                            return new cljs.core.LazySeq(null, function(map__7973, map__7973__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__7979__$1 = s__7979;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__7979__$1);
                                  if (temp__4092__auto__) {
                                    var s__7979__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__7979__$2)) {
                                      var c__4194__auto__ = cljs.core.chunk_first.call(null, s__7979__$2);
                                      var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                                      var b__7981 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                                      if (function() {
                                        var i__7980 = 0;
                                        while (true) {
                                          if (i__7980 < size__4195__auto__) {
                                            var k = cljs.core._nth.call(null, c__4194__auto__, i__7980);
                                            cljs.core.chunk_append.call(null, b__7981, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__7983 = i__7980 + 1;
                                            i__7980 = G__7983;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__7981), iter__7978.call(null, cljs.core.chunk_rest.call(null, s__7979__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__7981), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__7979__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__7978.call(null, cljs.core.rest.call(null, s__7979__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__7973, map__7973__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__7973, map__7973__$1, keywordize_keys, keyfn);
                        return iter__4196__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__7973, map__7973__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__7982 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7982__delegate.call(this, x, opts);
    };
    G__7982.cljs$lang$maxFixedArity = 1;
    G__7982.cljs$lang$applyTo = function(arglist__7984) {
      var x = cljs.core.first(arglist__7984);
      var opts = cljs.core.rest(arglist__7984);
      return G__7982__delegate(x, opts);
    };
    G__7982.cljs$core$IFn$_invoke$arity$variadic = G__7982__delegate;
    return G__7982;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__7985__delegate = function(args) {
        var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var v = temp__4090__auto__;
          return v;
        } else {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        }
      };
      var G__7985 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7985__delegate.call(this, args);
      };
      G__7985.cljs$lang$maxFixedArity = 0;
      G__7985.cljs$lang$applyTo = function(arglist__7986) {
        var args = cljs.core.seq(arglist__7986);
        return G__7985__delegate(args);
      };
      G__7985.cljs$core$IFn$_invoke$arity$variadic = G__7985__delegate;
      return G__7985;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__7987 = ret;
        f = G__7987;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__7988__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__7988 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7988__delegate.call(this, f, args);
    };
    G__7988.cljs$lang$maxFixedArity = 1;
    G__7988.cljs$lang$applyTo = function(arglist__7989) {
      var f = cljs.core.first(arglist__7989);
      var args = cljs.core.rest(arglist__7989);
      return G__7988__delegate(f, args);
    };
    G__7988.cljs$core$IFn$_invoke$arity$variadic = G__7988__delegate;
    return G__7988;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__7990) {
    var f = cljs.core.first(arglist__7990);
    var args = cljs.core.rest(arglist__7990);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3479__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3479__auto__) {
      return or__3479__auto__;
    } else {
      var or__3479__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3479__auto____$1) {
        return or__3479__auto____$1;
      } else {
        var and__3467__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3467__auto__) {
          var and__3467__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3467__auto____$1) {
            var and__3467__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3467__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__7991 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__7992 = i + 1;
                  ret = G__7991;
                  i = G__7992;
                  continue;
                }
                break;
              }
            } else {
              return and__3467__auto____$2;
            }
          } else {
            return and__3467__auto____$1;
          }
        } else {
          return and__3467__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3479__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__7993_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__7993_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__7993_SHARP_), cljs.core.second.call(null, p1__7993_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__7994_SHARP_, p2__7995_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__7994_SHARP_, p2__7995_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3479__auto__ = cljs.core.truth_(function() {
    var and__3467__auto__ = xprefs;
    if (cljs.core.truth_(and__3467__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3467__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    var or__3479__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__7996 = cljs.core.rest.call(null, ps);
          ps = G__7996;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3479__auto____$1)) {
      return or__3479__auto____$1;
    } else {
      var or__3479__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__7997 = cljs.core.rest.call(null, ps);
            ps = G__7997;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3479__auto____$2)) {
        return or__3479__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3479__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__8000) {
    var vec__8001 = p__8000;
    var k = cljs.core.nth.call(null, vec__8001, 0, null);
    var _ = cljs.core.nth.call(null, vec__8001, 1, null);
    var e = vec__8001;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3479__auto__ = be == null;
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj8003 = {};
  return obj8003;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._reset[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._reset["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._add_method[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._add_method["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._remove_method[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._remove_method["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._prefer_method[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._get_method[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._get_method["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._methods[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._methods["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._prefers[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._prefers["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._dispatch[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._dispatch["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__8004__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__8004 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__8004__delegate.call(this, _, args);
  };
  G__8004.cljs$lang$maxFixedArity = 1;
  G__8004.cljs$lang$applyTo = function(arglist__8005) {
    var _ = cljs.core.first(arglist__8005);
    var args = cljs.core.rest(arglist__8005);
    return G__8004__delegate(_, args);
  };
  G__8004.cljs$core$IFn$_invoke$arity$variadic = G__8004__delegate;
  return G__8004;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4049__auto__, writer__4050__auto__, opts__4051__auto__) {
  return cljs.core._write.call(null, writer__4050__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || (width == "" || replacement.length >= width)) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("schema.utils");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
goog.require("goog.string.format");
schema.utils.assoc_when = function() {
  var assoc_when__delegate = function(m, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    return cljs.core.into.call(null, function() {
      var or__3479__auto__ = m;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__4196__auto__ = function iter__8347(s__8348) {
        return new cljs.core.LazySeq(null, function() {
          var s__8348__$1 = s__8348;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__8348__$1);
            if (temp__4092__auto__) {
              var s__8348__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__8348__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__8348__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__8350 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__8349 = 0;
                  while (true) {
                    if (i__8349 < size__4195__auto__) {
                      var vec__8353 = cljs.core._nth.call(null, c__4194__auto__, i__8349);
                      var k = cljs.core.nth.call(null, vec__8353, 0, null);
                      var v = cljs.core.nth.call(null, vec__8353, 1, null);
                      if (cljs.core.truth_(v)) {
                        cljs.core.chunk_append.call(null, b__8350, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__8355 = i__8349 + 1;
                        i__8349 = G__8355;
                        continue;
                      } else {
                        var G__8356 = i__8349 + 1;
                        i__8349 = G__8356;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8350), iter__8347.call(null, cljs.core.chunk_rest.call(null, s__8348__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8350), null);
                }
              } else {
                var vec__8354 = cljs.core.first.call(null, s__8348__$2);
                var k = cljs.core.nth.call(null, vec__8354, 0, null);
                var v = cljs.core.nth.call(null, vec__8354, 1, null);
                if (cljs.core.truth_(v)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__8347.call(null, cljs.core.rest.call(null, s__8348__$2)));
                } else {
                  var G__8357 = cljs.core.rest.call(null, s__8348__$2);
                  s__8348__$1 = G__8357;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4196__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_when = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_when__delegate.call(this, m, kvs);
  };
  assoc_when.cljs$lang$maxFixedArity = 1;
  assoc_when.cljs$lang$applyTo = function(arglist__8358) {
    var m = cljs.core.first(arglist__8358);
    var kvs = cljs.core.rest(arglist__8358);
    return assoc_when__delegate(m, kvs);
  };
  assoc_when.cljs$core$IFn$_invoke$arity$variadic = assoc_when__delegate;
  return assoc_when;
}();
schema.utils.type_of = function type_of(x) {
  return typeof x;
};
schema.utils.fn_schema_bearer = function fn_schema_bearer(f) {
  return f;
};
schema.utils.format_STAR_ = function() {
  var format_STAR___delegate = function(fmt, args) {
    return cljs.core.apply.call(null, goog.string.format, fmt, args);
  };
  var format_STAR_ = function(fmt, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return format_STAR___delegate.call(this, fmt, args);
  };
  format_STAR_.cljs$lang$maxFixedArity = 1;
  format_STAR_.cljs$lang$applyTo = function(arglist__8359) {
    var fmt = cljs.core.first(arglist__8359);
    var args = cljs.core.rest(arglist__8359);
    return format_STAR___delegate(fmt, args);
  };
  format_STAR_.cljs$core$IFn$_invoke$arity$variadic = format_STAR___delegate;
  return format_STAR_;
}();
schema.utils.value_name = function value_name(value) {
  var t = schema.utils.type_of.call(null, value);
  if (cljs.core.count.call(null, [cljs.core.str(value)].join("")) < 20) {
    return value;
  } else {
    return cljs.core.symbol.call(null, [cljs.core.str("a-"), cljs.core.str(t)].join(""));
  }
};
schema.utils.ValidationError = function(schema, value, expectation_delay, fail_explanation) {
  this.schema = schema;
  this.value = value;
  this.expectation_delay = expectation_delay;
  this.fail_explanation = fail_explanation;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2147483648;
};
schema.utils.ValidationError.cljs$lang$type = true;
schema.utils.ValidationError.cljs$lang$ctorStr = "schema.utils/ValidationError";
schema.utils.ValidationError.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "schema.utils/ValidationError");
};
schema.utils.ValidationError.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._pr_writer.call(null, schema.utils.validation_error_explain.call(null, this$__$1), writer, opts);
};
schema.utils.__GT_ValidationError = function __GT_ValidationError(schema__$1, value, expectation_delay, fail_explanation) {
  return new schema.utils.ValidationError(schema__$1, value, expectation_delay, fail_explanation);
};
schema.utils.validation_error_explain = function validation_error_explain(err) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.deref.call(null, err.expectation_delay)), function() {
    var or__3479__auto__ = err.fail_explanation;
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return new cljs.core.Symbol(null, "not", "not", -1640422260, null);
    }
  }());
};
schema.utils.__GT_ValidationError = function __GT_ValidationError(schema__$1, value, expectation_delay, fail_explanation) {
  return new schema.utils.ValidationError(schema__$1, value, expectation_delay, fail_explanation);
};
schema.utils.NamedError = function(name, error) {
  this.name = name;
  this.error = error;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2147483648;
};
schema.utils.NamedError.cljs$lang$type = true;
schema.utils.NamedError.cljs$lang$ctorStr = "schema.utils/NamedError";
schema.utils.NamedError.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "schema.utils/NamedError");
};
schema.utils.NamedError.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._pr_writer.call(null, schema.utils.named_error_explain.call(null, this$__$1), writer, opts);
};
schema.utils.__GT_NamedError = function __GT_NamedError(name, error) {
  return new schema.utils.NamedError(name, error);
};
schema.utils.named_error_explain = function named_error_explain(err) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, err.name), err.error), new cljs.core.Symbol(null, "named", "named", -1535946510, null));
};
schema.utils.__GT_NamedError = function __GT_NamedError(name, error) {
  return new schema.utils.NamedError(name, error);
};
schema.utils.ErrorContainer = function(error, __meta, __extmap) {
  this.error = error;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.utils.ErrorContainer.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8361, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8361, new cljs.core.Keyword(null, "error", "error", 1110689146))) {
    return self__.error;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8361, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8360) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8363 = cljs.core.keyword_identical_QMARK_;
  var expr__8364 = k__4073__auto__;
  if (cljs.core.truth_(pred__8363.call(null, new cljs.core.Keyword(null, "error", "error", 1110689146), expr__8364))) {
    return new schema.utils.ErrorContainer(G__8360, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.utils.ErrorContainer(self__.error, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8360), null);
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.utils.ErrorContainer{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", 1110689146), self__.error], null)], null), self__.__extmap));
};
schema.utils.ErrorContainer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", 1110689146), self__.error], null)], null), self__.__extmap));
};
schema.utils.ErrorContainer.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.utils.ErrorContainer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8360) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.utils.ErrorContainer(self__.error, G__8360, self__.__extmap, self__.__hash);
};
schema.utils.ErrorContainer.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.utils.ErrorContainer(self__.error, self__.__meta, self__.__extmap, self__.__hash);
};
schema.utils.ErrorContainer.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.utils.ErrorContainer.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "error", "error", 1110689146), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.utils.ErrorContainer(self__.error, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.utils.ErrorContainer.cljs$lang$type = true;
schema.utils.ErrorContainer.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.utils/ErrorContainer");
};
schema.utils.ErrorContainer.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.utils/ErrorContainer");
};
schema.utils.__GT_ErrorContainer = function __GT_ErrorContainer(error) {
  return new schema.utils.ErrorContainer(error);
};
schema.utils.map__GT_ErrorContainer = function map__GT_ErrorContainer(G__8362) {
  return new schema.utils.ErrorContainer((new cljs.core.Keyword(null, "error", "error", 1110689146)).cljs$core$IFn$_invoke$arity$1(G__8362), null, cljs.core.dissoc.call(null, G__8362, new cljs.core.Keyword(null, "error", "error", 1110689146)));
};
schema.utils.error = function error(x) {
  if (cljs.core.truth_(x)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "x", "x", -1640531407, null)))].join(""));
  }
  return schema.utils.__GT_ErrorContainer.call(null, x);
};
schema.utils.error_QMARK_ = function error_QMARK_(x) {
  return x instanceof schema.utils.ErrorContainer;
};
schema.utils.error_val = function error_val(x) {
  if (schema.utils.error_QMARK_.call(null, x)) {
    return x.error;
  } else {
    return null;
  }
};
schema.utils.wrap_error_name = function wrap_error_name(name, maybe_error) {
  var temp__4090__auto__ = schema.utils.error_val.call(null, maybe_error);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var e = temp__4090__auto__;
    return schema.utils.error.call(null, schema.utils.__GT_NamedError.call(null, name, e));
  } else {
    return maybe_error;
  }
};
schema.utils.result_builder = function result_builder(lift_to_error) {
  return function conjer(m, e) {
    var temp__4090__auto__ = schema.utils.error_val.call(null, e);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var err = temp__4090__auto__;
      return schema.utils.error.call(null, cljs.core.conj.call(null, function() {
        var or__3479__auto__ = schema.utils.error_val.call(null, m);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return lift_to_error.call(null, m);
        }
      }(), err));
    } else {
      var temp__4090__auto____$1 = schema.utils.error_val.call(null, m);
      if (cljs.core.truth_(temp__4090__auto____$1)) {
        var merr = temp__4090__auto____$1;
        return schema.utils.error.call(null, cljs.core.conj.call(null, merr, null));
      } else {
        return cljs.core.conj.call(null, m, e);
      }
    }
  };
};
schema.utils.declare_class_schema_BANG_ = function declare_class_schema_BANG_(klass, schema__$1) {
  return klass["schema$utils$schema"] = schema__$1;
};
schema.utils.class_schema = function class_schema(klass) {
  return klass["schema$utils$schema"];
};
schema.utils.PSimpleCell = function() {
  var obj8367 = {};
  return obj8367;
}();
schema.utils.get_cell = function get_cell(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.schema$utils$PSimpleCell$get_cell$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.schema$utils$PSimpleCell$get_cell$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = schema.utils.get_cell[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = schema.utils.get_cell["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PSimpleCell.get_cell", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.utils.set_cell = function set_cell(this$, x) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.schema$utils$PSimpleCell$set_cell$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.schema$utils$PSimpleCell$set_cell$arity$2(this$, x);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = schema.utils.set_cell[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = schema.utils.set_cell["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PSimpleCell.set_cell", this$);
        }
      }
    }().call(null, this$, x);
  }
};
schema.utils.SimpleVCell = function(q) {
  this.q = q;
};
schema.utils.SimpleVCell.cljs$lang$type = true;
schema.utils.SimpleVCell.cljs$lang$ctorStr = "schema.utils/SimpleVCell";
schema.utils.SimpleVCell.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "schema.utils/SimpleVCell");
};
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$ = true;
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$get_cell$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.q;
};
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$set_cell$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return self__.q = x;
};
schema.utils.__GT_SimpleVCell = function __GT_SimpleVCell(q) {
  return new schema.utils.SimpleVCell(q);
};
schema.utils.use_fn_validation = new schema.utils.SimpleVCell(false);
schema.utils.use_fn_validation.get_cell = cljs.core.partial.call(null, schema.utils.get_cell, schema.utils.use_fn_validation);
schema.utils.use_fn_validation.set_cell = cljs.core.partial.call(null, schema.utils.set_cell, schema.utils.use_fn_validation);
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__8376 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__8376;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__8380 = cljs.core._EQ_;
    var expr__8381 = limit;
    if (cljs.core.truth_(pred__8380.call(null, 1, expr__8381))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__8380.call(null, 2, expr__8381))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__8383 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__8384 = limit__$1 - 1;
            var G__8385 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__8383;
            limit__$1 = G__8384;
            parts = G__8385;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__8386 = index - 1;
        index = G__8386;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___8387 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___8387)) {
        var replacement_8388 = temp__4090__auto___8387;
        buffer.append([cljs.core.str(replacement_8388)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__8389 = index + 1;
      index = G__8389;
      continue;
    }
    break;
  }
};
goog.provide("schema.core");
goog.require("cljs.core");
goog.require("schema.utils");
goog.require("schema.utils");
goog.require("clojure.string");
goog.require("clojure.string");
schema.core.Schema = function() {
  var obj8126 = {};
  return obj8126;
}();
schema.core.walker = function walker(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.schema$core$Schema$walker$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.schema$core$Schema$walker$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = schema.core.walker[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = schema.core.walker["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Schema.walker", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.core.explain = function explain(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.schema$core$Schema$explain$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.schema$core$Schema$explain$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = schema.core.explain[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = schema.core.explain["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Schema.explain", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.core.subschema_walker = function subschema_walker(s) {
  throw new Error([cljs.core.str("Walking is unsupported outside of start-walker; "), cljs.core.str("all composite schemas must eagerly bind subschema-walkers "), cljs.core.str("outside the returned walker.")].join(""));
};
schema.core.start_walker = function start_walker(sub_walker, schema__$1) {
  var subschema_walker8128 = schema.core.subschema_walker;
  try {
    schema.core.subschema_walker = sub_walker;
    return schema.core.subschema_walker.call(null, schema__$1);
  } finally {
    schema.core.subschema_walker = subschema_walker8128;
  }
};
schema.core.checker = function checker(schema__$1) {
  return cljs.core.comp.call(null, schema.utils.error_val, schema.core.start_walker.call(null, schema.core.walker, schema__$1));
};
schema.core.check = function check(schema__$1, x) {
  return schema.core.checker.call(null, schema__$1).call(null, x);
};
schema.core.validate = function validate(schema__$1, value) {
  var temp__4092__auto___8129 = schema.core.check.call(null, schema__$1, value);
  if (cljs.core.truth_(temp__4092__auto___8129)) {
    var error_8130 = temp__4092__auto___8129;
    throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Value does not match schema: %s", cljs.core.pr_str.call(null, error_8130)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), schema__$1, new cljs.core.Keyword(null, "value", "value", 1125876963), value, new cljs.core.Keyword(null, "error", "error", 1110689146), error_8130], null));
  } else {
  }
  return value;
};
schema.core.Schema["function"] = true;
schema.core.walker["function"] = function(this$) {
  var class_walker = function() {
    var temp__4090__auto__ = schema.utils.class_schema.call(null, this$);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var more_schema = temp__4090__auto__;
      return schema.core.subschema_walker.call(null, more_schema);
    } else {
      return cljs.core.identity;
    }
  }();
  return function(class_walker) {
    return function(x) {
      var or__3479__auto__ = x == null || cljs.core.not.call(null, function() {
        var or__3479__auto__ = this$ === x.constructor;
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          return x instanceof this$;
        }
      }()) ? schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(class_walker) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), this$), new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null));
        };
      }(class_walker)), null)) : null;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return class_walker.call(null, x);
      }
    };
  }(class_walker);
};
schema.core.explain["function"] = function(this$) {
  var temp__4090__auto__ = schema.utils.class_schema.call(null, this$);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var more_schema = temp__4090__auto__;
    return schema.core.explain.call(null, more_schema);
  } else {
    return this$;
  }
};
schema.core.AnythingSchema = function(_, __meta, __extmap) {
  this._ = _;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.AnythingSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8132, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8132, new cljs.core.Keyword(null, "_", "_", 1013904337))) {
    return self__._;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8132, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8131) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8134 = cljs.core.keyword_identical_QMARK_;
  var expr__8135 = k__4073__auto__;
  if (cljs.core.truth_(pred__8134.call(null, new cljs.core.Keyword(null, "_", "_", 1013904337), expr__8135))) {
    return new schema.core.AnythingSchema(G__8131, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.AnythingSchema(self__._, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8131), null);
  }
};
schema.core.AnythingSchema.prototype.schema$core$Schema$ = true;
schema.core.AnythingSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.identity;
};
schema.core.AnythingSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.Symbol(null, "Any", "Any", -1640465531, null);
};
schema.core.AnythingSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.AnythingSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "_", "_", 1013904337), self__._], null)], null), self__.__extmap));
};
schema.core.AnythingSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.AnythingSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "_", "_", 1013904337), self__._], null)], null), self__.__extmap));
};
schema.core.AnythingSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.AnythingSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8131) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.AnythingSchema(self__._, G__8131, self__.__extmap, self__.__hash);
};
schema.core.AnythingSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.AnythingSchema(self__._, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.AnythingSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.AnythingSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "_", "_", 1013904337), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.AnythingSchema(self__._, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.AnythingSchema.cljs$lang$type = true;
schema.core.AnythingSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/AnythingSchema");
};
schema.core.AnythingSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/AnythingSchema");
};
schema.core.__GT_AnythingSchema = function __GT_AnythingSchema(_) {
  return new schema.core.AnythingSchema(_);
};
schema.core.map__GT_AnythingSchema = function map__GT_AnythingSchema(G__8133) {
  return new schema.core.AnythingSchema((new cljs.core.Keyword(null, "_", "_", 1013904337)).cljs$core$IFn$_invoke$arity$1(G__8133), null, cljs.core.dissoc.call(null, G__8133, new cljs.core.Keyword(null, "_", "_", 1013904337)));
};
schema.core.Any = new schema.core.AnythingSchema(null);
schema.core.EqSchema = function(v, __meta, __extmap) {
  this.v = v;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.EqSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.EqSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.EqSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8138, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8138, new cljs.core.Keyword(null, "v", "v", 1013904360))) {
    return self__.v;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8138, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.EqSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8137) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8140 = cljs.core.keyword_identical_QMARK_;
  var expr__8141 = k__4073__auto__;
  if (cljs.core.truth_(pred__8140.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), expr__8141))) {
    return new schema.core.EqSchema(G__8137, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.EqSchema(self__.v, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8137), null);
  }
};
schema.core.EqSchema.prototype.schema$core$Schema$ = true;
schema.core.EqSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core._EQ_.call(null, self__.v, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.v), new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.EqSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.v), new cljs.core.Symbol(null, "eq", "eq", -1640528283, null));
};
schema.core.EqSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.EqSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null)], null), self__.__extmap));
};
schema.core.EqSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.EqSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null)], null), self__.__extmap));
};
schema.core.EqSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.EqSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.EqSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8137) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.EqSchema(self__.v, G__8137, self__.__extmap, self__.__hash);
};
schema.core.EqSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.EqSchema(self__.v, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.EqSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.EqSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "v", "v", 1013904360), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.EqSchema(self__.v, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.EqSchema.cljs$lang$type = true;
schema.core.EqSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/EqSchema");
};
schema.core.EqSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/EqSchema");
};
schema.core.__GT_EqSchema = function __GT_EqSchema(v) {
  return new schema.core.EqSchema(v);
};
schema.core.map__GT_EqSchema = function map__GT_EqSchema(G__8139) {
  return new schema.core.EqSchema((new cljs.core.Keyword(null, "v", "v", 1013904360)).cljs$core$IFn$_invoke$arity$1(G__8139), null, cljs.core.dissoc.call(null, G__8139, new cljs.core.Keyword(null, "v", "v", 1013904360)));
};
schema.core.eq = function eq(v) {
  return new schema.core.EqSchema(v);
};
schema.core.EnumSchema = function(vs, __meta, __extmap) {
  this.vs = vs;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.EnumSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.EnumSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.EnumSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8144, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8144, new cljs.core.Keyword(null, "vs", "vs", 1013908015))) {
    return self__.vs;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8144, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.EnumSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8143) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8146 = cljs.core.keyword_identical_QMARK_;
  var expr__8147 = k__4073__auto__;
  if (cljs.core.truth_(pred__8146.call(null, new cljs.core.Keyword(null, "vs", "vs", 1013908015), expr__8147))) {
    return new schema.core.EnumSchema(G__8143, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.EnumSchema(self__.vs, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8143), null);
  }
};
schema.core.EnumSchema.prototype.schema$core$Schema$ = true;
schema.core.EnumSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.contains_QMARK_.call(null, self__.vs, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.vs);
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.EnumSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "enum", "enum", -1637413190, null), self__.vs);
};
schema.core.EnumSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.EnumSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), self__.vs], null)], null), self__.__extmap));
};
schema.core.EnumSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.EnumSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), self__.vs], null)], null), self__.__extmap));
};
schema.core.EnumSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.EnumSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.EnumSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8143) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.EnumSchema(self__.vs, G__8143, self__.__extmap, self__.__hash);
};
schema.core.EnumSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.EnumSchema(self__.vs, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.EnumSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.EnumSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.EnumSchema(self__.vs, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.EnumSchema.cljs$lang$type = true;
schema.core.EnumSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/EnumSchema");
};
schema.core.EnumSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/EnumSchema");
};
schema.core.__GT_EnumSchema = function __GT_EnumSchema(vs) {
  return new schema.core.EnumSchema(vs);
};
schema.core.map__GT_EnumSchema = function map__GT_EnumSchema(G__8145) {
  return new schema.core.EnumSchema((new cljs.core.Keyword(null, "vs", "vs", 1013908015)).cljs$core$IFn$_invoke$arity$1(G__8145), null, cljs.core.dissoc.call(null, G__8145, new cljs.core.Keyword(null, "vs", "vs", 1013908015)));
};
schema.core.enum$ = function() {
  var enum$__delegate = function(vs) {
    return new schema.core.EnumSchema(cljs.core.set.call(null, vs));
  };
  var enum$ = function(var_args) {
    var vs = null;
    if (arguments.length > 0) {
      vs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return enum$__delegate.call(this, vs);
  };
  enum$.cljs$lang$maxFixedArity = 0;
  enum$.cljs$lang$applyTo = function(arglist__8149) {
    var vs = cljs.core.seq(arglist__8149);
    return enum$__delegate(vs);
  };
  enum$.cljs$core$IFn$_invoke$arity$variadic = enum$__delegate;
  return enum$;
}();
schema.core.Predicate = function(p_QMARK_, pred_name, __meta, __extmap) {
  this.p_QMARK_ = p_QMARK_;
  this.pred_name = pred_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Predicate.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Predicate.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Predicate.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8151, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8151, new cljs.core.Keyword(null, "p?", "p?", 1013907777))) {
    return self__.p_QMARK_;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k8151, new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689))) {
      return self__.pred_name;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k8151, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.Predicate.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8150) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8153 = cljs.core.keyword_identical_QMARK_;
  var expr__8154 = k__4073__auto__;
  if (cljs.core.truth_(pred__8153.call(null, new cljs.core.Keyword(null, "p?", "p?", 1013907777), expr__8154))) {
    return new schema.core.Predicate(G__8150, self__.pred_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__8153.call(null, new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), expr__8154))) {
      return new schema.core.Predicate(self__.p_QMARK_, G__8150, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8150), null);
    }
  }
};
schema.core.Predicate.prototype.schema$core$Schema$ = true;
schema.core.Predicate.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      var temp__4090__auto__ = function() {
        try {
          if (cljs.core.truth_(self__.p_QMARK_.call(null, x))) {
            return null;
          } else {
            return new cljs.core.Symbol(null, "not", "not", -1640422260, null);
          }
        } catch (e8156) {
          if (e8156 instanceof Object) {
            var e = e8156;
            return new cljs.core.Symbol(null, "throws?", "throws?", 1316818251, null);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw e8156;
            } else {
              return null;
            }
          }
        }
      }();
      if (cljs.core.truth_(temp__4090__auto__)) {
        var reason = temp__4090__auto__;
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(reason, temp__4090__auto__, this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.pred_name);
          };
        }(reason, temp__4090__auto__, this$__$1)), reason));
      } else {
        return x;
      }
    };
  }(this$__$1);
};
schema.core.Predicate.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.integer_QMARK_)) {
    return new cljs.core.Symbol(null, "Int", "Int", -1640457848, null);
  } else {
    if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.keyword_QMARK_)) {
      return new cljs.core.Symbol(null, "Keyword", "Keyword", -790286462, null);
    } else {
      if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.symbol_QMARK_)) {
        return new cljs.core.Symbol(null, "Symbol", "Symbol", 850778993, null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.pred_name), new cljs.core.Symbol(null, "pred", "pred", -1637082150, null));
        } else {
          return null;
        }
      }
    }
  }
};
schema.core.Predicate.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Predicate{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p?", "p?", 1013907777), self__.p_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), self__.pred_name], null)], null), self__.__extmap));
};
schema.core.Predicate.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Predicate.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p?", "p?", 1013907777), self__.p_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), self__.pred_name], null)], null), self__.__extmap));
};
schema.core.Predicate.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Predicate.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Predicate.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8150) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, G__8150, self__.__extmap, self__.__hash);
};
schema.core.Predicate.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Predicate.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Predicate.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), null, new cljs.core.Keyword(null, "p?", "p?", 1013907777), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Predicate.cljs$lang$type = true;
schema.core.Predicate.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Predicate");
};
schema.core.Predicate.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Predicate");
};
schema.core.__GT_Predicate = function __GT_Predicate(p_QMARK_, pred_name) {
  return new schema.core.Predicate(p_QMARK_, pred_name);
};
schema.core.map__GT_Predicate = function map__GT_Predicate(G__8152) {
  return new schema.core.Predicate((new cljs.core.Keyword(null, "p?", "p?", 1013907777)).cljs$core$IFn$_invoke$arity$1(G__8152), (new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689)).cljs$core$IFn$_invoke$arity$1(G__8152), null, cljs.core.dissoc.call(null, G__8152, new cljs.core.Keyword(null, "p?", "p?", 1013907777), new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689)));
};
schema.core.pred = function() {
  var pred = null;
  var pred__1 = function(p_QMARK_) {
    return pred.call(null, p_QMARK_, p_QMARK_);
  };
  var pred__2 = function(p_QMARK_, pred_name) {
    if (cljs.core.ifn_QMARK_.call(null, p_QMARK_)) {
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Not a function: %s", p_QMARK_));
    }
    return new schema.core.Predicate(p_QMARK_, pred_name);
  };
  pred = function(p_QMARK_, pred_name) {
    switch(arguments.length) {
      case 1:
        return pred__1.call(this, p_QMARK_);
      case 2:
        return pred__2.call(this, p_QMARK_, pred_name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pred.cljs$core$IFn$_invoke$arity$1 = pred__1;
  pred.cljs$core$IFn$_invoke$arity$2 = pred__2;
  return pred;
}();
schema.core.protocol_name = function protocol_name(protocol) {
  return(new cljs.core.Keyword(null, "proto-sym", "proto-sym", 4707957972)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, protocol));
};
schema.core.Protocol = function(p, __meta, __extmap) {
  this.p = p;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Protocol.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Protocol.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Protocol.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8158, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8158, new cljs.core.Keyword(null, "p", "p", 1013904354))) {
    return self__.p;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8158, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.Protocol.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8157) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8160 = cljs.core.keyword_identical_QMARK_;
  var expr__8161 = k__4073__auto__;
  if (cljs.core.truth_(pred__8160.call(null, new cljs.core.Keyword(null, "p", "p", 1013904354), expr__8161))) {
    return new schema.core.Protocol(G__8157, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Protocol(self__.p, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8157), null);
  }
};
schema.core.Protocol.prototype.schema$core$Schema$ = true;
schema.core.Protocol.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "proto-pred", "proto-pred", 3860323928)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, this$__$1)).call(null, x))) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), schema.core.protocol_name.call(null, this$__$1)), new cljs.core.Symbol(null, "satisfies?", "satisfies?", 396750295, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.Protocol.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.protocol_name.call(null, this$__$1)), new cljs.core.Symbol(null, "protocol", "protocol", 1665271889, null));
};
schema.core.Protocol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Protocol{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 1013904354), self__.p], null)], null), self__.__extmap));
};
schema.core.Protocol.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Protocol.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 1013904354), self__.p], null)], null), self__.__extmap));
};
schema.core.Protocol.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Protocol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Protocol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8157) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Protocol(self__.p, G__8157, self__.__extmap, self__.__hash);
};
schema.core.Protocol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Protocol(self__.p, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Protocol.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Protocol.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "p", "p", 1013904354), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Protocol(self__.p, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Protocol.cljs$lang$type = true;
schema.core.Protocol.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Protocol");
};
schema.core.Protocol.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Protocol");
};
schema.core.__GT_Protocol = function __GT_Protocol(p) {
  return new schema.core.Protocol(p);
};
schema.core.map__GT_Protocol = function map__GT_Protocol(G__8159) {
  return new schema.core.Protocol((new cljs.core.Keyword(null, "p", "p", 1013904354)).cljs$core$IFn$_invoke$arity$1(G__8159), null, cljs.core.dissoc.call(null, G__8159, new cljs.core.Keyword(null, "p", "p", 1013904354)));
};
RegExp.prototype.schema$core$Schema$ = true;
RegExp.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (!(typeof x === "string")) {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "string?", "string?", 772676615, null));
          };
        }(this$__$1)), null));
      } else {
        if (cljs.core.not.call(null, cljs.core.re_find.call(null, this$__$1, x))) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), schema.core.explain.call(null, this$__$1)), new cljs.core.Symbol(null, "re-find", "re-find", -608081204, null));
            };
          }(this$__$1)), null));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return x;
          } else {
            return null;
          }
        }
      }
    };
  }(this$__$1);
};
RegExp.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.symbol.call(null, [cljs.core.str('#"'), cljs.core.str([cljs.core.str(this$__$1)].join("").slice(1, -1)), cljs.core.str('"')].join(""));
};
schema.core.Str = schema.core.pred.call(null, cljs.core.string_QMARK_);
schema.core.Bool = Boolean;
schema.core.Num = Number;
schema.core.Int = schema.core.pred.call(null, cljs.core.integer_QMARK_, new cljs.core.Symbol(null, "integer?", "integer?", -1070456710, null));
schema.core.Keyword = schema.core.pred.call(null, cljs.core.keyword_QMARK_, new cljs.core.Symbol(null, "keyword?", "keyword?", -1117382353, null));
schema.core.Symbol = schema.core.pred.call(null, cljs.core.symbol_QMARK_, new cljs.core.Symbol(null, "symbol?", "symbol?", 910997344, null));
schema.core.Regex = RegExp;
schema.core.Inst = Date;
schema.core.Uuid = cljs.core.UUID;
schema.core.Maybe = function(schema, __meta, __extmap) {
  this.schema = schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Maybe.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Maybe.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Maybe.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8164, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8164, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8164, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.Maybe.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8163) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8166 = cljs.core.keyword_identical_QMARK_;
  var expr__8167 = k__4073__auto__;
  if (cljs.core.truth_(pred__8166.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__8167))) {
    return new schema.core.Maybe(G__8163, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Maybe(self__.schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8163), null);
  }
};
schema.core.Maybe.prototype.schema$core$Schema$ = true;
schema.core.Maybe.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walker = schema.core.subschema_walker.call(null, self__.schema);
  return function(sub_walker, this$__$1) {
    return function(x) {
      if (x == null) {
        return null;
      } else {
        return sub_walker.call(null, x);
      }
    };
  }(sub_walker, this$__$1);
};
schema.core.Maybe.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.schema)), new cljs.core.Symbol(null, "maybe", "maybe", -1536858591, null));
};
schema.core.Maybe.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Maybe{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Maybe.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Maybe.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Maybe.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Maybe.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Maybe.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8163) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Maybe(self__.schema, G__8163, self__.__extmap, self__.__hash);
};
schema.core.Maybe.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Maybe(self__.schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Maybe.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Maybe.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Maybe(self__.schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Maybe.cljs$lang$type = true;
schema.core.Maybe.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Maybe");
};
schema.core.Maybe.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Maybe");
};
schema.core.__GT_Maybe = function __GT_Maybe(schema__$1) {
  return new schema.core.Maybe(schema__$1);
};
schema.core.map__GT_Maybe = function map__GT_Maybe(G__8165) {
  return new schema.core.Maybe((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__8165), null, cljs.core.dissoc.call(null, G__8165, new cljs.core.Keyword(null, "schema", "schema", 4400883987)));
};
schema.core.maybe = function maybe(schema__$1) {
  return new schema.core.Maybe(schema__$1);
};
schema.core.NamedSchema = function(schema, name, __meta, __extmap) {
  this.schema = schema;
  this.name = name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.NamedSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.NamedSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.NamedSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8170, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8170, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k8170, new cljs.core.Keyword(null, "name", "name", 1017277949))) {
      return self__.name;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k8170, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.NamedSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8169) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8172 = cljs.core.keyword_identical_QMARK_;
  var expr__8173 = k__4073__auto__;
  if (cljs.core.truth_(pred__8172.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__8173))) {
    return new schema.core.NamedSchema(G__8169, self__.name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__8172.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), expr__8173))) {
      return new schema.core.NamedSchema(self__.schema, G__8169, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8169), null);
    }
  }
};
schema.core.NamedSchema.prototype.schema$core$Schema$ = true;
schema.core.NamedSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walker = schema.core.subschema_walker.call(null, self__.schema);
  return function(sub_walker, this$__$1) {
    return function(x) {
      return schema.utils.wrap_error_name.call(null, self__.name, sub_walker.call(null, x));
    };
  }(sub_walker, this$__$1);
};
schema.core.NamedSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.name), schema.core.explain.call(null, self__.schema)), new cljs.core.Symbol(null, "named", "named", -1535946510, null));
};
schema.core.NamedSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.NamedSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.NamedSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.NamedSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.NamedSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.NamedSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.NamedSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8169) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.NamedSchema(self__.schema, self__.name, G__8169, self__.__extmap, self__.__hash);
};
schema.core.NamedSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.NamedSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.NamedSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.NamedSchema.cljs$lang$type = true;
schema.core.NamedSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/NamedSchema");
};
schema.core.NamedSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/NamedSchema");
};
schema.core.__GT_NamedSchema = function __GT_NamedSchema(schema__$1, name) {
  return new schema.core.NamedSchema(schema__$1, name);
};
schema.core.map__GT_NamedSchema = function map__GT_NamedSchema(G__8171) {
  return new schema.core.NamedSchema((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__8171), (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(G__8171), null, cljs.core.dissoc.call(null, G__8171, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "name", "name", 1017277949)));
};
schema.core.named = function named(schema__$1, name) {
  return new schema.core.NamedSchema(schema__$1, name);
};
schema.core.Either = function(schemas, __meta, __extmap) {
  this.schemas = schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Either.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Either.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Either.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8176, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8176, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348))) {
    return self__.schemas;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8176, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.Either.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8175) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8178 = cljs.core.keyword_identical_QMARK_;
  var expr__8179 = k__4073__auto__;
  if (cljs.core.truth_(pred__8178.call(null, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), expr__8179))) {
    return new schema.core.Either(G__8175, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Either(self__.schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8175), null);
  }
};
schema.core.Either.prototype.schema$core$Schema$ = true;
schema.core.Either.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walkers = cljs.core.mapv.call(null, schema.core.subschema_walker, self__.schemas);
  return function(sub_walkers, this$__$1) {
    return function(x) {
      var sub_walkers__$1 = cljs.core.seq.call(null, sub_walkers);
      while (true) {
        if (cljs.core.not.call(null, sub_walkers__$1)) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(sub_walkers__$1, sub_walkers, this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "schemas", "schemas", 276625579, null)), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "%", "%", -1640531490, null)), new cljs.core.Symbol(null, "check", "check", -1545904447, null))), new cljs.core.Symbol(null, "some", "some", 
              -1636995411, null));
            };
          }(sub_walkers__$1, sub_walkers, this$__$1)), null));
        } else {
          var res = cljs.core.first.call(null, sub_walkers__$1).call(null, x);
          if (!schema.utils.error_QMARK_.call(null, res)) {
            return res;
          } else {
            var G__8181 = cljs.core.next.call(null, sub_walkers__$1);
            sub_walkers__$1 = G__8181;
            continue;
          }
        }
        break;
      }
    };
  }(sub_walkers, this$__$1);
};
schema.core.Either.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "either", "either", 1351541374, null), cljs.core.map.call(null, schema.core.explain, self__.schemas));
};
schema.core.Either.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Either{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Either.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Either.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Either.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Either.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Either.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8175) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Either(self__.schemas, G__8175, self__.__extmap, self__.__hash);
};
schema.core.Either.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Either(self__.schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Either.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Either.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Either(self__.schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Either.cljs$lang$type = true;
schema.core.Either.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Either");
};
schema.core.Either.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Either");
};
schema.core.__GT_Either = function __GT_Either(schemas) {
  return new schema.core.Either(schemas);
};
schema.core.map__GT_Either = function map__GT_Either(G__8177) {
  return new schema.core.Either((new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)).cljs$core$IFn$_invoke$arity$1(G__8177), null, cljs.core.dissoc.call(null, G__8177, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)));
};
schema.core.either = function() {
  var either__delegate = function(schemas) {
    return new schema.core.Either(schemas);
  };
  var either = function(var_args) {
    var schemas = null;
    if (arguments.length > 0) {
      schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return either__delegate.call(this, schemas);
  };
  either.cljs$lang$maxFixedArity = 0;
  either.cljs$lang$applyTo = function(arglist__8182) {
    var schemas = cljs.core.seq(arglist__8182);
    return either__delegate(schemas);
  };
  either.cljs$core$IFn$_invoke$arity$variadic = either__delegate;
  return either;
}();
schema.core.Both = function(schemas, __meta, __extmap) {
  this.schemas = schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Both.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Both.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Both.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8184, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8184, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348))) {
    return self__.schemas;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8184, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.Both.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8183) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8186 = cljs.core.keyword_identical_QMARK_;
  var expr__8187 = k__4073__auto__;
  if (cljs.core.truth_(pred__8186.call(null, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), expr__8187))) {
    return new schema.core.Both(G__8183, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Both(self__.schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8183), null);
  }
};
schema.core.Both.prototype.schema$core$Schema$ = true;
schema.core.Both.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walkers = cljs.core.mapv.call(null, schema.core.subschema_walker, self__.schemas);
  return function(sub_walkers, this$__$1) {
    return function(x) {
      return cljs.core.reduce.call(null, function(sub_walkers, this$__$1) {
        return function(x__$1, sub_walker) {
          if (schema.utils.error_QMARK_.call(null, x__$1)) {
            return x__$1;
          } else {
            return sub_walker.call(null, x__$1);
          }
        };
      }(sub_walkers, this$__$1), x, sub_walkers);
    };
  }(sub_walkers, this$__$1);
};
schema.core.Both.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "both", "both", -1637501638, null), cljs.core.map.call(null, schema.core.explain, self__.schemas));
};
schema.core.Both.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Both{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Both.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Both.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Both.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Both.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Both.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8183) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Both(self__.schemas, G__8183, self__.__extmap, self__.__hash);
};
schema.core.Both.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Both(self__.schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Both.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Both.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Both(self__.schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Both.cljs$lang$type = true;
schema.core.Both.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Both");
};
schema.core.Both.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Both");
};
schema.core.__GT_Both = function __GT_Both(schemas) {
  return new schema.core.Both(schemas);
};
schema.core.map__GT_Both = function map__GT_Both(G__8185) {
  return new schema.core.Both((new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)).cljs$core$IFn$_invoke$arity$1(G__8185), null, cljs.core.dissoc.call(null, G__8185, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)));
};
schema.core.both = function() {
  var both__delegate = function(schemas) {
    return new schema.core.Both(schemas);
  };
  var both = function(var_args) {
    var schemas = null;
    if (arguments.length > 0) {
      schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return both__delegate.call(this, schemas);
  };
  both.cljs$lang$maxFixedArity = 0;
  both.cljs$lang$applyTo = function(arglist__8189) {
    var schemas = cljs.core.seq(arglist__8189);
    return both__delegate(schemas);
  };
  both.cljs$core$IFn$_invoke$arity$variadic = both__delegate;
  return both;
}();
schema.core.ConditionalSchema = function(preds_and_schemas, __meta, __extmap) {
  this.preds_and_schemas = preds_and_schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.ConditionalSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8191, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8191, new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275))) {
    return self__.preds_and_schemas;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8191, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8190) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8193 = cljs.core.keyword_identical_QMARK_;
  var expr__8194 = k__4073__auto__;
  if (cljs.core.truth_(pred__8193.call(null, new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), expr__8194))) {
    return new schema.core.ConditionalSchema(G__8190, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8190), null);
  }
};
schema.core.ConditionalSchema.prototype.schema$core$Schema$ = true;
schema.core.ConditionalSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var preds_and_walkers = cljs.core.mapv.call(null, function(this$__$1) {
    return function(p__8196) {
      var vec__8197 = p__8196;
      var pred = cljs.core.nth.call(null, vec__8197, 0, null);
      var schema__$1 = cljs.core.nth.call(null, vec__8197, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pred, schema.core.subschema_walker.call(null, schema__$1)], null);
    };
  }(this$__$1), self__.preds_and_schemas);
  return function(preds_and_walkers, this$__$1) {
    return function(x) {
      var temp__4090__auto__ = cljs.core.first.call(null, cljs.core.filter.call(null, function(preds_and_walkers, this$__$1) {
        return function(p__8198) {
          var vec__8199 = p__8198;
          var pred = cljs.core.nth.call(null, vec__8199, 0, null);
          return pred.call(null, x);
        };
      }(preds_and_walkers, this$__$1), preds_and_walkers));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var vec__8200 = temp__4090__auto__;
        var _ = cljs.core.nth.call(null, vec__8200, 0, null);
        var match = cljs.core.nth.call(null, vec__8200, 1, null);
        return match.call(null, x);
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(temp__4090__auto__, preds_and_walkers, this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "matches-some-condition?", "matches-some-condition?", 1290930716, null));
          };
        }(temp__4090__auto__, preds_and_walkers, this$__$1)), null));
      }
    };
  }(preds_and_walkers, this$__$1);
};
schema.core.ConditionalSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "conditional", "conditional", -432400321, null), cljs.core.mapcat.call(null, function(this$__$1) {
    return function(p__8201) {
      var vec__8202 = p__8201;
      var pred = cljs.core.nth.call(null, vec__8202, 0, null);
      var schema__$1 = cljs.core.nth.call(null, vec__8202, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pred, schema.core.explain.call(null, schema__$1)], null);
    };
  }(this$__$1), self__.preds_and_schemas));
};
schema.core.ConditionalSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.ConditionalSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), self__.preds_and_schemas], null)], null), self__.__extmap));
};
schema.core.ConditionalSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), self__.preds_and_schemas], null)], null), self__.__extmap));
};
schema.core.ConditionalSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.ConditionalSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8190) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.ConditionalSchema(self__.preds_and_schemas, G__8190, self__.__extmap, self__.__hash);
};
schema.core.ConditionalSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.ConditionalSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.ConditionalSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.ConditionalSchema.cljs$lang$type = true;
schema.core.ConditionalSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/ConditionalSchema");
};
schema.core.ConditionalSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/ConditionalSchema");
};
schema.core.__GT_ConditionalSchema = function __GT_ConditionalSchema(preds_and_schemas) {
  return new schema.core.ConditionalSchema(preds_and_schemas);
};
schema.core.map__GT_ConditionalSchema = function map__GT_ConditionalSchema(G__8192) {
  return new schema.core.ConditionalSchema((new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275)).cljs$core$IFn$_invoke$arity$1(G__8192), null, cljs.core.dissoc.call(null, G__8192, new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275)));
};
schema.core.conditional = function() {
  var conditional__delegate = function(preds_and_schemas) {
    if (cljs.core.seq.call(null, preds_and_schemas) && cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, preds_and_schemas))) {
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Expected even, nonzero number of args; got %s", cljs.core.count.call(null, preds_and_schemas)));
    }
    return new schema.core.ConditionalSchema(function() {
      var iter__4196__auto__ = function iter__8211(s__8212) {
        return new cljs.core.LazySeq(null, function() {
          var s__8212__$1 = s__8212;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__8212__$1);
            if (temp__4092__auto__) {
              var s__8212__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__8212__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__8212__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__8214 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__8213 = 0;
                  while (true) {
                    if (i__8213 < size__4195__auto__) {
                      var vec__8217 = cljs.core._nth.call(null, c__4194__auto__, i__8213);
                      var pred = cljs.core.nth.call(null, vec__8217, 0, null);
                      var schema__$1 = cljs.core.nth.call(null, vec__8217, 1, null);
                      cljs.core.chunk_append.call(null, b__8214, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, pred, new cljs.core.Keyword(null, "else", "else", 1017020587)) ? cljs.core.constantly.call(null, true) : pred, schema__$1], null));
                      var G__8219 = i__8213 + 1;
                      i__8213 = G__8219;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8214), iter__8211.call(null, cljs.core.chunk_rest.call(null, s__8212__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8214), null);
                }
              } else {
                var vec__8218 = cljs.core.first.call(null, s__8212__$2);
                var pred = cljs.core.nth.call(null, vec__8218, 0, null);
                var schema__$1 = cljs.core.nth.call(null, vec__8218, 1, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, pred, new cljs.core.Keyword(null, "else", "else", 1017020587)) ? cljs.core.constantly.call(null, true) : pred, schema__$1], null), iter__8211.call(null, cljs.core.rest.call(null, s__8212__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4196__auto__.call(null, cljs.core.partition.call(null, 2, preds_and_schemas));
    }());
  };
  var conditional = function(var_args) {
    var preds_and_schemas = null;
    if (arguments.length > 0) {
      preds_and_schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return conditional__delegate.call(this, preds_and_schemas);
  };
  conditional.cljs$lang$maxFixedArity = 0;
  conditional.cljs$lang$applyTo = function(arglist__8220) {
    var preds_and_schemas = cljs.core.seq(arglist__8220);
    return conditional__delegate(preds_and_schemas);
  };
  conditional.cljs$core$IFn$_invoke$arity$variadic = conditional__delegate;
  return conditional;
}();
schema.core.if$ = function if$(pred, if_schema, else_schema) {
  return schema.core.conditional.call(null, pred, if_schema, cljs.core.constantly.call(null, true), else_schema);
};
schema.core._PLUS_missing_PLUS_ = new cljs.core.Keyword("schema.core", "missing", "schema.core/missing", 1882142615);
schema.core.RequiredKey = function(k, __meta, __extmap) {
  this.k = k;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.RequiredKey.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.RequiredKey.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.RequiredKey.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8222, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8222, new cljs.core.Keyword(null, "k", "k", 1013904349))) {
    return self__.k;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8222, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.RequiredKey.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8221) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8224 = cljs.core.keyword_identical_QMARK_;
  var expr__8225 = k__4073__auto__;
  if (cljs.core.truth_(pred__8224.call(null, new cljs.core.Keyword(null, "k", "k", 1013904349), expr__8225))) {
    return new schema.core.RequiredKey(G__8221, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.RequiredKey(self__.k, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8221), null);
  }
};
schema.core.RequiredKey.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.RequiredKey{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.RequiredKey.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.RequiredKey.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.RequiredKey.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.RequiredKey.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.RequiredKey.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8221) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.RequiredKey(self__.k, G__8221, self__.__extmap, self__.__hash);
};
schema.core.RequiredKey.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.RequiredKey(self__.k, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.RequiredKey.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.RequiredKey.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "k", "k", 1013904349), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.RequiredKey(self__.k, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.RequiredKey.cljs$lang$type = true;
schema.core.RequiredKey.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/RequiredKey");
};
schema.core.RequiredKey.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/RequiredKey");
};
schema.core.__GT_RequiredKey = function __GT_RequiredKey(k) {
  return new schema.core.RequiredKey(k);
};
schema.core.map__GT_RequiredKey = function map__GT_RequiredKey(G__8223) {
  return new schema.core.RequiredKey((new cljs.core.Keyword(null, "k", "k", 1013904349)).cljs$core$IFn$_invoke$arity$1(G__8223), null, cljs.core.dissoc.call(null, G__8223, new cljs.core.Keyword(null, "k", "k", 1013904349)));
};
schema.core.required_key = function required_key(k) {
  if (k instanceof cljs.core.Keyword) {
    return k;
  } else {
    return new schema.core.RequiredKey(k);
  }
};
schema.core.required_key_QMARK_ = function required_key_QMARK_(ks) {
  return ks instanceof cljs.core.Keyword || ks instanceof schema.core.RequiredKey;
};
schema.core.OptionalKey = function(k, __meta, __extmap) {
  this.k = k;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.OptionalKey.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.OptionalKey.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.OptionalKey.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8228, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8228, new cljs.core.Keyword(null, "k", "k", 1013904349))) {
    return self__.k;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k8228, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.OptionalKey.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8227) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8230 = cljs.core.keyword_identical_QMARK_;
  var expr__8231 = k__4073__auto__;
  if (cljs.core.truth_(pred__8230.call(null, new cljs.core.Keyword(null, "k", "k", 1013904349), expr__8231))) {
    return new schema.core.OptionalKey(G__8227, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.OptionalKey(self__.k, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8227), null);
  }
};
schema.core.OptionalKey.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.OptionalKey{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.OptionalKey.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.OptionalKey.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.OptionalKey.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.OptionalKey.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.OptionalKey.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8227) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.OptionalKey(self__.k, G__8227, self__.__extmap, self__.__hash);
};
schema.core.OptionalKey.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.OptionalKey(self__.k, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.OptionalKey.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.OptionalKey.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "k", "k", 1013904349), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.OptionalKey(self__.k, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.OptionalKey.cljs$lang$type = true;
schema.core.OptionalKey.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/OptionalKey");
};
schema.core.OptionalKey.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/OptionalKey");
};
schema.core.__GT_OptionalKey = function __GT_OptionalKey(k) {
  return new schema.core.OptionalKey(k);
};
schema.core.map__GT_OptionalKey = function map__GT_OptionalKey(G__8229) {
  return new schema.core.OptionalKey((new cljs.core.Keyword(null, "k", "k", 1013904349)).cljs$core$IFn$_invoke$arity$1(G__8229), null, cljs.core.dissoc.call(null, G__8229, new cljs.core.Keyword(null, "k", "k", 1013904349)));
};
schema.core.optional_key = function optional_key(k) {
  return new schema.core.OptionalKey(k);
};
schema.core.optional_key_QMARK_ = function optional_key_QMARK_(ks) {
  return ks instanceof schema.core.OptionalKey;
};
schema.core.explicit_schema_key = function explicit_schema_key(ks) {
  if (ks instanceof cljs.core.Keyword) {
    return ks;
  } else {
    if (ks instanceof schema.core.RequiredKey) {
      return ks.k;
    } else {
      if (schema.core.optional_key_QMARK_.call(null, ks)) {
        return ks.k;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error(schema.utils.format_STAR_.call(null, "Bad explicit key: %s", ks));
        } else {
          return null;
        }
      }
    }
  }
};
schema.core.specific_key_QMARK_ = function specific_key_QMARK_(ks) {
  return schema.core.required_key_QMARK_.call(null, ks) || schema.core.optional_key_QMARK_.call(null, ks);
};
schema.core.explain_kspec = function explain_kspec(kspec) {
  if (schema.core.specific_key_QMARK_.call(null, kspec)) {
    if (kspec instanceof cljs.core.Keyword) {
      return kspec;
    } else {
      return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explicit_schema_key.call(null, kspec)), schema.core.required_key_QMARK_.call(null, kspec) ? new cljs.core.Symbol(null, "required-key", "required-key", 1024577770, null) : schema.core.optional_key_QMARK_.call(null, kspec) ? new cljs.core.Symbol(null, "optional-key", "optional-key", 180561963, null) : null);
    }
  } else {
    return schema.core.explain.call(null, kspec);
  }
};
schema.core.MapEntry = function(kspec, val_schema, __meta, __extmap) {
  this.kspec = kspec;
  this.val_schema = val_schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.MapEntry.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8234, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8234, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816))) {
    return self__.kspec;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k8234, new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239))) {
      return self__.val_schema;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k8234, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.MapEntry.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8233) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8236 = cljs.core.keyword_identical_QMARK_;
  var expr__8237 = k__4073__auto__;
  if (cljs.core.truth_(pred__8236.call(null, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), expr__8237))) {
    return new schema.core.MapEntry(G__8233, self__.val_schema, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__8236.call(null, new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), expr__8237))) {
      return new schema.core.MapEntry(self__.kspec, G__8233, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8233), null);
    }
  }
};
schema.core.MapEntry.prototype.schema$core$Schema$ = true;
schema.core.MapEntry.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var val_walker = schema.core.subschema_walker.call(null, self__.val_schema);
  if (schema.core.specific_key_QMARK_.call(null, self__.kspec)) {
    var optional_QMARK_ = schema.core.optional_key_QMARK_.call(null, self__.kspec);
    var k = schema.core.explicit_schema_key.call(null, self__.kspec);
    return function(optional_QMARK_, k, val_walker, this$__$1) {
      return function(x) {
        if (schema.core._PLUS_missing_PLUS_ === x) {
          if (optional_QMARK_) {
            return null;
          } else {
            return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null)], null));
          }
        } else {
          if (!cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, x))) {
            return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(optional_QMARK_, k, val_walker, this$__$1) {
              return function() {
                return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "count", "count", -1545680184, null))), 2), cljs.core._EQ_);
              };
            }(optional_QMARK_, k, val_walker, this$__$1)), null));
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              var vec__8239 = x;
              var xk = cljs.core.nth.call(null, vec__8239, 0, null);
              var xv = cljs.core.nth.call(null, vec__8239, 1, null);
              if (cljs.core._EQ_.call(null, xk, k)) {
              } else {
                throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "xk", "xk", -1640527700, null), new cljs.core.Symbol(null, "k", "k", -1640531420, null))))].join(""));
              }
              var vres = val_walker.call(null, xv);
              var temp__4090__auto__ = schema.utils.error_val.call(null, vres);
              if (cljs.core.truth_(temp__4090__auto__)) {
                var ve = temp__4090__auto__;
                return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xk, ve], null));
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xk, vres], null);
              }
            } else {
              return null;
            }
          }
        }
      };
    }(optional_QMARK_, k, val_walker, this$__$1);
  } else {
    var key_walker = schema.core.subschema_walker.call(null, self__.kspec);
    return function(key_walker, val_walker, this$__$1) {
      return function(x) {
        if (!cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, x))) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(key_walker, val_walker, this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "count", "count", -1545680184, null))), 2), cljs.core._EQ_);
            };
          }(key_walker, val_walker, this$__$1)), null));
        } else {
          var out_k = key_walker.call(null, cljs.core.key.call(null, x));
          var out_ke = schema.utils.error_val.call(null, out_k);
          var out_v = val_walker.call(null, cljs.core.val.call(null, x));
          var out_ve = schema.utils.error_val.call(null, out_v);
          if (cljs.core.truth_(function() {
            var or__3479__auto__ = out_ke;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return out_ve;
            }
          }())) {
            return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
              var or__3479__auto__ = out_ke;
              if (cljs.core.truth_(or__3479__auto__)) {
                return or__3479__auto__;
              } else {
                return cljs.core.key.call(null, x);
              }
            }(), function() {
              var or__3479__auto__ = out_ve;
              if (cljs.core.truth_(or__3479__auto__)) {
                return or__3479__auto__;
              } else {
                return new cljs.core.Symbol(null, "invalid-key", "invalid-key", 1700113218, null);
              }
            }()], null));
          } else {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [out_k, out_v], null);
          }
        }
      };
    }(key_walker, val_walker, this$__$1);
  }
};
schema.core.MapEntry.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.val_schema)), schema.core.explain_kspec.call(null, self__.kspec)), new cljs.core.Symbol(null, "map-entry", "map-entry", -1829517702, null));
};
schema.core.MapEntry.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.MapEntry{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), self__.kspec], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), self__.val_schema], null)], null), self__.__extmap));
};
schema.core.MapEntry.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.MapEntry.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), self__.kspec], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), self__.val_schema], null)], null), self__.__extmap));
};
schema.core.MapEntry.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.MapEntry.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.MapEntry.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8233) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.MapEntry(self__.kspec, self__.val_schema, G__8233, self__.__extmap, self__.__hash);
};
schema.core.MapEntry.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.MapEntry.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.MapEntry.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), null, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.MapEntry.cljs$lang$type = true;
schema.core.MapEntry.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/MapEntry");
};
schema.core.MapEntry.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/MapEntry");
};
schema.core.__GT_MapEntry = function __GT_MapEntry(kspec, val_schema) {
  return new schema.core.MapEntry(kspec, val_schema);
};
schema.core.map__GT_MapEntry = function map__GT_MapEntry(G__8235) {
  return new schema.core.MapEntry((new cljs.core.Keyword(null, "kspec", "kspec", 1116257816)).cljs$core$IFn$_invoke$arity$1(G__8235), (new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239)).cljs$core$IFn$_invoke$arity$1(G__8235), null, cljs.core.dissoc.call(null, G__8235, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239)));
};
schema.core.map_entry = function map_entry(kspec, val_schema) {
  return new schema.core.MapEntry(kspec, val_schema);
};
schema.core.find_extra_keys_schema = function find_extra_keys_schema(map_schema) {
  var key_schemata = cljs.core.remove.call(null, schema.core.specific_key_QMARK_, cljs.core.keys.call(null, map_schema));
  if (cljs.core.count.call(null, key_schemata) < 2) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "More than one non-optional/required key schemata: %s", cljs.core.vec.call(null, key_schemata)));
  }
  return cljs.core.first.call(null, key_schemata);
};
schema.core.map_walker = function map_walker(map_schema) {
  var extra_keys_schema = schema.core.find_extra_keys_schema.call(null, map_schema);
  var extra_walker = cljs.core.truth_(extra_keys_schema) ? schema.core.subschema_walker.call(null, cljs.core.apply.call(null, schema.core.map_entry, cljs.core.find.call(null, map_schema, extra_keys_schema))) : null;
  var explicit_schema = cljs.core.dissoc.call(null, map_schema, extra_keys_schema);
  var explicit_walkers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4196__auto__ = function(extra_keys_schema, extra_walker, explicit_schema) {
      return function iter__8252(s__8253) {
        return new cljs.core.LazySeq(null, function(extra_keys_schema, extra_walker, explicit_schema) {
          return function() {
            var s__8253__$1 = s__8253;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__8253__$1);
              if (temp__4092__auto__) {
                var s__8253__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__8253__$2)) {
                  var c__4194__auto__ = cljs.core.chunk_first.call(null, s__8253__$2);
                  var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                  var b__8255 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                  if (function() {
                    var i__8254 = 0;
                    while (true) {
                      if (i__8254 < size__4195__auto__) {
                        var vec__8258 = cljs.core._nth.call(null, c__4194__auto__, i__8254);
                        var k = cljs.core.nth.call(null, vec__8258, 0, null);
                        var v = cljs.core.nth.call(null, vec__8258, 1, null);
                        cljs.core.chunk_append.call(null, b__8255, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.subschema_walker.call(null, schema.core.map_entry.call(null, k, v))], null));
                        var G__8263 = i__8254 + 1;
                        i__8254 = G__8263;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8255), iter__8252.call(null, cljs.core.chunk_rest.call(null, s__8253__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8255), null);
                  }
                } else {
                  var vec__8259 = cljs.core.first.call(null, s__8253__$2);
                  var k = cljs.core.nth.call(null, vec__8259, 0, null);
                  var v = cljs.core.nth.call(null, vec__8259, 1, null);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.subschema_walker.call(null, schema.core.map_entry.call(null, k, v))], null), iter__8252.call(null, cljs.core.rest.call(null, s__8253__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(extra_keys_schema, extra_walker, explicit_schema), null, null);
      };
    }(extra_keys_schema, extra_walker, explicit_schema);
    return iter__4196__auto__.call(null, explicit_schema);
  }());
  var err_conj = schema.utils.result_builder.call(null, cljs.core.constantly.call(null, cljs.core.PersistentArrayMap.EMPTY));
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, explicit_schema), cljs.core.count.call(null, explicit_walkers))) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Schema has multiple variants of the same explicit key: %s", cljs.core.mapv.call(null, schema.core.explain_kspec, cljs.core.apply.call(null, cljs.core.concat, cljs.core.filter.call(null, function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
      return function(p1__8240_SHARP_) {
        return cljs.core.count.call(null, p1__8240_SHARP_) > 1;
      };
    }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj), cljs.core.vals.call(null, cljs.core.group_by.call(null, schema.core.explicit_schema_key, cljs.core.keys.call(null, explicit_schema))))))));
  }
  return function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
    return function(x) {
      if (!cljs.core.map_QMARK_.call(null, x)) {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, map_schema, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "map?", "map?", -1637187556, null));
          };
        }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj)), null));
      } else {
        var x__$1 = x;
        var explicit_walkers__$1 = cljs.core.seq.call(null, explicit_walkers);
        var out = cljs.core.PersistentArrayMap.EMPTY;
        while (true) {
          if (cljs.core.not.call(null, explicit_walkers__$1)) {
            return cljs.core.reduce.call(null, cljs.core.truth_(extra_walker) ? function(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
              return function(out__$1, e) {
                return err_conj.call(null, out__$1, extra_walker.call(null, e));
              };
            }(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) : function(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
              return function(out__$1, p__8260) {
                var vec__8261 = p__8260;
                var k = cljs.core.nth.call(null, vec__8261, 0, null);
                var _ = cljs.core.nth.call(null, vec__8261, 1, null);
                return err_conj.call(null, out__$1, schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.Symbol(null, "disallowed-key", "disallowed-key", 2071998757, null)], null)));
              };
            }(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj), out, x__$1);
          } else {
            var vec__8262 = cljs.core.first.call(null, explicit_walkers__$1);
            var wk = cljs.core.nth.call(null, vec__8262, 0, null);
            var wv = cljs.core.nth.call(null, vec__8262, 1, null);
            var G__8264 = cljs.core.dissoc.call(null, x__$1, wk);
            var G__8265 = cljs.core.next.call(null, explicit_walkers__$1);
            var G__8266 = err_conj.call(null, out, wv.call(null, function() {
              var or__3479__auto__ = cljs.core.find.call(null, x__$1, wk);
              if (cljs.core.truth_(or__3479__auto__)) {
                return or__3479__auto__;
              } else {
                return schema.core._PLUS_missing_PLUS_;
              }
            }()));
            x__$1 = G__8264;
            explicit_walkers__$1 = G__8265;
            out = G__8266;
            continue;
          }
          break;
        }
      }
    };
  }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj);
};
schema.core.map_explain = function map_explain(this$) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4196__auto__ = function iter__8275(s__8276) {
      return new cljs.core.LazySeq(null, function() {
        var s__8276__$1 = s__8276;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__8276__$1);
          if (temp__4092__auto__) {
            var s__8276__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__8276__$2)) {
              var c__4194__auto__ = cljs.core.chunk_first.call(null, s__8276__$2);
              var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
              var b__8278 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
              if (function() {
                var i__8277 = 0;
                while (true) {
                  if (i__8277 < size__4195__auto__) {
                    var vec__8281 = cljs.core._nth.call(null, c__4194__auto__, i__8277);
                    var k = cljs.core.nth.call(null, vec__8281, 0, null);
                    var v = cljs.core.nth.call(null, vec__8281, 1, null);
                    cljs.core.chunk_append.call(null, b__8278, cljs.core.vec.call(null, cljs.core.next.call(null, schema.core.explain.call(null, schema.core.map_entry.call(null, k, v)))));
                    var G__8283 = i__8277 + 1;
                    i__8277 = G__8283;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8278), iter__8275.call(null, cljs.core.chunk_rest.call(null, s__8276__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8278), null);
              }
            } else {
              var vec__8282 = cljs.core.first.call(null, s__8276__$2);
              var k = cljs.core.nth.call(null, vec__8282, 0, null);
              var v = cljs.core.nth.call(null, vec__8282, 1, null);
              return cljs.core.cons.call(null, cljs.core.vec.call(null, cljs.core.next.call(null, schema.core.explain.call(null, schema.core.map_entry.call(null, k, v)))), iter__8275.call(null, cljs.core.rest.call(null, s__8276__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4196__auto__.call(null, this$);
  }());
};
cljs.core.PersistentHashMap.prototype.schema$core$Schema$ = true;
cljs.core.PersistentHashMap.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_walker.call(null, this$__$1);
};
cljs.core.PersistentHashMap.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_explain.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$ = true;
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_walker.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_explain.call(null, this$__$1);
};
cljs.core.PersistentHashSet.prototype.schema$core$Schema$ = true;
cljs.core.PersistentHashSet.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, this$__$1), 1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Set schema must have exactly one element"));
  }
  var sub_walker = schema.core.subschema_walker.call(null, cljs.core.first.call(null, this$__$1));
  return function(sub_walker, this$__$1) {
    return function(x) {
      var or__3479__auto__ = cljs.core.set_QMARK_.call(null, x) ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(sub_walker, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "set?", "set?", -1637004842, null));
        };
      }(sub_walker, this$__$1)), null));
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        var vec__8284 = cljs.core.juxt.call(null, cljs.core.remove, cljs.core.keep).call(null, schema.utils.error_val, cljs.core.map.call(null, sub_walker, x));
        var good = cljs.core.nth.call(null, vec__8284, 0, null);
        var bad = cljs.core.nth.call(null, vec__8284, 1, null);
        if (cljs.core.seq.call(null, bad)) {
          return schema.utils.error.call(null, cljs.core.set.call(null, bad));
        } else {
          return cljs.core.set.call(null, good);
        }
      }
    };
  }(sub_walker, this$__$1);
};
cljs.core.PersistentHashSet.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.set.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explain.call(null, cljs.core.first.call(null, this$__$1))], null));
};
schema.core.One = function(schema, optional_QMARK_, name, __meta, __extmap) {
  this.schema = schema;
  this.optional_QMARK_ = optional_QMARK_;
  this.name = name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.One.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.One.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.One.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8286, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8286, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k8286, new cljs.core.Keyword(null, "optional?", "optional?", 2859340881))) {
      return self__.optional_QMARK_;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k8286, new cljs.core.Keyword(null, "name", "name", 1017277949))) {
        return self__.name;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get.call(null, self__.__extmap, k8286, else__4068__auto__);
        } else {
          return null;
        }
      }
    }
  }
};
schema.core.One.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8285) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8288 = cljs.core.keyword_identical_QMARK_;
  var expr__8289 = k__4073__auto__;
  if (cljs.core.truth_(pred__8288.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__8289))) {
    return new schema.core.One(G__8285, self__.optional_QMARK_, self__.name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__8288.call(null, new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), expr__8289))) {
      return new schema.core.One(self__.schema, G__8285, self__.name, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__8288.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), expr__8289))) {
        return new schema.core.One(self__.schema, self__.optional_QMARK_, G__8285, self__.__meta, self__.__extmap, null);
      } else {
        return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8285), null);
      }
    }
  }
};
schema.core.One.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.One{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), self__.optional_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.One.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.One.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), self__.optional_QMARK_], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.One.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.One.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.One.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8285) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, G__8285, self__.__extmap, self__.__hash);
};
schema.core.One.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.One.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.One.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), null, new cljs.core.Keyword(null, "name", "name", 1017277949), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.One.cljs$lang$type = true;
schema.core.One.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/One");
};
schema.core.One.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/One");
};
schema.core.__GT_One = function __GT_One(schema__$1, optional_QMARK_, name) {
  return new schema.core.One(schema__$1, optional_QMARK_, name);
};
schema.core.map__GT_One = function map__GT_One(G__8287) {
  return new schema.core.One((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__8287), (new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(G__8287), (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(G__8287), null, cljs.core.dissoc.call(null, G__8287, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), 
  new cljs.core.Keyword(null, "name", "name", 1017277949)));
};
schema.core.one = function one(schema__$1, name) {
  return new schema.core.One(schema__$1, false, name);
};
schema.core.optional = function optional(schema__$1, name) {
  return new schema.core.One(schema__$1, true, name);
};
schema.core.parse_sequence_schema = function parse_sequence_schema(s) {
  var vec__8296 = cljs.core.split_with.call(null, function(p1__8291_SHARP_) {
    return p1__8291_SHARP_ instanceof schema.core.One && cljs.core.not.call(null, (new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(p1__8291_SHARP_));
  }, s);
  var required = cljs.core.nth.call(null, vec__8296, 0, null);
  var more = cljs.core.nth.call(null, vec__8296, 1, null);
  var vec__8297 = cljs.core.split_with.call(null, function(vec__8296, required, more) {
    return function(p1__8292_SHARP_) {
      var and__3467__auto__ = p1__8292_SHARP_ instanceof schema.core.One;
      if (and__3467__auto__) {
        return(new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(p1__8292_SHARP_);
      } else {
        return and__3467__auto__;
      }
    };
  }(vec__8296, required, more), more);
  var optional = cljs.core.nth.call(null, vec__8297, 0, null);
  var more__$1 = cljs.core.nth.call(null, vec__8297, 1, null);
  if (cljs.core.count.call(null, more__$1) <= 1 && cljs.core.every_QMARK_.call(null, function(vec__8296, required, more, vec__8297, optional, more__$1) {
    return function(p1__8293_SHARP_) {
      return!(p1__8293_SHARP_ instanceof schema.core.One);
    };
  }(vec__8296, required, more, vec__8297, optional, more__$1), more__$1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Sequence schema %s does not match [one* optional* rest-schema?]", s));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, required, optional), cljs.core.first.call(null, more__$1)], null);
};
cljs.core.PersistentVector.prototype.schema$core$Schema$ = true;
cljs.core.PersistentVector.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  var vec__8298 = schema.core.parse_sequence_schema.call(null, this$__$1);
  var singles = cljs.core.nth.call(null, vec__8298, 0, null);
  var multi = cljs.core.nth.call(null, vec__8298, 1, null);
  var single_walkers = cljs.core.vec.call(null, function() {
    var iter__4196__auto__ = function(vec__8298, singles, multi, this$__$1) {
      return function iter__8299(s__8300) {
        return new cljs.core.LazySeq(null, function(vec__8298, singles, multi, this$__$1) {
          return function() {
            var s__8300__$1 = s__8300;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__8300__$1);
              if (temp__4092__auto__) {
                var s__8300__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__8300__$2)) {
                  var c__4194__auto__ = cljs.core.chunk_first.call(null, s__8300__$2);
                  var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                  var b__8302 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                  if (function() {
                    var i__8301 = 0;
                    while (true) {
                      if (i__8301 < size__4195__auto__) {
                        var s = cljs.core._nth.call(null, c__4194__auto__, i__8301);
                        cljs.core.chunk_append.call(null, b__8302, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, schema.core.subschema_walker.call(null, s.schema)], null));
                        var G__8317 = i__8301 + 1;
                        i__8301 = G__8317;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8302), iter__8299.call(null, cljs.core.chunk_rest.call(null, s__8300__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8302), null);
                  }
                } else {
                  var s = cljs.core.first.call(null, s__8300__$2);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, schema.core.subschema_walker.call(null, s.schema)], null), iter__8299.call(null, cljs.core.rest.call(null, s__8300__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(vec__8298, singles, multi, this$__$1), null, null);
      };
    }(vec__8298, singles, multi, this$__$1);
    return iter__4196__auto__.call(null, singles);
  }());
  var multi_walker = cljs.core.truth_(multi) ? schema.core.subschema_walker.call(null, multi) : null;
  var err_conj = schema.utils.result_builder.call(null, function(vec__8298, singles, multi, single_walkers, multi_walker, this$__$1) {
    return function(m) {
      return cljs.core.vec.call(null, cljs.core.repeat.call(null, cljs.core.count.call(null, m), null));
    };
  }(vec__8298, singles, multi, single_walkers, multi_walker, this$__$1));
  return function(vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
    return function(x) {
      var or__3479__auto__ = x == null || cljs.core.sequential_QMARK_.call(null, x) ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "sequential?", "sequential?", 1865038041, null));
        };
      }(vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null));
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        var single_walkers__$1 = single_walkers;
        var x__$1 = x;
        var out = cljs.core.PersistentVector.EMPTY;
        while (true) {
          var temp__4090__auto__ = cljs.core.first.call(null, single_walkers__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var vec__8303 = temp__4090__auto__;
            var first_single = cljs.core.nth.call(null, vec__8303, 0, null);
            var single_walker = cljs.core.nth.call(null, vec__8303, 1, null);
            if (cljs.core.empty_QMARK_.call(null, x__$1)) {
              if (cljs.core.truth_(first_single.optional_QMARK_)) {
                return out;
              } else {
                return err_conj.call(null, out, schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.first, single_walkers__$1)), null, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(single_walkers__$1, x__$1, out, vec__8303, first_single, 
                single_walker, temp__4090__auto__, or__3479__auto__, vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                  return function() {
                    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "present?", "present?", 1377769629, null), function() {
                      var iter__4196__auto__ = function(single_walkers__$1, x__$1, out, vec__8303, first_single, single_walker, temp__4090__auto__, or__3479__auto__, vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                        return function iter__8304(s__8305) {
                          return new cljs.core.LazySeq(null, function(single_walkers__$1, x__$1, out, vec__8303, first_single, single_walker, temp__4090__auto__, or__3479__auto__, vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                            return function() {
                              var s__8305__$1 = s__8305;
                              while (true) {
                                var temp__4092__auto__ = cljs.core.seq.call(null, s__8305__$1);
                                if (temp__4092__auto__) {
                                  var s__8305__$2 = temp__4092__auto__;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__8305__$2)) {
                                    var c__4194__auto__ = cljs.core.chunk_first.call(null, s__8305__$2);
                                    var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                                    var b__8307 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                                    if (function() {
                                      var i__8306 = 0;
                                      while (true) {
                                        if (i__8306 < size__4195__auto__) {
                                          var vec__8310 = cljs.core._nth.call(null, c__4194__auto__, i__8306);
                                          var single = cljs.core.nth.call(null, vec__8310, 0, null);
                                          if (cljs.core.not.call(null, single.optional_QMARK_)) {
                                            cljs.core.chunk_append.call(null, b__8307, single.name);
                                            var G__8318 = i__8306 + 1;
                                            i__8306 = G__8318;
                                            continue;
                                          } else {
                                            return null;
                                          }
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8307), iter__8304.call(null, cljs.core.chunk_rest.call(null, s__8305__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8307), null);
                                    }
                                  } else {
                                    var vec__8311 = cljs.core.first.call(null, s__8305__$2);
                                    var single = cljs.core.nth.call(null, vec__8311, 0, null);
                                    if (cljs.core.not.call(null, single.optional_QMARK_)) {
                                      return cljs.core.cons.call(null, single.name, iter__8304.call(null, cljs.core.rest.call(null, s__8305__$2)));
                                    } else {
                                      return null;
                                    }
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(single_walkers__$1, x__$1, out, vec__8303, first_single, single_walker, temp__4090__auto__, or__3479__auto__, vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1), null, null);
                        };
                      }(single_walkers__$1, x__$1, out, vec__8303, first_single, single_walker, temp__4090__auto__, or__3479__auto__, vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1);
                      return iter__4196__auto__.call(null, single_walkers__$1);
                    }());
                  };
                }(single_walkers__$1, x__$1, out, vec__8303, first_single, single_walker, temp__4090__auto__, or__3479__auto__, vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null)));
              }
            } else {
              var G__8319 = cljs.core.next.call(null, single_walkers__$1);
              var G__8320 = cljs.core.rest.call(null, x__$1);
              var G__8321 = err_conj.call(null, out, schema.utils.wrap_error_name.call(null, first_single.name, single_walker.call(null, cljs.core.first.call(null, x__$1))));
              single_walkers__$1 = G__8319;
              x__$1 = G__8320;
              out = G__8321;
              continue;
            }
          } else {
            if (cljs.core.truth_(multi)) {
              return cljs.core.reduce.call(null, err_conj, out, cljs.core.map.call(null, multi_walker, x__$1));
            } else {
              if (cljs.core.seq.call(null, x__$1)) {
                return err_conj.call(null, out, schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, null, x__$1, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(single_walkers__$1, x__$1, out, temp__4090__auto__, or__3479__auto__, vec__8298, singles, multi, single_walkers, multi_walker, err_conj, 
                this$__$1) {
                  return function() {
                    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.count.call(null, x__$1)), new cljs.core.Symbol(null, "has-extra-elts?", "has-extra-elts?", 1127383714, null));
                  };
                }(single_walkers__$1, x__$1, out, temp__4090__auto__, or__3479__auto__, vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null)));
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return out;
                } else {
                  return null;
                }
              }
            }
          }
          break;
        }
      }
    };
  }(vec__8298, singles, multi, single_walkers, multi_walker, err_conj, this$__$1);
};
cljs.core.PersistentVector.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  var vec__8312 = schema.core.parse_sequence_schema.call(null, this$__$1);
  var singles = cljs.core.nth.call(null, vec__8312, 0, null);
  var multi = cljs.core.nth.call(null, vec__8312, 1, null);
  return cljs.core.vec.call(null, cljs.core.concat.call(null, function() {
    var iter__4196__auto__ = function(vec__8312, singles, multi, this$__$1) {
      return function iter__8313(s__8314) {
        return new cljs.core.LazySeq(null, function(vec__8312, singles, multi, this$__$1) {
          return function() {
            var s__8314__$1 = s__8314;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__8314__$1);
              if (temp__4092__auto__) {
                var s__8314__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__8314__$2)) {
                  var c__4194__auto__ = cljs.core.chunk_first.call(null, s__8314__$2);
                  var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                  var b__8316 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                  if (function() {
                    var i__8315 = 0;
                    while (true) {
                      if (i__8315 < size__4195__auto__) {
                        var s = cljs.core._nth.call(null, c__4194__auto__, i__8315);
                        cljs.core.chunk_append.call(null, b__8316, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(s)), schema.core.explain.call(null, (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(s))), cljs.core.truth_(s.optional_QMARK_) ? new cljs.core.Symbol(null, "optional", "optional", -1719548647, null) : 
                        new cljs.core.Symbol(null, "one", "one", -1640421345, null)));
                        var G__8322 = i__8315 + 1;
                        i__8315 = G__8322;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8316), iter__8313.call(null, cljs.core.chunk_rest.call(null, s__8314__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8316), null);
                  }
                } else {
                  var s = cljs.core.first.call(null, s__8314__$2);
                  return cljs.core.cons.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(s)), schema.core.explain.call(null, (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(s))), cljs.core.truth_(s.optional_QMARK_) ? new cljs.core.Symbol(null, "optional", "optional", -1719548647, null) : new cljs.core.Symbol(null, 
                  "one", "one", -1640421345, null)), iter__8313.call(null, cljs.core.rest.call(null, s__8314__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(vec__8312, singles, multi, this$__$1), null, null);
      };
    }(vec__8312, singles, multi, this$__$1);
    return iter__4196__auto__.call(null, singles);
  }(), cljs.core.truth_(multi) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explain.call(null, multi)], null) : null));
};
schema.core.pair = function pair(first_schema, first_name, second_schema, second_name) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, first_schema, first_name), schema.core.one.call(null, second_schema, second_name)], null);
};
schema.core.Record = function(klass, schema, __meta, __extmap) {
  this.klass = klass;
  this.schema = schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Record.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Record.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Record.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8324, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8324, new cljs.core.Keyword(null, "klass", "klass", 1116035314))) {
    return self__.klass;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k8324, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
      return self__.schema;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k8324, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.Record.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8323) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8326 = cljs.core.keyword_identical_QMARK_;
  var expr__8327 = k__4073__auto__;
  if (cljs.core.truth_(pred__8326.call(null, new cljs.core.Keyword(null, "klass", "klass", 1116035314), expr__8327))) {
    return new schema.core.Record(G__8323, self__.schema, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__8326.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__8327))) {
      return new schema.core.Record(self__.klass, G__8323, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.Record(self__.klass, self__.schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8323), null);
    }
  }
};
schema.core.Record.prototype.schema$core$Schema$ = true;
schema.core.Record.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var map_checker = schema.core.subschema_walker.call(null, self__.schema);
  var pred_checker = function() {
    var temp__4092__auto__ = (new cljs.core.Keyword(null, "extra-validator-fn", "extra-validator-fn", 2525540146)).cljs$core$IFn$_invoke$arity$1(this$__$1);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var evf = temp__4092__auto__;
      return schema.core.subschema_walker.call(null, schema.core.pred.call(null, evf));
    } else {
      return null;
    }
  }();
  return function(map_checker, pred_checker, this$__$1) {
    return function(r) {
      var or__3479__auto__ = r instanceof self__.klass ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, r, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(map_checker, pred_checker, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, r)), self__.klass), new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null));
        };
      }(map_checker, pred_checker, this$__$1)), null));
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        var res = map_checker.call(null, r);
        if (schema.utils.error_QMARK_.call(null, res)) {
          return res;
        } else {
          var pred_res = cljs.core.truth_(pred_checker) ? pred_checker.call(null, r) : null;
          if (schema.utils.error_QMARK_.call(null, pred_res)) {
            return pred_res;
          } else {
            return cljs.core.merge.call(null, r, res);
          }
        }
      }
    };
  }(map_checker, pred_checker, this$__$1);
};
schema.core.Record.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.schema)), cljs.core.symbol.call(null, cljs.core.pr_str.call(null, self__.klass))), new cljs.core.Symbol(null, "record", "record", 1719526922, null));
};
schema.core.Record.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Record{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "klass", "klass", 1116035314), self__.klass], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Record.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Record.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "klass", "klass", 1116035314), self__.klass], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Record.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Record.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Record.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8323) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Record(self__.klass, self__.schema, G__8323, self__.__extmap, self__.__hash);
};
schema.core.Record.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Record(self__.klass, self__.schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Record.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Record.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "klass", "klass", 1116035314), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Record(self__.klass, self__.schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Record.cljs$lang$type = true;
schema.core.Record.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Record");
};
schema.core.Record.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Record");
};
schema.core.__GT_Record = function __GT_Record(klass, schema__$1) {
  return new schema.core.Record(klass, schema__$1);
};
schema.core.map__GT_Record = function map__GT_Record(G__8325) {
  return new schema.core.Record((new cljs.core.Keyword(null, "klass", "klass", 1116035314)).cljs$core$IFn$_invoke$arity$1(G__8325), (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__8325), null, cljs.core.dissoc.call(null, G__8325, new cljs.core.Keyword(null, "klass", "klass", 1116035314), new cljs.core.Keyword(null, "schema", "schema", 4400883987)));
};
schema.core.record = function record(klass, schema__$1) {
  if (cljs.core.map_QMARK_.call(null, schema__$1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Expected map, got %s", schema.utils.type_of.call(null, schema__$1)));
  }
  return new schema.core.Record(klass, schema__$1);
};
schema.core.explain_input_schema = function explain_input_schema(input_schema) {
  var vec__8332 = cljs.core.split_with.call(null, function(p1__8329_SHARP_) {
    return p1__8329_SHARP_ instanceof schema.core.One;
  }, input_schema);
  var required = cljs.core.nth.call(null, vec__8332, 0, null);
  var more = cljs.core.nth.call(null, vec__8332, 1, null);
  return cljs.core.concat.call(null, cljs.core.map.call(null, function(vec__8332, required, more) {
    return function(p1__8330_SHARP_) {
      return schema.core.explain.call(null, p1__8330_SHARP_.schema);
    };
  }(vec__8332, required, more), required), cljs.core.seq.call(null, more) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), cljs.core.mapv.call(null, schema.core.explain, more)], null) : null);
};
schema.core.FnSchema = function(output_schema, input_schemas, __meta, __extmap) {
  this.output_schema = output_schema;
  this.input_schemas = input_schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.FnSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.FnSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.FnSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k8334, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k8334, new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263))) {
    return self__.output_schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k8334, new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529))) {
      return self__.input_schemas;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k8334, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.FnSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__8333) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__8336 = cljs.core.keyword_identical_QMARK_;
  var expr__8337 = k__4073__auto__;
  if (cljs.core.truth_(pred__8336.call(null, new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), expr__8337))) {
    return new schema.core.FnSchema(G__8333, self__.input_schemas, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__8336.call(null, new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), expr__8337))) {
      return new schema.core.FnSchema(self__.output_schema, G__8333, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__8333), null);
    }
  }
};
schema.core.FnSchema.prototype.schema$core$Schema$ = true;
schema.core.FnSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.fn_QMARK_.call(null, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "fn?", "fn?", -1640430032, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.FnSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.input_schemas) > 1) {
    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "\x3d\x3e*", "\x3d\x3e*", -1640470942, null), schema.core.explain.call(null, self__.output_schema), cljs.core.map.call(null, schema.core.explain_input_schema, self__.input_schemas));
  } else {
    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "\x3d\x3e", "\x3d\x3e", -1640529574, null), schema.core.explain.call(null, self__.output_schema), schema.core.explain_input_schema.call(null, cljs.core.first.call(null, self__.input_schemas)));
  }
};
schema.core.FnSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.FnSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), self__.output_schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), self__.input_schemas], null)], null), self__.__extmap));
};
schema.core.FnSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.FnSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), self__.output_schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), self__.input_schemas], 
  null)], null), self__.__extmap));
};
schema.core.FnSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.FnSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.FnSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__8333) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, G__8333, self__.__extmap, self__.__hash);
};
schema.core.FnSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.FnSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.FnSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), null, new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.FnSchema.cljs$lang$type = true;
schema.core.FnSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/FnSchema");
};
schema.core.FnSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/FnSchema");
};
schema.core.__GT_FnSchema = function __GT_FnSchema(output_schema, input_schemas) {
  return new schema.core.FnSchema(output_schema, input_schemas);
};
schema.core.map__GT_FnSchema = function map__GT_FnSchema(G__8335) {
  return new schema.core.FnSchema((new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263)).cljs$core$IFn$_invoke$arity$1(G__8335), (new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529)).cljs$core$IFn$_invoke$arity$1(G__8335), null, cljs.core.dissoc.call(null, G__8335, new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529)));
};
schema.core.arity = function arity(input_schema) {
  if (cljs.core.seq.call(null, input_schema)) {
    if (cljs.core.last.call(null, input_schema) instanceof schema.core.One) {
      return cljs.core.count.call(null, input_schema);
    } else {
      return Number.MAX_VALUE;
    }
  } else {
    return 0;
  }
};
schema.core.make_fn_schema = function make_fn_schema(output_schema, input_schemas) {
  if (cljs.core.seq.call(null, input_schemas)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Function must have at least one input schema"));
  }
  if (cljs.core.every_QMARK_.call(null, cljs.core.vector_QMARK_, input_schemas)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Each arity must be a vector."));
  }
  if (cljs.core.truth_(cljs.core.apply.call(null, cljs.core.distinct_QMARK_, cljs.core.map.call(null, schema.core.arity, input_schemas)))) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Arities must be distinct"));
  }
  return new schema.core.FnSchema(output_schema, cljs.core.sort_by.call(null, schema.core.arity, input_schemas));
};
schema.core.fn_validation_QMARK_ = function fn_validation_QMARK_() {
  return schema.utils.use_fn_validation.get_cell();
};
schema.core.set_fn_validation_BANG_ = function set_fn_validation_BANG_(on_QMARK_) {
  return schema.utils.use_fn_validation.set_cell(on_QMARK_);
};
schema.core.schematize_fn = function schematize_fn(f, schema__$1) {
  return cljs.core.vary_meta.call(null, f, cljs.core.assoc, new cljs.core.Keyword(null, "schema", "schema", 4400883987), schema__$1);
};
schema.core.fn_schema = function fn_schema(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Non-function %s", schema.utils.type_of.call(null, f)));
  }
  var or__3479__auto__ = schema.utils.class_schema.call(null, schema.utils.fn_schema_bearer.call(null, f));
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    var m__7077__auto__ = cljs.core.meta.call(null, f);
    var k__7078__auto__ = new cljs.core.Keyword(null, "schema", "schema", 4400883987);
    var temp__4090__auto__ = cljs.core.find.call(null, m__7077__auto__, k__7078__auto__);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var pair__7079__auto__ = temp__4090__auto__;
      return cljs.core.val.call(null, pair__7079__auto__);
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Key %s not found in %s", k__7078__auto__, m__7077__auto__));
    }
  }
};
schema.core.schema_with_name = function schema_with_name(schema__$1, name) {
  return cljs.core.with_meta.call(null, schema__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1017277949), name], null));
};
schema.core.schema_name = function schema_name(schema__$1) {
  return(new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, schema__$1));
};
goog.provide("plumbing.fnk.schema");
goog.require("cljs.core");
goog.require("schema.utils");
goog.require("schema.utils");
goog.require("schema.core");
goog.require("schema.core");
plumbing.fnk.schema.Schema = cljs.core.with_meta.call(null, schema.core.__GT_Protocol.call(null, schema.core.Schema), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "proto-sym", "proto-sym", 4707957972), new cljs.core.Symbol("s", "Schema", "s/Schema", 830322725, null), new cljs.core.Keyword(null, "proto-pred", "proto-pred", 3860323928), function(p1__5311__5312__auto__) {
  var G__10316 = p1__5311__5312__auto__;
  if (G__10316) {
    var bit__4129__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3479__auto__ = bit__4129__auto__;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return G__10316.schema$core$Schema$;
      }
    }())) {
      return true;
    } else {
      if (!G__10316.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, schema.core.Schema, G__10316);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, schema.core.Schema, G__10316);
  }
}], null));
plumbing.fnk.schema.InputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.either.call(null, schema.core.eq.call(null, schema.core.Keyword), schema.core.OptionalKey, schema.core.Keyword), plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.OutputSchema = plumbing.fnk.schema.Schema;
plumbing.fnk.schema.IOSchemata = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.OutputSchema, new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null);
plumbing.fnk.schema.GraphInputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.either.call(null, schema.core.OptionalKey, schema.core.Keyword), plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.MapOutputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.GraphIOSchemata = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.GraphInputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.MapOutputSchema, new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null);
plumbing.fnk.schema.assert_distinct = function assert_distinct(things) {
  var repeated_things = cljs.core.seq.call(null, cljs.core.filter.call(null, function(p1__10317_SHARP_) {
    return cljs.core.val.call(null, p1__10317_SHARP_) > 1;
  }, cljs.core.frequencies.call(null, things)));
  if (cljs.core.empty_QMARK_.call(null, repeated_things)) {
    return null;
  } else {
    throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Got repeated items (expected distinct): %s", repeated_things));
  }
};
plumbing.fnk.schema.safe_get = function safe_get(m, k, key_path) {
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Expected a map at key-path %s, got type %s", key_path, schema.utils.type_of.call(null, m)));
  }
  var vec__10319 = cljs.core.find.call(null, m, k);
  var _ = cljs.core.nth.call(null, vec__10319, 0, null);
  var v = cljs.core.nth.call(null, vec__10319, 1, null);
  var p = vec__10319;
  if (cljs.core.truth_(p)) {
  } else {
    throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Key %s not found in %s", k, cljs.core.keys.call(null, m)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "missing-key", "missing-key", 2360894698), new cljs.core.Keyword(null, "key", "key", 1014010321), k, new cljs.core.Keyword(null, "map", "map", 1014012110), m], null));
  }
  return v;
};
plumbing.fnk.schema.non_map_union = function non_map_union(s1, s2) {
  if (cljs.core._EQ_.call(null, s1, s2)) {
    return s1;
  } else {
    if (cljs.core._EQ_.call(null, s1, schema.core.Any)) {
      return s2;
    } else {
      if (cljs.core._EQ_.call(null, s2, schema.core.Any)) {
        return s1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return schema.core.both.call(null, s1, s2);
        } else {
          return null;
        }
      }
    }
  }
};
plumbing.fnk.schema.non_map_diff = function non_map_diff(s1, s2) {
  return null;
};
plumbing.fnk.schema.map_schema_QMARK_ = function map_schema_QMARK_(m) {
  return m instanceof cljs.core.PersistentArrayMap || m instanceof cljs.core.PersistentHashMap;
};
var ufv___10325 = schema.utils.use_fn_validation;
var output_schema10320_10326 = schema.core.maybe.call(null, schema.core.pair.call(null, schema.core.Keyword, "k", schema.core.Bool, "optional?"));
var input_schema10321_10327 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "k", "k", -1640531420, null))], null);
var input_checker10322_10328 = schema.core.checker.call(null, input_schema10321_10327);
var output_checker10323_10329 = schema.core.checker.call(null, output_schema10320_10326);
plumbing.fnk.schema.unwrap_schema_form_key = function(ufv___10325, output_schema10320_10326, input_schema10321_10327, input_checker10322_10328, output_checker10323_10329) {
  return function unwrap_schema_form_key(G__10324) {
    var validate__5281__auto__ = ufv___10325.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___10330 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__10324], null);
      var temp__4092__auto___10331 = input_checker10322_10328.call(null, args__5282__auto___10330);
      if (cljs.core.truth_(temp__4092__auto___10331)) {
        var error__5283__auto___10332 = temp__4092__auto___10331;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "unwrap-schema-form-key", "unwrap-schema-form-key", -143561007, null), cljs.core.pr_str.call(null, error__5283__auto___10332)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10332, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema10321_10327, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__5282__auto___10330], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var k = G__10324;
      while (true) {
        if (schema.core.specific_key_QMARK_.call(null, k)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.required_key_QMARK_.call(null, k)], null);
        } else {
          if (cljs.core.sequential_QMARK_.call(null, k) && (!cljs.core.vector_QMARK_.call(null, k) && (cljs.core._EQ_.call(null, cljs.core.count.call(null, k), 2) && cljs.core._EQ_.call(null, cljs.core.first.call(null, k), new cljs.core.Symbol("schema.core", "optional-key", "schema.core/optional-key", -54341422, null))))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, k), false], null);
          } else {
            return null;
          }
        }
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___10333 = output_checker10323_10329.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___10333)) {
        var error__5283__auto___10334 = temp__4092__auto___10333;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "unwrap-schema-form-key", "unwrap-schema-form-key", -143561007, null), cljs.core.pr_str.call(null, error__5283__auto___10334)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10334, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema10320_10326, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___10325, output_schema10320_10326, input_schema10321_10327, input_checker10322_10328, output_checker10323_10329);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.unwrap_schema_form_key), schema.core.make_fn_schema.call(null, output_schema10320_10326, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema10321_10327], null)));
var ufv___10340 = schema.utils.use_fn_validation;
var output_schema10335_10341 = schema.core.Any;
var input_schema10336_10342 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "s", "s", -1640531412, null))], null);
var input_checker10337_10343 = schema.core.checker.call(null, input_schema10336_10342);
var output_checker10338_10344 = schema.core.checker.call(null, output_schema10335_10341);
plumbing.fnk.schema.explicit_schema_key_map = function(ufv___10340, output_schema10335_10341, input_schema10336_10342, input_checker10337_10343, output_checker10338_10344) {
  return function explicit_schema_key_map(G__10339) {
    var validate__5281__auto__ = ufv___10340.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___10345 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__10339], null);
      var temp__4092__auto___10346 = input_checker10337_10343.call(null, args__5282__auto___10345);
      if (cljs.core.truth_(temp__4092__auto___10346)) {
        var error__5283__auto___10347 = temp__4092__auto___10346;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "explicit-schema-key-map", "explicit-schema-key-map", 2031840052, null), cljs.core.pr_str.call(null, error__5283__auto___10347)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10347, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema10336_10342, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__5282__auto___10345], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var s = G__10339;
      while (true) {
        new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Bool], true, false);
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.keep.call(null, plumbing.fnk.schema.unwrap_schema_form_key, cljs.core.keys.call(null, s)));
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___10348 = output_checker10338_10344.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___10348)) {
        var error__5283__auto___10349 = temp__4092__auto___10348;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "explicit-schema-key-map", "explicit-schema-key-map", 2031840052, null), cljs.core.pr_str.call(null, error__5283__auto___10349)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10349, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema10335_10341, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___10340, output_schema10335_10341, input_schema10336_10342, input_checker10337_10343, output_checker10338_10344);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.explicit_schema_key_map), schema.core.make_fn_schema.call(null, output_schema10335_10341, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema10336_10342], null)));
var ufv___10355 = schema.utils.use_fn_validation;
var output_schema10350_10356 = schema.core.Any;
var input_schema10351_10357 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Bool], true, false), new cljs.core.Symbol(null, "s", "s", -1640531412, null))], null);
var input_checker10352_10358 = schema.core.checker.call(null, input_schema10351_10357);
var output_checker10353_10359 = schema.core.checker.call(null, output_schema10350_10356);
plumbing.fnk.schema.split_schema_keys = function(ufv___10355, output_schema10350_10356, input_schema10351_10357, input_checker10352_10358, output_checker10353_10359) {
  return function split_schema_keys(G__10354) {
    var validate__5281__auto__ = ufv___10355.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___10360 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__10354], null);
      var temp__4092__auto___10361 = input_checker10352_10358.call(null, args__5282__auto___10360);
      if (cljs.core.truth_(temp__4092__auto___10361)) {
        var error__5283__auto___10362 = temp__4092__auto___10361;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema-keys", "split-schema-keys", 1165575718, null), cljs.core.pr_str.call(null, error__5283__auto___10362)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10362, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema10351_10357, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__5282__auto___10360], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var s = G__10354;
      while (true) {
        new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "required", "required", -2033670824, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "optional", "optional", -1719548647, 
        null))], null);
        return cljs.core.mapv.call(null, cljs.core.partial.call(null, cljs.core.mapv, cljs.core.key), cljs.core.juxt.call(null, cljs.core.filter, cljs.core.remove).call(null, cljs.core.val, s));
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___10363 = output_checker10353_10359.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___10363)) {
        var error__5283__auto___10364 = temp__4092__auto___10363;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema-keys", "split-schema-keys", 1165575718, null), cljs.core.pr_str.call(null, error__5283__auto___10364)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10364, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema10350_10356, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___10355, output_schema10350_10356, input_schema10351_10357, input_checker10352_10358, output_checker10353_10359);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.split_schema_keys), schema.core.make_fn_schema.call(null, output_schema10350_10356, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema10351_10357], null)));
plumbing.fnk.schema.merge_on_with = function() {
  var merge_on_with__delegate = function(key_project, key_combine, val_combine, maps) {
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.vals.call(null, cljs.core.reduce.call(null, function(m, p__10368) {
      var vec__10369 = p__10368;
      var k = cljs.core.nth.call(null, vec__10369, 0, null);
      var v = cljs.core.nth.call(null, vec__10369, 1, null);
      var pk = key_project.call(null, k);
      var temp__4090__auto__ = cljs.core.get.call(null, m, pk);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var vec__10370 = temp__4090__auto__;
        var ok = cljs.core.nth.call(null, vec__10370, 0, null);
        var ov = cljs.core.nth.call(null, vec__10370, 1, null);
        return cljs.core.assoc.call(null, m, pk, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_combine.call(null, ok, k), val_combine.call(null, ov, v)], null));
      } else {
        return cljs.core.assoc.call(null, m, pk, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
      }
    }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.apply.call(null, cljs.core.concat, maps))));
  };
  var merge_on_with = function(key_project, key_combine, val_combine, var_args) {
    var maps = null;
    if (arguments.length > 3) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return merge_on_with__delegate.call(this, key_project, key_combine, val_combine, maps);
  };
  merge_on_with.cljs$lang$maxFixedArity = 3;
  merge_on_with.cljs$lang$applyTo = function(arglist__10371) {
    var key_project = cljs.core.first(arglist__10371);
    arglist__10371 = cljs.core.next(arglist__10371);
    var key_combine = cljs.core.first(arglist__10371);
    arglist__10371 = cljs.core.next(arglist__10371);
    var val_combine = cljs.core.first(arglist__10371);
    var maps = cljs.core.rest(arglist__10371);
    return merge_on_with__delegate(key_project, key_combine, val_combine, maps);
  };
  merge_on_with.cljs$core$IFn$_invoke$arity$variadic = merge_on_with__delegate;
  return merge_on_with;
}();
var ufv___10379 = schema.utils.use_fn_validation;
var output_schema10373_10380 = plumbing.fnk.schema.InputSchema;
var input_schema10374_10381 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "i1", "i1", -1640528223, null)), schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "i2", "i2", -1640528222, null))], null);
var input_checker10375_10382 = schema.core.checker.call(null, input_schema10374_10381);
var output_checker10376_10383 = schema.core.checker.call(null, output_schema10373_10380);
plumbing.fnk.schema.union_input_schemata = function(ufv___10379, output_schema10373_10380, input_schema10374_10381, input_checker10375_10382, output_checker10376_10383) {
  return function union_input_schemata(G__10377, G__10378) {
    var validate__5281__auto__ = ufv___10379.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___10384 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__10377, G__10378], null);
      var temp__4092__auto___10385 = input_checker10375_10382.call(null, args__5282__auto___10384);
      if (cljs.core.truth_(temp__4092__auto___10385)) {
        var error__5283__auto___10386 = temp__4092__auto___10385;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "union-input-schemata", "union-input-schemata", 1314662120, null), cljs.core.pr_str.call(null, error__5283__auto___10386)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10386, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema10374_10381, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__5282__auto___10384], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var i1 = G__10377;
      var i2 = G__10378;
      while (true) {
        return plumbing.fnk.schema.merge_on_with.call(null, function(validate__5281__auto__, ufv___10379, output_schema10373_10380, input_schema10374_10381, input_checker10375_10382, output_checker10376_10383) {
          return function(p1__10372_SHARP_) {
            if (schema.core.specific_key_QMARK_.call(null, p1__10372_SHARP_)) {
              return schema.core.explicit_schema_key.call(null, p1__10372_SHARP_);
            } else {
              return new cljs.core.Keyword(null, "extra", "extra", 1110869890);
            }
          };
        }(validate__5281__auto__, ufv___10379, output_schema10373_10380, input_schema10374_10381, input_checker10375_10382, output_checker10376_10383), function(validate__5281__auto__, ufv___10379, output_schema10373_10380, input_schema10374_10381, input_checker10375_10382, output_checker10376_10383) {
          return function(k1, k2) {
            if (schema.core.required_key_QMARK_.call(null, k1)) {
              return k1;
            } else {
              if (schema.core.required_key_QMARK_.call(null, k2)) {
                return k2;
              } else {
                if (schema.core.optional_key_QMARK_.call(null, k1)) {
                  if (cljs.core._EQ_.call(null, k1, k2)) {
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "k1", "k1", -1640528161, null), new cljs.core.Symbol(null, "k2", "k2", -1640528160, null))))].join(""));
                  }
                  return k1;
                } else {
                  if (cljs.core._EQ_.call(null, k1, k2)) {
                    return k1;
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      if (false) {
                        return null;
                      } else {
                        throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Only one extra schema allowed"));
                      }
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(validate__5281__auto__, ufv___10379, output_schema10373_10380, input_schema10374_10381, input_checker10375_10382, output_checker10376_10383), function(validate__5281__auto__, ufv___10379, output_schema10373_10380, input_schema10374_10381, input_checker10375_10382, output_checker10376_10383) {
          return function(s1, s2) {
            if (plumbing.fnk.schema.map_schema_QMARK_.call(null, s1) && plumbing.fnk.schema.map_schema_QMARK_.call(null, s2)) {
              return union_input_schemata.call(null, s1, s2);
            } else {
              return plumbing.fnk.schema.non_map_union.call(null, s1, s2);
            }
          };
        }(validate__5281__auto__, ufv___10379, output_schema10373_10380, input_schema10374_10381, input_checker10375_10382, output_checker10376_10383), i1, i2);
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___10387 = output_checker10376_10383.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___10387)) {
        var error__5283__auto___10388 = temp__4092__auto___10387;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "union-input-schemata", "union-input-schemata", 1314662120, null), cljs.core.pr_str.call(null, error__5283__auto___10388)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10388, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema10373_10380, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___10379, output_schema10373_10380, input_schema10374_10381, input_checker10375_10382, output_checker10376_10383);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.union_input_schemata), schema.core.make_fn_schema.call(null, output_schema10373_10380, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema10374_10381], null)));
var ufv___10394 = schema.utils.use_fn_validation;
var output_schema10389_10395 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null);
var input_schema10390_10396 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input-schema", "input-schema", -1943844163, null))], null);
var input_checker10391_10397 = schema.core.checker.call(null, input_schema10390_10396);
var output_checker10392_10398 = schema.core.checker.call(null, output_schema10389_10395);
plumbing.fnk.schema.required_toplevel_keys = function(ufv___10394, output_schema10389_10395, input_schema10390_10396, input_checker10391_10397, output_checker10392_10398) {
  return function required_toplevel_keys(G__10393) {
    var validate__5281__auto__ = ufv___10394.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___10399 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__10393], null);
      var temp__4092__auto___10400 = input_checker10391_10397.call(null, args__5282__auto___10399);
      if (cljs.core.truth_(temp__4092__auto___10400)) {
        var error__5283__auto___10401 = temp__4092__auto___10400;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "required-toplevel-keys", "required-toplevel-keys", -1439959619, null), cljs.core.pr_str.call(null, error__5283__auto___10401)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10401, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema10390_10396, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__5282__auto___10399], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var input_schema = G__10393;
      while (true) {
        return cljs.core.keep.call(null, function(validate__5281__auto__, ufv___10394, output_schema10389_10395, input_schema10390_10396, input_checker10391_10397, output_checker10392_10398) {
          return function(k) {
            if (schema.core.required_key_QMARK_.call(null, k)) {
              return schema.core.explicit_schema_key.call(null, k);
            } else {
              return null;
            }
          };
        }(validate__5281__auto__, ufv___10394, output_schema10389_10395, input_schema10390_10396, input_checker10391_10397, output_checker10392_10398), cljs.core.keys.call(null, input_schema));
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___10402 = output_checker10392_10398.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___10402)) {
        var error__5283__auto___10403 = temp__4092__auto___10402;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "required-toplevel-keys", "required-toplevel-keys", -1439959619, null), cljs.core.pr_str.call(null, error__5283__auto___10403)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10403, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema10389_10395, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___10394, output_schema10389_10395, input_schema10390_10396, input_checker10391_10397, output_checker10392_10398);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.required_toplevel_keys), schema.core.make_fn_schema.call(null, output_schema10389_10395, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema10390_10396], null)));
plumbing.fnk.schema.guess_expr_output_schema = function guess_expr_output_schema(expr) {
  if (cljs.core.map_QMARK_.call(null, expr) && cljs.core.every_QMARK_.call(null, cljs.core.keyword_QMARK_, cljs.core.keys.call(null, expr))) {
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4196__auto__ = function iter__10412(s__10413) {
        return new cljs.core.LazySeq(null, function() {
          var s__10413__$1 = s__10413;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__10413__$1);
            if (temp__4092__auto__) {
              var s__10413__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__10413__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__10413__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__10415 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__10414 = 0;
                  while (true) {
                    if (i__10414 < size__4195__auto__) {
                      var vec__10418 = cljs.core._nth.call(null, c__4194__auto__, i__10414);
                      var k = cljs.core.nth.call(null, vec__10418, 0, null);
                      var v = cljs.core.nth.call(null, vec__10418, 1, null);
                      cljs.core.chunk_append.call(null, b__10415, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, guess_expr_output_schema.call(null, v)], null));
                      var G__10420 = i__10414 + 1;
                      i__10414 = G__10420;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10415), iter__10412.call(null, cljs.core.chunk_rest.call(null, s__10413__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10415), null);
                }
              } else {
                var vec__10419 = cljs.core.first.call(null, s__10413__$2);
                var k = cljs.core.nth.call(null, vec__10419, 0, null);
                var v = cljs.core.nth.call(null, vec__10419, 1, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, guess_expr_output_schema.call(null, v)], null), iter__10412.call(null, cljs.core.rest.call(null, s__10413__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4196__auto__.call(null, expr);
    }());
  } else {
    return new cljs.core.Symbol("schema.core", "Any", "schema.core/Any", 271859124, null);
  }
};
plumbing.fnk.schema.schema_diff = function schema_diff(input_schema, output_schema) {
  if (!plumbing.fnk.schema.map_schema_QMARK_.call(null, input_schema)) {
    return plumbing.fnk.schema.non_map_diff.call(null, input_schema, output_schema);
  } else {
    if (!plumbing.fnk.schema.map_schema_QMARK_.call(null, output_schema)) {
      return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, input_schema, output_schema, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function() {
        return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, output_schema)), new cljs.core.Symbol(null, "map?", "map?", -1637187556, null));
      }), null));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.not_empty.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
          var iter__4196__auto__ = function iter__10429(s__10430) {
            return new cljs.core.LazySeq(null, function() {
              var s__10430__$1 = s__10430;
              while (true) {
                var temp__4092__auto__ = cljs.core.seq.call(null, s__10430__$1);
                if (temp__4092__auto__) {
                  var s__10430__$2 = temp__4092__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__10430__$2)) {
                    var c__4194__auto__ = cljs.core.chunk_first.call(null, s__10430__$2);
                    var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                    var b__10432 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                    if (function() {
                      var i__10431 = 0;
                      while (true) {
                        if (i__10431 < size__4195__auto__) {
                          var vec__10435 = cljs.core._nth.call(null, c__4194__auto__, i__10431);
                          var k = cljs.core.nth.call(null, vec__10435, 0, null);
                          var v = cljs.core.nth.call(null, vec__10435, 1, null);
                          if (schema.core.specific_key_QMARK_.call(null, k)) {
                            var required_QMARK_ = schema.core.required_key_QMARK_.call(null, k);
                            var raw_k = schema.core.explicit_schema_key.call(null, k);
                            var present_QMARK_ = cljs.core.contains_QMARK_.call(null, output_schema, raw_k);
                            if (required_QMARK_ || present_QMARK_) {
                              var fail = !present_QMARK_ ? new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null) : schema_diff.call(null, v, cljs.core.get.call(null, output_schema, raw_k));
                              if (cljs.core.truth_(fail)) {
                                cljs.core.chunk_append.call(null, b__10432, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, fail], null));
                                var G__10437 = i__10431 + 1;
                                i__10431 = G__10437;
                                continue;
                              } else {
                                var G__10438 = i__10431 + 1;
                                i__10431 = G__10438;
                                continue;
                              }
                            } else {
                              var G__10439 = i__10431 + 1;
                              i__10431 = G__10439;
                              continue;
                            }
                          } else {
                            var G__10440 = i__10431 + 1;
                            i__10431 = G__10440;
                            continue;
                          }
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10432), iter__10429.call(null, cljs.core.chunk_rest.call(null, s__10430__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10432), null);
                    }
                  } else {
                    var vec__10436 = cljs.core.first.call(null, s__10430__$2);
                    var k = cljs.core.nth.call(null, vec__10436, 0, null);
                    var v = cljs.core.nth.call(null, vec__10436, 1, null);
                    if (schema.core.specific_key_QMARK_.call(null, k)) {
                      var required_QMARK_ = schema.core.required_key_QMARK_.call(null, k);
                      var raw_k = schema.core.explicit_schema_key.call(null, k);
                      var present_QMARK_ = cljs.core.contains_QMARK_.call(null, output_schema, raw_k);
                      if (required_QMARK_ || present_QMARK_) {
                        var fail = !present_QMARK_ ? new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null) : schema_diff.call(null, v, cljs.core.get.call(null, output_schema, raw_k));
                        if (cljs.core.truth_(fail)) {
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, fail], null), iter__10429.call(null, cljs.core.rest.call(null, s__10430__$2)));
                        } else {
                          var G__10441 = cljs.core.rest.call(null, s__10430__$2);
                          s__10430__$1 = G__10441;
                          continue;
                        }
                      } else {
                        var G__10442 = cljs.core.rest.call(null, s__10430__$2);
                        s__10430__$1 = G__10442;
                        continue;
                      }
                    } else {
                      var G__10443 = cljs.core.rest.call(null, s__10430__$2);
                      s__10430__$1 = G__10443;
                      continue;
                    }
                  }
                } else {
                  return null;
                }
                break;
              }
            }, null, null);
          };
          return iter__4196__auto__.call(null, input_schema);
        }()));
      } else {
        return null;
      }
    }
  }
};
plumbing.fnk.schema.assert_satisfies_schema = function assert_satisfies_schema(input_schema, output_schema) {
  var fails = plumbing.fnk.schema.schema_diff.call(null, input_schema, output_schema);
  if (cljs.core.truth_(fails)) {
    throw cljs.core.ex_info.call(null, [cljs.core.str(fails)].join(""), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "does-not-satisfy-schema", "does-not-satisfy-schema", 2405949387), new cljs.core.Keyword(null, "failures", "failures", 1689842587), fails], null));
  } else {
    return null;
  }
};
var ufv___10466 = schema.utils.use_fn_validation;
var output_schema10444_10467 = schema.core.Any;
var input_schema10445_10468 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.IOSchemata, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.MapOutputSchema, 
new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null), new cljs.core.Symbol(null, "arg1", "arg1", -1637529004, null))], null);
var input_checker10446_10469 = schema.core.checker.call(null, input_schema10445_10468);
var output_checker10447_10470 = schema.core.checker.call(null, output_schema10444_10467);
plumbing.fnk.schema.compose_schemata = function(ufv___10466, output_schema10444_10467, input_schema10445_10468, input_checker10446_10469, output_checker10447_10470) {
  return function compose_schemata(G__10448, G__10449) {
    var validate__5281__auto__ = true;
    if (validate__5281__auto__) {
      var args__5282__auto___10471 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__10448, G__10449], null);
      var temp__4092__auto___10472 = input_checker10446_10469.call(null, args__5282__auto___10471);
      if (cljs.core.truth_(temp__4092__auto___10472)) {
        var error__5283__auto___10473 = temp__4092__auto___10472;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "compose-schemata", "compose-schemata", -726429854, null), cljs.core.pr_str.call(null, error__5283__auto___10473)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10473, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema10445_10468, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__5282__auto___10471], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var G__10460 = G__10448;
      var vec__10462 = G__10460;
      var i2 = cljs.core.nth.call(null, vec__10462, 0, null);
      var o2 = cljs.core.nth.call(null, vec__10462, 1, null);
      var G__10461 = G__10449;
      var vec__10463 = G__10461;
      var i1 = cljs.core.nth.call(null, vec__10463, 0, null);
      var o1 = cljs.core.nth.call(null, vec__10463, 1, null);
      var G__10460__$1 = G__10460;
      var G__10461__$1 = G__10461;
      while (true) {
        var vec__10464 = G__10460__$1;
        var i2__$1 = cljs.core.nth.call(null, vec__10464, 0, null);
        var o2__$1 = cljs.core.nth.call(null, vec__10464, 1, null);
        var vec__10465 = G__10461__$1;
        var i1__$1 = cljs.core.nth.call(null, vec__10465, 0, null);
        var o1__$1 = cljs.core.nth.call(null, vec__10465, 1, null);
        plumbing.fnk.schema.assert_satisfies_schema.call(null, cljs.core.select_keys.call(null, i2__$1, cljs.core.keys.call(null, o1__$1)), o1__$1);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [plumbing.fnk.schema.union_input_schemata.call(null, cljs.core.apply.call(null, cljs.core.dissoc, i2__$1, cljs.core.concat.call(null, cljs.core.keys.call(null, o1__$1), cljs.core.map.call(null, schema.core.optional_key, cljs.core.keys.call(null, o1__$1)))), i1__$1), o2__$1], null);
        break;
      }
    }();
    if (validate__5281__auto__) {
      var temp__4092__auto___10474 = output_checker10447_10470.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___10474)) {
        var error__5283__auto___10475 = temp__4092__auto___10474;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "compose-schemata", "compose-schemata", -726429854, null), cljs.core.pr_str.call(null, error__5283__auto___10475)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10475, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema10444_10467, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___10466, output_schema10444_10467, input_schema10445_10468, input_checker10446_10469, output_checker10447_10470);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.compose_schemata), schema.core.make_fn_schema.call(null, output_schema10444_10467, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema10445_10468], null)));
plumbing.fnk.schema.schema_key = function schema_key(m, k) {
  if (cljs.core.contains_QMARK_.call(null, m, k)) {
    return k;
  } else {
    if (cljs.core.contains_QMARK_.call(null, m, schema.core.optional_key.call(null, k))) {
      return schema.core.optional_key.call(null, k);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
plumbing.fnk.schema.possibly_contains_QMARK_ = function possibly_contains_QMARK_(m, k) {
  return cljs.core.boolean$.call(null, plumbing.fnk.schema.schema_key.call(null, m, k));
};
var ufv___10554 = schema.utils.use_fn_validation;
var output_schema10476_10555 = schema.core.Any;
var input_schema10477_10556 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "s", "s", -1640531412, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "ks", "ks", -1640528095, null))], null);
var input_checker10478_10557 = schema.core.checker.call(null, input_schema10477_10556);
var output_checker10479_10558 = schema.core.checker.call(null, output_schema10476_10555);
plumbing.fnk.schema.split_schema = function(ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558) {
  return function split_schema(G__10480, G__10481) {
    var validate__5281__auto__ = ufv___10554.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___10559 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__10480, G__10481], null);
      var temp__4092__auto___10560 = input_checker10478_10557.call(null, args__5282__auto___10559);
      if (cljs.core.truth_(temp__4092__auto___10560)) {
        var error__5283__auto___10561 = temp__4092__auto___10560;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema", "split-schema", 1048718701, null), cljs.core.pr_str.call(null, error__5283__auto___10561)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10561, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema10477_10556, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), args__5282__auto___10559], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var s = G__10480;
      var ks = G__10481;
      while (true) {
        var ks__$1 = cljs.core.set.call(null, ks);
        var iter__4196__auto__ = function(ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558) {
          return function iter__10518(s__10519) {
            return new cljs.core.LazySeq(null, function(ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558) {
              return function() {
                var s__10519__$1 = s__10519;
                while (true) {
                  var temp__4092__auto__ = cljs.core.seq.call(null, s__10519__$1);
                  if (temp__4092__auto__) {
                    var s__10519__$2 = temp__4092__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__10519__$2)) {
                      var c__4194__auto__ = cljs.core.chunk_first.call(null, s__10519__$2);
                      var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                      var b__10521 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                      if (function() {
                        var i__10520 = 0;
                        while (true) {
                          if (i__10520 < size__4195__auto__) {
                            var in_QMARK_ = cljs.core._nth.call(null, c__4194__auto__, i__10520);
                            cljs.core.chunk_append.call(null, b__10521, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                              var iter__4196__auto__ = function(i__10520, in_QMARK_, c__4194__auto__, size__4195__auto__, b__10521, s__10519__$2, temp__4092__auto__, ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558) {
                                return function iter__10538(s__10539) {
                                  return new cljs.core.LazySeq(null, function(i__10520, in_QMARK_, c__4194__auto__, size__4195__auto__, b__10521, s__10519__$2, temp__4092__auto__, ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558) {
                                    return function() {
                                      var s__10539__$1 = s__10539;
                                      while (true) {
                                        var temp__4092__auto____$1 = cljs.core.seq.call(null, s__10539__$1);
                                        if (temp__4092__auto____$1) {
                                          var s__10539__$2 = temp__4092__auto____$1;
                                          if (cljs.core.chunked_seq_QMARK_.call(null, s__10539__$2)) {
                                            var c__4194__auto____$1 = cljs.core.chunk_first.call(null, s__10539__$2);
                                            var size__4195__auto____$1 = cljs.core.count.call(null, c__4194__auto____$1);
                                            var b__10541 = cljs.core.chunk_buffer.call(null, size__4195__auto____$1);
                                            if (function() {
                                              var i__10540 = 0;
                                              while (true) {
                                                if (i__10540 < size__4195__auto____$1) {
                                                  var vec__10544 = cljs.core._nth.call(null, c__4194__auto____$1, i__10540);
                                                  var k = cljs.core.nth.call(null, vec__10544, 0, null);
                                                  var v = cljs.core.nth.call(null, vec__10544, 1, null);
                                                  if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                                    cljs.core.chunk_append.call(null, b__10541, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                                                    var G__10562 = i__10540 + 1;
                                                    i__10540 = G__10562;
                                                    continue;
                                                  } else {
                                                    var G__10563 = i__10540 + 1;
                                                    i__10540 = G__10563;
                                                    continue;
                                                  }
                                                } else {
                                                  return true;
                                                }
                                                break;
                                              }
                                            }()) {
                                              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10541), iter__10538.call(null, cljs.core.chunk_rest.call(null, s__10539__$2)));
                                            } else {
                                              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10541), null);
                                            }
                                          } else {
                                            var vec__10545 = cljs.core.first.call(null, s__10539__$2);
                                            var k = cljs.core.nth.call(null, vec__10545, 0, null);
                                            var v = cljs.core.nth.call(null, vec__10545, 1, null);
                                            if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__10538.call(null, cljs.core.rest.call(null, s__10539__$2)));
                                            } else {
                                              var G__10564 = cljs.core.rest.call(null, s__10539__$2);
                                              s__10539__$1 = G__10564;
                                              continue;
                                            }
                                          }
                                        } else {
                                          return null;
                                        }
                                        break;
                                      }
                                    };
                                  }(i__10520, in_QMARK_, c__4194__auto__, size__4195__auto__, b__10521, s__10519__$2, temp__4092__auto__, ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558), null, null);
                                };
                              }(i__10520, in_QMARK_, c__4194__auto__, size__4195__auto__, b__10521, s__10519__$2, temp__4092__auto__, ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558);
                              return iter__4196__auto__.call(null, s);
                            }()));
                            var G__10565 = i__10520 + 1;
                            i__10520 = G__10565;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10521), iter__10518.call(null, cljs.core.chunk_rest.call(null, s__10519__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10521), null);
                      }
                    } else {
                      var in_QMARK_ = cljs.core.first.call(null, s__10519__$2);
                      return cljs.core.cons.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4196__auto__ = function(in_QMARK_, s__10519__$2, temp__4092__auto__, ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558) {
                          return function iter__10546(s__10547) {
                            return new cljs.core.LazySeq(null, function(in_QMARK_, s__10519__$2, temp__4092__auto__, ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558) {
                              return function() {
                                var s__10547__$1 = s__10547;
                                while (true) {
                                  var temp__4092__auto____$1 = cljs.core.seq.call(null, s__10547__$1);
                                  if (temp__4092__auto____$1) {
                                    var s__10547__$2 = temp__4092__auto____$1;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__10547__$2)) {
                                      var c__4194__auto__ = cljs.core.chunk_first.call(null, s__10547__$2);
                                      var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                                      var b__10549 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                                      if (function() {
                                        var i__10548 = 0;
                                        while (true) {
                                          if (i__10548 < size__4195__auto__) {
                                            var vec__10552 = cljs.core._nth.call(null, c__4194__auto__, i__10548);
                                            var k = cljs.core.nth.call(null, vec__10552, 0, null);
                                            var v = cljs.core.nth.call(null, vec__10552, 1, null);
                                            if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                              cljs.core.chunk_append.call(null, b__10549, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                                              var G__10566 = i__10548 + 1;
                                              i__10548 = G__10566;
                                              continue;
                                            } else {
                                              var G__10567 = i__10548 + 1;
                                              i__10548 = G__10567;
                                              continue;
                                            }
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10549), iter__10546.call(null, cljs.core.chunk_rest.call(null, s__10547__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10549), null);
                                      }
                                    } else {
                                      var vec__10553 = cljs.core.first.call(null, s__10547__$2);
                                      var k = cljs.core.nth.call(null, vec__10553, 0, null);
                                      var v = cljs.core.nth.call(null, vec__10553, 1, null);
                                      if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__10546.call(null, cljs.core.rest.call(null, s__10547__$2)));
                                      } else {
                                        var G__10568 = cljs.core.rest.call(null, s__10547__$2);
                                        s__10547__$1 = G__10568;
                                        continue;
                                      }
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(in_QMARK_, s__10519__$2, temp__4092__auto__, ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558), null, null);
                          };
                        }(in_QMARK_, s__10519__$2, temp__4092__auto__, ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558);
                        return iter__4196__auto__.call(null, s);
                      }()), iter__10518.call(null, cljs.core.rest.call(null, s__10519__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558), null, null);
          };
        }(ks__$1, validate__5281__auto__, ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558);
        return iter__4196__auto__.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, false], null));
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___10569 = output_checker10479_10558.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___10569)) {
        var error__5283__auto___10570 = temp__4092__auto___10569;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema", "split-schema", 1048718701, null), cljs.core.pr_str.call(null, error__5283__auto___10570)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10570, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema10476_10555, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___10554, output_schema10476_10555, input_schema10477_10556, input_checker10478_10557, output_checker10479_10558);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.split_schema), schema.core.make_fn_schema.call(null, output_schema10476_10555, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema10477_10556], null)));
var ufv___10601 = schema.utils.use_fn_validation;
var output_schema10571_10602 = plumbing.fnk.schema.GraphIOSchemata;
var input_schema10572_10603 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.GraphIOSchemata, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Keyword, "key"), schema.core.one.call(null, plumbing.fnk.schema.IOSchemata, "inner-schemas")], null), new cljs.core.Symbol(null, 
"arg1", "arg1", -1637529004, null))], null);
var input_checker10573_10604 = schema.core.checker.call(null, input_schema10572_10603);
var output_checker10574_10605 = schema.core.checker.call(null, output_schema10571_10602);
plumbing.fnk.schema.sequence_schemata = function(ufv___10601, output_schema10571_10602, input_schema10572_10603, input_checker10573_10604, output_checker10574_10605) {
  return function sequence_schemata(G__10575, G__10576) {
    var validate__5281__auto__ = ufv___10601.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___10606 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__10575, G__10576], null);
      var temp__4092__auto___10607 = input_checker10573_10604.call(null, args__5282__auto___10606);
      if (cljs.core.truth_(temp__4092__auto___10607)) {
        var error__5283__auto___10608 = temp__4092__auto___10607;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "sequence-schemata", "sequence-schemata", 19729939, null), cljs.core.pr_str.call(null, error__5283__auto___10608)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10608, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema10572_10603, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), args__5282__auto___10606], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var G__10592 = G__10575;
      var vec__10594 = G__10592;
      var i1 = cljs.core.nth.call(null, vec__10594, 0, null);
      var o1 = cljs.core.nth.call(null, vec__10594, 1, null);
      var G__10593 = G__10576;
      var vec__10595 = G__10593;
      var k = cljs.core.nth.call(null, vec__10595, 0, null);
      var vec__10596 = cljs.core.nth.call(null, vec__10595, 1, null);
      var i2 = cljs.core.nth.call(null, vec__10596, 0, null);
      var o2 = cljs.core.nth.call(null, vec__10596, 1, null);
      var G__10592__$1 = G__10592;
      var G__10593__$1 = G__10593;
      while (true) {
        var vec__10597 = G__10592__$1;
        var i1__$1 = cljs.core.nth.call(null, vec__10597, 0, null);
        var o1__$1 = cljs.core.nth.call(null, vec__10597, 1, null);
        var vec__10598 = G__10593__$1;
        var k__$1 = cljs.core.nth.call(null, vec__10598, 0, null);
        var vec__10599 = cljs.core.nth.call(null, vec__10598, 1, null);
        var i2__$1 = cljs.core.nth.call(null, vec__10599, 0, null);
        var o2__$1 = cljs.core.nth.call(null, vec__10599, 1, null);
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, i1__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Duplicate key output (possibly due to a misordered graph) %s for input %s from input %s", k__$1, schema.core.explain.call(null, i2__$1), schema.core.explain.call(null, i1__$1)));
        }
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, i2__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Node outputs a key %s in its inputs %s", k__$1, schema.core.explain.call(null, i2__$1)));
        }
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, o1__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Node outputs a duplicate key %s given inputs %s", k__$1, schema.core.explain.call(null, i1__$1)));
        }
        var vec__10600 = plumbing.fnk.schema.split_schema.call(null, i2__$1, cljs.core.keys.call(null, o1__$1));
        var used = cljs.core.nth.call(null, vec__10600, 0, null);
        var unused = cljs.core.nth.call(null, vec__10600, 1, null);
        plumbing.fnk.schema.assert_satisfies_schema.call(null, used, o1__$1);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [plumbing.fnk.schema.union_input_schemata.call(null, unused, i1__$1), cljs.core.assoc.call(null, o1__$1, k__$1, o2__$1)], null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___10609 = output_checker10574_10605.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___10609)) {
        var error__5283__auto___10610 = temp__4092__auto___10609;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "sequence-schemata", "sequence-schemata", 19729939, null), cljs.core.pr_str.call(null, error__5283__auto___10610)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___10610, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema10571_10602, new cljs.core.Keyword(null, 
        "value", "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___10601, output_schema10571_10602, input_schema10572_10603, input_checker10573_10604, output_checker10574_10605);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.sequence_schemata), schema.core.make_fn_schema.call(null, output_schema10571_10602, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema10572_10603], null)));
goog.provide("om.dom");
goog.require("cljs.core");
om.dom.a = function() {
  var a__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var a = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return a__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  a.cljs$lang$maxFixedArity = 1;
  a.cljs$lang$applyTo = function(arglist__8235) {
    var opts__5032__auto__ = cljs.core.first(arglist__8235);
    var children__5033__auto__ = cljs.core.rest(arglist__8235);
    return a__delegate(opts__5032__auto__, children__5033__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
om.dom.abbr = function() {
  var abbr__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var abbr = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return abbr__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 1;
  abbr.cljs$lang$applyTo = function(arglist__8236) {
    var opts__5032__auto__ = cljs.core.first(arglist__8236);
    var children__5033__auto__ = cljs.core.rest(arglist__8236);
    return abbr__delegate(opts__5032__auto__, children__5033__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
om.dom.address = function() {
  var address__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var address = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return address__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  address.cljs$lang$maxFixedArity = 1;
  address.cljs$lang$applyTo = function(arglist__8237) {
    var opts__5032__auto__ = cljs.core.first(arglist__8237);
    var children__5033__auto__ = cljs.core.rest(arglist__8237);
    return address__delegate(opts__5032__auto__, children__5033__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
om.dom.area = function() {
  var area__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var area = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return area__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  area.cljs$lang$maxFixedArity = 1;
  area.cljs$lang$applyTo = function(arglist__8238) {
    var opts__5032__auto__ = cljs.core.first(arglist__8238);
    var children__5033__auto__ = cljs.core.rest(arglist__8238);
    return area__delegate(opts__5032__auto__, children__5033__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
om.dom.article = function() {
  var article__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var article = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return article__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  article.cljs$lang$maxFixedArity = 1;
  article.cljs$lang$applyTo = function(arglist__8239) {
    var opts__5032__auto__ = cljs.core.first(arglist__8239);
    var children__5033__auto__ = cljs.core.rest(arglist__8239);
    return article__delegate(opts__5032__auto__, children__5033__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
om.dom.aside = function() {
  var aside__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var aside = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return aside__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  aside.cljs$lang$maxFixedArity = 1;
  aside.cljs$lang$applyTo = function(arglist__8240) {
    var opts__5032__auto__ = cljs.core.first(arglist__8240);
    var children__5033__auto__ = cljs.core.rest(arglist__8240);
    return aside__delegate(opts__5032__auto__, children__5033__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
om.dom.audio = function() {
  var audio__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var audio = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return audio__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  audio.cljs$lang$maxFixedArity = 1;
  audio.cljs$lang$applyTo = function(arglist__8241) {
    var opts__5032__auto__ = cljs.core.first(arglist__8241);
    var children__5033__auto__ = cljs.core.rest(arglist__8241);
    return audio__delegate(opts__5032__auto__, children__5033__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
om.dom.b = function() {
  var b__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var b = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return b__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  b.cljs$lang$maxFixedArity = 1;
  b.cljs$lang$applyTo = function(arglist__8242) {
    var opts__5032__auto__ = cljs.core.first(arglist__8242);
    var children__5033__auto__ = cljs.core.rest(arglist__8242);
    return b__delegate(opts__5032__auto__, children__5033__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
om.dom.base = function() {
  var base__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var base = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return base__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  base.cljs$lang$maxFixedArity = 1;
  base.cljs$lang$applyTo = function(arglist__8243) {
    var opts__5032__auto__ = cljs.core.first(arglist__8243);
    var children__5033__auto__ = cljs.core.rest(arglist__8243);
    return base__delegate(opts__5032__auto__, children__5033__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
om.dom.bdi = function() {
  var bdi__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var bdi = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdi__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 1;
  bdi.cljs$lang$applyTo = function(arglist__8244) {
    var opts__5032__auto__ = cljs.core.first(arglist__8244);
    var children__5033__auto__ = cljs.core.rest(arglist__8244);
    return bdi__delegate(opts__5032__auto__, children__5033__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
om.dom.bdo = function() {
  var bdo__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var bdo = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdo__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 1;
  bdo.cljs$lang$applyTo = function(arglist__8245) {
    var opts__5032__auto__ = cljs.core.first(arglist__8245);
    var children__5033__auto__ = cljs.core.rest(arglist__8245);
    return bdo__delegate(opts__5032__auto__, children__5033__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
om.dom.big = function() {
  var big__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var big = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return big__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  big.cljs$lang$maxFixedArity = 1;
  big.cljs$lang$applyTo = function(arglist__8246) {
    var opts__5032__auto__ = cljs.core.first(arglist__8246);
    var children__5033__auto__ = cljs.core.rest(arglist__8246);
    return big__delegate(opts__5032__auto__, children__5033__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
om.dom.blockquote = function() {
  var blockquote__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var blockquote = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return blockquote__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 1;
  blockquote.cljs$lang$applyTo = function(arglist__8247) {
    var opts__5032__auto__ = cljs.core.first(arglist__8247);
    var children__5033__auto__ = cljs.core.rest(arglist__8247);
    return blockquote__delegate(opts__5032__auto__, children__5033__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
om.dom.body = function() {
  var body__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var body = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return body__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  body.cljs$lang$maxFixedArity = 1;
  body.cljs$lang$applyTo = function(arglist__8248) {
    var opts__5032__auto__ = cljs.core.first(arglist__8248);
    var children__5033__auto__ = cljs.core.rest(arglist__8248);
    return body__delegate(opts__5032__auto__, children__5033__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
om.dom.br = function() {
  var br__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var br = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return br__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  br.cljs$lang$maxFixedArity = 1;
  br.cljs$lang$applyTo = function(arglist__8249) {
    var opts__5032__auto__ = cljs.core.first(arglist__8249);
    var children__5033__auto__ = cljs.core.rest(arglist__8249);
    return br__delegate(opts__5032__auto__, children__5033__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
om.dom.button = function() {
  var button__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var button = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return button__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  button.cljs$lang$maxFixedArity = 1;
  button.cljs$lang$applyTo = function(arglist__8250) {
    var opts__5032__auto__ = cljs.core.first(arglist__8250);
    var children__5033__auto__ = cljs.core.rest(arglist__8250);
    return button__delegate(opts__5032__auto__, children__5033__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
om.dom.canvas = function() {
  var canvas__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var canvas = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return canvas__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 1;
  canvas.cljs$lang$applyTo = function(arglist__8251) {
    var opts__5032__auto__ = cljs.core.first(arglist__8251);
    var children__5033__auto__ = cljs.core.rest(arglist__8251);
    return canvas__delegate(opts__5032__auto__, children__5033__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
om.dom.caption = function() {
  var caption__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var caption = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return caption__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  caption.cljs$lang$maxFixedArity = 1;
  caption.cljs$lang$applyTo = function(arglist__8252) {
    var opts__5032__auto__ = cljs.core.first(arglist__8252);
    var children__5033__auto__ = cljs.core.rest(arglist__8252);
    return caption__delegate(opts__5032__auto__, children__5033__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
om.dom.cite = function() {
  var cite__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var cite = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return cite__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  cite.cljs$lang$maxFixedArity = 1;
  cite.cljs$lang$applyTo = function(arglist__8253) {
    var opts__5032__auto__ = cljs.core.first(arglist__8253);
    var children__5033__auto__ = cljs.core.rest(arglist__8253);
    return cite__delegate(opts__5032__auto__, children__5033__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
om.dom.code = function() {
  var code__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var code = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return code__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  code.cljs$lang$maxFixedArity = 1;
  code.cljs$lang$applyTo = function(arglist__8254) {
    var opts__5032__auto__ = cljs.core.first(arglist__8254);
    var children__5033__auto__ = cljs.core.rest(arglist__8254);
    return code__delegate(opts__5032__auto__, children__5033__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
om.dom.col = function() {
  var col__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var col = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return col__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  col.cljs$lang$maxFixedArity = 1;
  col.cljs$lang$applyTo = function(arglist__8255) {
    var opts__5032__auto__ = cljs.core.first(arglist__8255);
    var children__5033__auto__ = cljs.core.rest(arglist__8255);
    return col__delegate(opts__5032__auto__, children__5033__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
om.dom.colgroup = function() {
  var colgroup__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var colgroup = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return colgroup__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 1;
  colgroup.cljs$lang$applyTo = function(arglist__8256) {
    var opts__5032__auto__ = cljs.core.first(arglist__8256);
    var children__5033__auto__ = cljs.core.rest(arglist__8256);
    return colgroup__delegate(opts__5032__auto__, children__5033__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
om.dom.data = function() {
  var data__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var data = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return data__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  data.cljs$lang$maxFixedArity = 1;
  data.cljs$lang$applyTo = function(arglist__8257) {
    var opts__5032__auto__ = cljs.core.first(arglist__8257);
    var children__5033__auto__ = cljs.core.rest(arglist__8257);
    return data__delegate(opts__5032__auto__, children__5033__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
om.dom.datalist = function() {
  var datalist__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var datalist = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return datalist__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 1;
  datalist.cljs$lang$applyTo = function(arglist__8258) {
    var opts__5032__auto__ = cljs.core.first(arglist__8258);
    var children__5033__auto__ = cljs.core.rest(arglist__8258);
    return datalist__delegate(opts__5032__auto__, children__5033__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
om.dom.dd = function() {
  var dd__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var dd = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dd__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  dd.cljs$lang$maxFixedArity = 1;
  dd.cljs$lang$applyTo = function(arglist__8259) {
    var opts__5032__auto__ = cljs.core.first(arglist__8259);
    var children__5033__auto__ = cljs.core.rest(arglist__8259);
    return dd__delegate(opts__5032__auto__, children__5033__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
om.dom.del = function() {
  var del__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var del = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return del__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  del.cljs$lang$maxFixedArity = 1;
  del.cljs$lang$applyTo = function(arglist__8260) {
    var opts__5032__auto__ = cljs.core.first(arglist__8260);
    var children__5033__auto__ = cljs.core.rest(arglist__8260);
    return del__delegate(opts__5032__auto__, children__5033__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
om.dom.dfn = function() {
  var dfn__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var dfn = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dfn__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 1;
  dfn.cljs$lang$applyTo = function(arglist__8261) {
    var opts__5032__auto__ = cljs.core.first(arglist__8261);
    var children__5033__auto__ = cljs.core.rest(arglist__8261);
    return dfn__delegate(opts__5032__auto__, children__5033__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
om.dom.div = function() {
  var div__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var div = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return div__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  div.cljs$lang$maxFixedArity = 1;
  div.cljs$lang$applyTo = function(arglist__8262) {
    var opts__5032__auto__ = cljs.core.first(arglist__8262);
    var children__5033__auto__ = cljs.core.rest(arglist__8262);
    return div__delegate(opts__5032__auto__, children__5033__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
om.dom.dl = function() {
  var dl__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var dl = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dl__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  dl.cljs$lang$maxFixedArity = 1;
  dl.cljs$lang$applyTo = function(arglist__8263) {
    var opts__5032__auto__ = cljs.core.first(arglist__8263);
    var children__5033__auto__ = cljs.core.rest(arglist__8263);
    return dl__delegate(opts__5032__auto__, children__5033__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
om.dom.dt = function() {
  var dt__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var dt = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dt__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  dt.cljs$lang$maxFixedArity = 1;
  dt.cljs$lang$applyTo = function(arglist__8264) {
    var opts__5032__auto__ = cljs.core.first(arglist__8264);
    var children__5033__auto__ = cljs.core.rest(arglist__8264);
    return dt__delegate(opts__5032__auto__, children__5033__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
om.dom.em = function() {
  var em__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var em = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return em__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  em.cljs$lang$maxFixedArity = 1;
  em.cljs$lang$applyTo = function(arglist__8265) {
    var opts__5032__auto__ = cljs.core.first(arglist__8265);
    var children__5033__auto__ = cljs.core.rest(arglist__8265);
    return em__delegate(opts__5032__auto__, children__5033__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
om.dom.embed = function() {
  var embed__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var embed = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return embed__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  embed.cljs$lang$maxFixedArity = 1;
  embed.cljs$lang$applyTo = function(arglist__8266) {
    var opts__5032__auto__ = cljs.core.first(arglist__8266);
    var children__5033__auto__ = cljs.core.rest(arglist__8266);
    return embed__delegate(opts__5032__auto__, children__5033__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
om.dom.fieldset = function() {
  var fieldset__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var fieldset = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fieldset__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 1;
  fieldset.cljs$lang$applyTo = function(arglist__8267) {
    var opts__5032__auto__ = cljs.core.first(arglist__8267);
    var children__5033__auto__ = cljs.core.rest(arglist__8267);
    return fieldset__delegate(opts__5032__auto__, children__5033__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
om.dom.figcaption = function() {
  var figcaption__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var figcaption = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figcaption__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 1;
  figcaption.cljs$lang$applyTo = function(arglist__8268) {
    var opts__5032__auto__ = cljs.core.first(arglist__8268);
    var children__5033__auto__ = cljs.core.rest(arglist__8268);
    return figcaption__delegate(opts__5032__auto__, children__5033__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
om.dom.figure = function() {
  var figure__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var figure = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figure__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  figure.cljs$lang$maxFixedArity = 1;
  figure.cljs$lang$applyTo = function(arglist__8269) {
    var opts__5032__auto__ = cljs.core.first(arglist__8269);
    var children__5033__auto__ = cljs.core.rest(arglist__8269);
    return figure__delegate(opts__5032__auto__, children__5033__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
om.dom.footer = function() {
  var footer__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var footer = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return footer__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  footer.cljs$lang$maxFixedArity = 1;
  footer.cljs$lang$applyTo = function(arglist__8270) {
    var opts__5032__auto__ = cljs.core.first(arglist__8270);
    var children__5033__auto__ = cljs.core.rest(arglist__8270);
    return footer__delegate(opts__5032__auto__, children__5033__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
om.dom.form = function() {
  var form__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var form = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return form__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  form.cljs$lang$maxFixedArity = 1;
  form.cljs$lang$applyTo = function(arglist__8271) {
    var opts__5032__auto__ = cljs.core.first(arglist__8271);
    var children__5033__auto__ = cljs.core.rest(arglist__8271);
    return form__delegate(opts__5032__auto__, children__5033__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
om.dom.h1 = function() {
  var h1__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var h1 = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h1__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  h1.cljs$lang$maxFixedArity = 1;
  h1.cljs$lang$applyTo = function(arglist__8272) {
    var opts__5032__auto__ = cljs.core.first(arglist__8272);
    var children__5033__auto__ = cljs.core.rest(arglist__8272);
    return h1__delegate(opts__5032__auto__, children__5033__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
om.dom.h2 = function() {
  var h2__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var h2 = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h2__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  h2.cljs$lang$maxFixedArity = 1;
  h2.cljs$lang$applyTo = function(arglist__8273) {
    var opts__5032__auto__ = cljs.core.first(arglist__8273);
    var children__5033__auto__ = cljs.core.rest(arglist__8273);
    return h2__delegate(opts__5032__auto__, children__5033__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
om.dom.h3 = function() {
  var h3__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var h3 = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h3__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  h3.cljs$lang$maxFixedArity = 1;
  h3.cljs$lang$applyTo = function(arglist__8274) {
    var opts__5032__auto__ = cljs.core.first(arglist__8274);
    var children__5033__auto__ = cljs.core.rest(arglist__8274);
    return h3__delegate(opts__5032__auto__, children__5033__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
om.dom.h4 = function() {
  var h4__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var h4 = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h4__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  h4.cljs$lang$maxFixedArity = 1;
  h4.cljs$lang$applyTo = function(arglist__8275) {
    var opts__5032__auto__ = cljs.core.first(arglist__8275);
    var children__5033__auto__ = cljs.core.rest(arglist__8275);
    return h4__delegate(opts__5032__auto__, children__5033__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
om.dom.h5 = function() {
  var h5__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var h5 = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h5__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  h5.cljs$lang$maxFixedArity = 1;
  h5.cljs$lang$applyTo = function(arglist__8276) {
    var opts__5032__auto__ = cljs.core.first(arglist__8276);
    var children__5033__auto__ = cljs.core.rest(arglist__8276);
    return h5__delegate(opts__5032__auto__, children__5033__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
om.dom.h6 = function() {
  var h6__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var h6 = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h6__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  h6.cljs$lang$maxFixedArity = 1;
  h6.cljs$lang$applyTo = function(arglist__8277) {
    var opts__5032__auto__ = cljs.core.first(arglist__8277);
    var children__5033__auto__ = cljs.core.rest(arglist__8277);
    return h6__delegate(opts__5032__auto__, children__5033__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
om.dom.head = function() {
  var head__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var head = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return head__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  head.cljs$lang$maxFixedArity = 1;
  head.cljs$lang$applyTo = function(arglist__8278) {
    var opts__5032__auto__ = cljs.core.first(arglist__8278);
    var children__5033__auto__ = cljs.core.rest(arglist__8278);
    return head__delegate(opts__5032__auto__, children__5033__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
om.dom.header = function() {
  var header__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var header = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return header__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  header.cljs$lang$maxFixedArity = 1;
  header.cljs$lang$applyTo = function(arglist__8279) {
    var opts__5032__auto__ = cljs.core.first(arglist__8279);
    var children__5033__auto__ = cljs.core.rest(arglist__8279);
    return header__delegate(opts__5032__auto__, children__5033__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
om.dom.hr = function() {
  var hr__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var hr = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hr__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  hr.cljs$lang$maxFixedArity = 1;
  hr.cljs$lang$applyTo = function(arglist__8280) {
    var opts__5032__auto__ = cljs.core.first(arglist__8280);
    var children__5033__auto__ = cljs.core.rest(arglist__8280);
    return hr__delegate(opts__5032__auto__, children__5033__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
om.dom.html = function() {
  var html__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var html = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return html__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  html.cljs$lang$maxFixedArity = 1;
  html.cljs$lang$applyTo = function(arglist__8281) {
    var opts__5032__auto__ = cljs.core.first(arglist__8281);
    var children__5033__auto__ = cljs.core.rest(arglist__8281);
    return html__delegate(opts__5032__auto__, children__5033__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
om.dom.i = function() {
  var i__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var i = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return i__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  i.cljs$lang$maxFixedArity = 1;
  i.cljs$lang$applyTo = function(arglist__8282) {
    var opts__5032__auto__ = cljs.core.first(arglist__8282);
    var children__5033__auto__ = cljs.core.rest(arglist__8282);
    return i__delegate(opts__5032__auto__, children__5033__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
om.dom.iframe = function() {
  var iframe__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var iframe = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return iframe__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 1;
  iframe.cljs$lang$applyTo = function(arglist__8283) {
    var opts__5032__auto__ = cljs.core.first(arglist__8283);
    var children__5033__auto__ = cljs.core.rest(arglist__8283);
    return iframe__delegate(opts__5032__auto__, children__5033__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
om.dom.img = function() {
  var img__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var img = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return img__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  img.cljs$lang$maxFixedArity = 1;
  img.cljs$lang$applyTo = function(arglist__8284) {
    var opts__5032__auto__ = cljs.core.first(arglist__8284);
    var children__5033__auto__ = cljs.core.rest(arglist__8284);
    return img__delegate(opts__5032__auto__, children__5033__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
om.dom.ins = function() {
  var ins__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var ins = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ins__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  ins.cljs$lang$maxFixedArity = 1;
  ins.cljs$lang$applyTo = function(arglist__8285) {
    var opts__5032__auto__ = cljs.core.first(arglist__8285);
    var children__5033__auto__ = cljs.core.rest(arglist__8285);
    return ins__delegate(opts__5032__auto__, children__5033__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
om.dom.kbd = function() {
  var kbd__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var kbd = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return kbd__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 1;
  kbd.cljs$lang$applyTo = function(arglist__8286) {
    var opts__5032__auto__ = cljs.core.first(arglist__8286);
    var children__5033__auto__ = cljs.core.rest(arglist__8286);
    return kbd__delegate(opts__5032__auto__, children__5033__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
om.dom.keygen = function() {
  var keygen__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var keygen = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return keygen__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 1;
  keygen.cljs$lang$applyTo = function(arglist__8287) {
    var opts__5032__auto__ = cljs.core.first(arglist__8287);
    var children__5033__auto__ = cljs.core.rest(arglist__8287);
    return keygen__delegate(opts__5032__auto__, children__5033__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
om.dom.label = function() {
  var label__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var label = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return label__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  label.cljs$lang$maxFixedArity = 1;
  label.cljs$lang$applyTo = function(arglist__8288) {
    var opts__5032__auto__ = cljs.core.first(arglist__8288);
    var children__5033__auto__ = cljs.core.rest(arglist__8288);
    return label__delegate(opts__5032__auto__, children__5033__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
om.dom.legend = function() {
  var legend__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var legend = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return legend__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  legend.cljs$lang$maxFixedArity = 1;
  legend.cljs$lang$applyTo = function(arglist__8289) {
    var opts__5032__auto__ = cljs.core.first(arglist__8289);
    var children__5033__auto__ = cljs.core.rest(arglist__8289);
    return legend__delegate(opts__5032__auto__, children__5033__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
om.dom.li = function() {
  var li__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var li = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return li__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  li.cljs$lang$maxFixedArity = 1;
  li.cljs$lang$applyTo = function(arglist__8290) {
    var opts__5032__auto__ = cljs.core.first(arglist__8290);
    var children__5033__auto__ = cljs.core.rest(arglist__8290);
    return li__delegate(opts__5032__auto__, children__5033__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
om.dom.link = function() {
  var link__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var link = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return link__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  link.cljs$lang$maxFixedArity = 1;
  link.cljs$lang$applyTo = function(arglist__8291) {
    var opts__5032__auto__ = cljs.core.first(arglist__8291);
    var children__5033__auto__ = cljs.core.rest(arglist__8291);
    return link__delegate(opts__5032__auto__, children__5033__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
om.dom.main = function() {
  var main__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var main = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return main__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  main.cljs$lang$maxFixedArity = 1;
  main.cljs$lang$applyTo = function(arglist__8292) {
    var opts__5032__auto__ = cljs.core.first(arglist__8292);
    var children__5033__auto__ = cljs.core.rest(arglist__8292);
    return main__delegate(opts__5032__auto__, children__5033__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
om.dom.map = function() {
  var map__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var map = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return map__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  map.cljs$lang$maxFixedArity = 1;
  map.cljs$lang$applyTo = function(arglist__8293) {
    var opts__5032__auto__ = cljs.core.first(arglist__8293);
    var children__5033__auto__ = cljs.core.rest(arglist__8293);
    return map__delegate(opts__5032__auto__, children__5033__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
om.dom.mark = function() {
  var mark__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var mark = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return mark__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  mark.cljs$lang$maxFixedArity = 1;
  mark.cljs$lang$applyTo = function(arglist__8294) {
    var opts__5032__auto__ = cljs.core.first(arglist__8294);
    var children__5033__auto__ = cljs.core.rest(arglist__8294);
    return mark__delegate(opts__5032__auto__, children__5033__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
om.dom.menu = function() {
  var menu__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var menu = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menu__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  menu.cljs$lang$maxFixedArity = 1;
  menu.cljs$lang$applyTo = function(arglist__8295) {
    var opts__5032__auto__ = cljs.core.first(arglist__8295);
    var children__5033__auto__ = cljs.core.rest(arglist__8295);
    return menu__delegate(opts__5032__auto__, children__5033__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
om.dom.menuitem = function() {
  var menuitem__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var menuitem = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menuitem__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 1;
  menuitem.cljs$lang$applyTo = function(arglist__8296) {
    var opts__5032__auto__ = cljs.core.first(arglist__8296);
    var children__5033__auto__ = cljs.core.rest(arglist__8296);
    return menuitem__delegate(opts__5032__auto__, children__5033__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
om.dom.meta = function() {
  var meta__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var meta = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meta__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  meta.cljs$lang$maxFixedArity = 1;
  meta.cljs$lang$applyTo = function(arglist__8297) {
    var opts__5032__auto__ = cljs.core.first(arglist__8297);
    var children__5033__auto__ = cljs.core.rest(arglist__8297);
    return meta__delegate(opts__5032__auto__, children__5033__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
om.dom.meter = function() {
  var meter__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var meter = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meter__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  meter.cljs$lang$maxFixedArity = 1;
  meter.cljs$lang$applyTo = function(arglist__8298) {
    var opts__5032__auto__ = cljs.core.first(arglist__8298);
    var children__5033__auto__ = cljs.core.rest(arglist__8298);
    return meter__delegate(opts__5032__auto__, children__5033__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
om.dom.nav = function() {
  var nav__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var nav = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return nav__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  nav.cljs$lang$maxFixedArity = 1;
  nav.cljs$lang$applyTo = function(arglist__8299) {
    var opts__5032__auto__ = cljs.core.first(arglist__8299);
    var children__5033__auto__ = cljs.core.rest(arglist__8299);
    return nav__delegate(opts__5032__auto__, children__5033__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
om.dom.noscript = function() {
  var noscript__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var noscript = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return noscript__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 1;
  noscript.cljs$lang$applyTo = function(arglist__8300) {
    var opts__5032__auto__ = cljs.core.first(arglist__8300);
    var children__5033__auto__ = cljs.core.rest(arglist__8300);
    return noscript__delegate(opts__5032__auto__, children__5033__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
om.dom.object = function() {
  var object__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var object = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return object__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  object.cljs$lang$maxFixedArity = 1;
  object.cljs$lang$applyTo = function(arglist__8301) {
    var opts__5032__auto__ = cljs.core.first(arglist__8301);
    var children__5033__auto__ = cljs.core.rest(arglist__8301);
    return object__delegate(opts__5032__auto__, children__5033__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
om.dom.ol = function() {
  var ol__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var ol = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ol__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  ol.cljs$lang$maxFixedArity = 1;
  ol.cljs$lang$applyTo = function(arglist__8302) {
    var opts__5032__auto__ = cljs.core.first(arglist__8302);
    var children__5033__auto__ = cljs.core.rest(arglist__8302);
    return ol__delegate(opts__5032__auto__, children__5033__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
om.dom.optgroup = function() {
  var optgroup__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var optgroup = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return optgroup__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 1;
  optgroup.cljs$lang$applyTo = function(arglist__8303) {
    var opts__5032__auto__ = cljs.core.first(arglist__8303);
    var children__5033__auto__ = cljs.core.rest(arglist__8303);
    return optgroup__delegate(opts__5032__auto__, children__5033__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
om.dom.output = function() {
  var output__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var output = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return output__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  output.cljs$lang$maxFixedArity = 1;
  output.cljs$lang$applyTo = function(arglist__8304) {
    var opts__5032__auto__ = cljs.core.first(arglist__8304);
    var children__5033__auto__ = cljs.core.rest(arglist__8304);
    return output__delegate(opts__5032__auto__, children__5033__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
om.dom.p = function() {
  var p__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var p = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return p__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  p.cljs$lang$maxFixedArity = 1;
  p.cljs$lang$applyTo = function(arglist__8305) {
    var opts__5032__auto__ = cljs.core.first(arglist__8305);
    var children__5033__auto__ = cljs.core.rest(arglist__8305);
    return p__delegate(opts__5032__auto__, children__5033__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
om.dom.param = function() {
  var param__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var param = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return param__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  param.cljs$lang$maxFixedArity = 1;
  param.cljs$lang$applyTo = function(arglist__8306) {
    var opts__5032__auto__ = cljs.core.first(arglist__8306);
    var children__5033__auto__ = cljs.core.rest(arglist__8306);
    return param__delegate(opts__5032__auto__, children__5033__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
om.dom.pre = function() {
  var pre__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var pre = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return pre__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  pre.cljs$lang$maxFixedArity = 1;
  pre.cljs$lang$applyTo = function(arglist__8307) {
    var opts__5032__auto__ = cljs.core.first(arglist__8307);
    var children__5033__auto__ = cljs.core.rest(arglist__8307);
    return pre__delegate(opts__5032__auto__, children__5033__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
om.dom.progress = function() {
  var progress__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var progress = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return progress__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  progress.cljs$lang$maxFixedArity = 1;
  progress.cljs$lang$applyTo = function(arglist__8308) {
    var opts__5032__auto__ = cljs.core.first(arglist__8308);
    var children__5033__auto__ = cljs.core.rest(arglist__8308);
    return progress__delegate(opts__5032__auto__, children__5033__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
om.dom.q = function() {
  var q__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var q = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return q__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__8309) {
    var opts__5032__auto__ = cljs.core.first(arglist__8309);
    var children__5033__auto__ = cljs.core.rest(arglist__8309);
    return q__delegate(opts__5032__auto__, children__5033__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
om.dom.rp = function() {
  var rp__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var rp = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rp__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  rp.cljs$lang$maxFixedArity = 1;
  rp.cljs$lang$applyTo = function(arglist__8310) {
    var opts__5032__auto__ = cljs.core.first(arglist__8310);
    var children__5033__auto__ = cljs.core.rest(arglist__8310);
    return rp__delegate(opts__5032__auto__, children__5033__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
om.dom.rt = function() {
  var rt__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var rt = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rt__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  rt.cljs$lang$maxFixedArity = 1;
  rt.cljs$lang$applyTo = function(arglist__8311) {
    var opts__5032__auto__ = cljs.core.first(arglist__8311);
    var children__5033__auto__ = cljs.core.rest(arglist__8311);
    return rt__delegate(opts__5032__auto__, children__5033__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
om.dom.ruby = function() {
  var ruby__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var ruby = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ruby__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 1;
  ruby.cljs$lang$applyTo = function(arglist__8312) {
    var opts__5032__auto__ = cljs.core.first(arglist__8312);
    var children__5033__auto__ = cljs.core.rest(arglist__8312);
    return ruby__delegate(opts__5032__auto__, children__5033__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
om.dom.s = function() {
  var s__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var s = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return s__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  s.cljs$lang$maxFixedArity = 1;
  s.cljs$lang$applyTo = function(arglist__8313) {
    var opts__5032__auto__ = cljs.core.first(arglist__8313);
    var children__5033__auto__ = cljs.core.rest(arglist__8313);
    return s__delegate(opts__5032__auto__, children__5033__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
om.dom.samp = function() {
  var samp__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var samp = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return samp__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  samp.cljs$lang$maxFixedArity = 1;
  samp.cljs$lang$applyTo = function(arglist__8314) {
    var opts__5032__auto__ = cljs.core.first(arglist__8314);
    var children__5033__auto__ = cljs.core.rest(arglist__8314);
    return samp__delegate(opts__5032__auto__, children__5033__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
om.dom.script = function() {
  var script__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var script = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return script__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  script.cljs$lang$maxFixedArity = 1;
  script.cljs$lang$applyTo = function(arglist__8315) {
    var opts__5032__auto__ = cljs.core.first(arglist__8315);
    var children__5033__auto__ = cljs.core.rest(arglist__8315);
    return script__delegate(opts__5032__auto__, children__5033__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
om.dom.section = function() {
  var section__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var section = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return section__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  section.cljs$lang$maxFixedArity = 1;
  section.cljs$lang$applyTo = function(arglist__8316) {
    var opts__5032__auto__ = cljs.core.first(arglist__8316);
    var children__5033__auto__ = cljs.core.rest(arglist__8316);
    return section__delegate(opts__5032__auto__, children__5033__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
om.dom.select = function() {
  var select__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var select = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return select__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  select.cljs$lang$maxFixedArity = 1;
  select.cljs$lang$applyTo = function(arglist__8317) {
    var opts__5032__auto__ = cljs.core.first(arglist__8317);
    var children__5033__auto__ = cljs.core.rest(arglist__8317);
    return select__delegate(opts__5032__auto__, children__5033__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
om.dom.small = function() {
  var small__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var small = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return small__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  small.cljs$lang$maxFixedArity = 1;
  small.cljs$lang$applyTo = function(arglist__8318) {
    var opts__5032__auto__ = cljs.core.first(arglist__8318);
    var children__5033__auto__ = cljs.core.rest(arglist__8318);
    return small__delegate(opts__5032__auto__, children__5033__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
om.dom.source = function() {
  var source__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var source = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return source__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  source.cljs$lang$maxFixedArity = 1;
  source.cljs$lang$applyTo = function(arglist__8319) {
    var opts__5032__auto__ = cljs.core.first(arglist__8319);
    var children__5033__auto__ = cljs.core.rest(arglist__8319);
    return source__delegate(opts__5032__auto__, children__5033__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
om.dom.span = function() {
  var span__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var span = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return span__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  span.cljs$lang$maxFixedArity = 1;
  span.cljs$lang$applyTo = function(arglist__8320) {
    var opts__5032__auto__ = cljs.core.first(arglist__8320);
    var children__5033__auto__ = cljs.core.rest(arglist__8320);
    return span__delegate(opts__5032__auto__, children__5033__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
om.dom.strong = function() {
  var strong__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var strong = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return strong__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  strong.cljs$lang$maxFixedArity = 1;
  strong.cljs$lang$applyTo = function(arglist__8321) {
    var opts__5032__auto__ = cljs.core.first(arglist__8321);
    var children__5033__auto__ = cljs.core.rest(arglist__8321);
    return strong__delegate(opts__5032__auto__, children__5033__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
om.dom.style = function() {
  var style__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var style = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return style__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  style.cljs$lang$maxFixedArity = 1;
  style.cljs$lang$applyTo = function(arglist__8322) {
    var opts__5032__auto__ = cljs.core.first(arglist__8322);
    var children__5033__auto__ = cljs.core.rest(arglist__8322);
    return style__delegate(opts__5032__auto__, children__5033__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
om.dom.sub = function() {
  var sub__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var sub = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sub__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  sub.cljs$lang$maxFixedArity = 1;
  sub.cljs$lang$applyTo = function(arglist__8323) {
    var opts__5032__auto__ = cljs.core.first(arglist__8323);
    var children__5033__auto__ = cljs.core.rest(arglist__8323);
    return sub__delegate(opts__5032__auto__, children__5033__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
om.dom.summary = function() {
  var summary__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var summary = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return summary__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  summary.cljs$lang$maxFixedArity = 1;
  summary.cljs$lang$applyTo = function(arglist__8324) {
    var opts__5032__auto__ = cljs.core.first(arglist__8324);
    var children__5033__auto__ = cljs.core.rest(arglist__8324);
    return summary__delegate(opts__5032__auto__, children__5033__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
om.dom.sup = function() {
  var sup__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var sup = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sup__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  sup.cljs$lang$maxFixedArity = 1;
  sup.cljs$lang$applyTo = function(arglist__8325) {
    var opts__5032__auto__ = cljs.core.first(arglist__8325);
    var children__5033__auto__ = cljs.core.rest(arglist__8325);
    return sup__delegate(opts__5032__auto__, children__5033__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
om.dom.table = function() {
  var table__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var table = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return table__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  table.cljs$lang$maxFixedArity = 1;
  table.cljs$lang$applyTo = function(arglist__8326) {
    var opts__5032__auto__ = cljs.core.first(arglist__8326);
    var children__5033__auto__ = cljs.core.rest(arglist__8326);
    return table__delegate(opts__5032__auto__, children__5033__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
om.dom.tbody = function() {
  var tbody__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var tbody = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tbody__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 1;
  tbody.cljs$lang$applyTo = function(arglist__8327) {
    var opts__5032__auto__ = cljs.core.first(arglist__8327);
    var children__5033__auto__ = cljs.core.rest(arglist__8327);
    return tbody__delegate(opts__5032__auto__, children__5033__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
om.dom.td = function() {
  var td__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var td = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return td__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  td.cljs$lang$maxFixedArity = 1;
  td.cljs$lang$applyTo = function(arglist__8328) {
    var opts__5032__auto__ = cljs.core.first(arglist__8328);
    var children__5033__auto__ = cljs.core.rest(arglist__8328);
    return td__delegate(opts__5032__auto__, children__5033__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
om.dom.tfoot = function() {
  var tfoot__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var tfoot = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tfoot__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 1;
  tfoot.cljs$lang$applyTo = function(arglist__8329) {
    var opts__5032__auto__ = cljs.core.first(arglist__8329);
    var children__5033__auto__ = cljs.core.rest(arglist__8329);
    return tfoot__delegate(opts__5032__auto__, children__5033__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
om.dom.th = function() {
  var th__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var th = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return th__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  th.cljs$lang$maxFixedArity = 1;
  th.cljs$lang$applyTo = function(arglist__8330) {
    var opts__5032__auto__ = cljs.core.first(arglist__8330);
    var children__5033__auto__ = cljs.core.rest(arglist__8330);
    return th__delegate(opts__5032__auto__, children__5033__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
om.dom.thead = function() {
  var thead__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var thead = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return thead__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  thead.cljs$lang$maxFixedArity = 1;
  thead.cljs$lang$applyTo = function(arglist__8331) {
    var opts__5032__auto__ = cljs.core.first(arglist__8331);
    var children__5033__auto__ = cljs.core.rest(arglist__8331);
    return thead__delegate(opts__5032__auto__, children__5033__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
om.dom.time = function() {
  var time__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var time = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return time__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  time.cljs$lang$maxFixedArity = 1;
  time.cljs$lang$applyTo = function(arglist__8332) {
    var opts__5032__auto__ = cljs.core.first(arglist__8332);
    var children__5033__auto__ = cljs.core.rest(arglist__8332);
    return time__delegate(opts__5032__auto__, children__5033__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
om.dom.title = function() {
  var title__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var title = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return title__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  title.cljs$lang$maxFixedArity = 1;
  title.cljs$lang$applyTo = function(arglist__8333) {
    var opts__5032__auto__ = cljs.core.first(arglist__8333);
    var children__5033__auto__ = cljs.core.rest(arglist__8333);
    return title__delegate(opts__5032__auto__, children__5033__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
om.dom.tr = function() {
  var tr__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var tr = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tr__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  tr.cljs$lang$maxFixedArity = 1;
  tr.cljs$lang$applyTo = function(arglist__8334) {
    var opts__5032__auto__ = cljs.core.first(arglist__8334);
    var children__5033__auto__ = cljs.core.rest(arglist__8334);
    return tr__delegate(opts__5032__auto__, children__5033__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
om.dom.track = function() {
  var track__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var track = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return track__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  track.cljs$lang$maxFixedArity = 1;
  track.cljs$lang$applyTo = function(arglist__8335) {
    var opts__5032__auto__ = cljs.core.first(arglist__8335);
    var children__5033__auto__ = cljs.core.rest(arglist__8335);
    return track__delegate(opts__5032__auto__, children__5033__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
om.dom.u = function() {
  var u__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var u = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return u__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  u.cljs$lang$maxFixedArity = 1;
  u.cljs$lang$applyTo = function(arglist__8336) {
    var opts__5032__auto__ = cljs.core.first(arglist__8336);
    var children__5033__auto__ = cljs.core.rest(arglist__8336);
    return u__delegate(opts__5032__auto__, children__5033__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
om.dom.ul = function() {
  var ul__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var ul = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ul__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  ul.cljs$lang$maxFixedArity = 1;
  ul.cljs$lang$applyTo = function(arglist__8337) {
    var opts__5032__auto__ = cljs.core.first(arglist__8337);
    var children__5033__auto__ = cljs.core.rest(arglist__8337);
    return ul__delegate(opts__5032__auto__, children__5033__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
om.dom.var$ = function() {
  var var$__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var var$ = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return var$__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  var$.cljs$lang$maxFixedArity = 1;
  var$.cljs$lang$applyTo = function(arglist__8338) {
    var opts__5032__auto__ = cljs.core.first(arglist__8338);
    var children__5033__auto__ = cljs.core.rest(arglist__8338);
    return var$__delegate(opts__5032__auto__, children__5033__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
om.dom.video = function() {
  var video__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var video = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return video__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  video.cljs$lang$maxFixedArity = 1;
  video.cljs$lang$applyTo = function(arglist__8339) {
    var opts__5032__auto__ = cljs.core.first(arglist__8339);
    var children__5033__auto__ = cljs.core.rest(arglist__8339);
    return video__delegate(opts__5032__auto__, children__5033__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
om.dom.wbr = function() {
  var wbr__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var wbr = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return wbr__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 1;
  wbr.cljs$lang$applyTo = function(arglist__8340) {
    var opts__5032__auto__ = cljs.core.first(arglist__8340);
    var children__5033__auto__ = cljs.core.rest(arglist__8340);
    return wbr__delegate(opts__5032__auto__, children__5033__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
om.dom.circle = function() {
  var circle__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var circle = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return circle__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  circle.cljs$lang$maxFixedArity = 1;
  circle.cljs$lang$applyTo = function(arglist__8341) {
    var opts__5032__auto__ = cljs.core.first(arglist__8341);
    var children__5033__auto__ = cljs.core.rest(arglist__8341);
    return circle__delegate(opts__5032__auto__, children__5033__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
om.dom.g = function() {
  var g__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var g = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return g__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  g.cljs$lang$maxFixedArity = 1;
  g.cljs$lang$applyTo = function(arglist__8342) {
    var opts__5032__auto__ = cljs.core.first(arglist__8342);
    var children__5033__auto__ = cljs.core.rest(arglist__8342);
    return g__delegate(opts__5032__auto__, children__5033__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
om.dom.line = function() {
  var line__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var line = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return line__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  line.cljs$lang$maxFixedArity = 1;
  line.cljs$lang$applyTo = function(arglist__8343) {
    var opts__5032__auto__ = cljs.core.first(arglist__8343);
    var children__5033__auto__ = cljs.core.rest(arglist__8343);
    return line__delegate(opts__5032__auto__, children__5033__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
om.dom.path = function() {
  var path__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var path = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return path__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  path.cljs$lang$maxFixedArity = 1;
  path.cljs$lang$applyTo = function(arglist__8344) {
    var opts__5032__auto__ = cljs.core.first(arglist__8344);
    var children__5033__auto__ = cljs.core.rest(arglist__8344);
    return path__delegate(opts__5032__auto__, children__5033__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
om.dom.polyline = function() {
  var polyline__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var polyline = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return polyline__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 1;
  polyline.cljs$lang$applyTo = function(arglist__8345) {
    var opts__5032__auto__ = cljs.core.first(arglist__8345);
    var children__5033__auto__ = cljs.core.rest(arglist__8345);
    return polyline__delegate(opts__5032__auto__, children__5033__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
om.dom.rect = function() {
  var rect__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var rect = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rect__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  rect.cljs$lang$maxFixedArity = 1;
  rect.cljs$lang$applyTo = function(arglist__8346) {
    var opts__5032__auto__ = cljs.core.first(arglist__8346);
    var children__5033__auto__ = cljs.core.rest(arglist__8346);
    return rect__delegate(opts__5032__auto__, children__5033__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
om.dom.svg = function() {
  var svg__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var svg = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return svg__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  svg.cljs$lang$maxFixedArity = 1;
  svg.cljs$lang$applyTo = function(arglist__8347) {
    var opts__5032__auto__ = cljs.core.first(arglist__8347);
    var children__5033__auto__ = cljs.core.rest(arglist__8347);
    return svg__delegate(opts__5032__auto__, children__5033__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
om.dom.text = function() {
  var text__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var text = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return text__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  text.cljs$lang$maxFixedArity = 1;
  text.cljs$lang$applyTo = function(arglist__8348) {
    var opts__5032__auto__ = cljs.core.first(arglist__8348);
    var children__5033__auto__ = cljs.core.rest(arglist__8348);
    return text__delegate(opts__5032__auto__, children__5033__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
om.dom.defs = function() {
  var defs__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var defs = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return defs__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  defs.cljs$lang$maxFixedArity = 1;
  defs.cljs$lang$applyTo = function(arglist__8349) {
    var opts__5032__auto__ = cljs.core.first(arglist__8349);
    var children__5033__auto__ = cljs.core.rest(arglist__8349);
    return defs__delegate(opts__5032__auto__, children__5033__auto__);
  };
  defs.cljs$core$IFn$_invoke$arity$variadic = defs__delegate;
  return defs;
}();
om.dom.linearGradient = function() {
  var linearGradient__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var linearGradient = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return linearGradient__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  linearGradient.cljs$lang$maxFixedArity = 1;
  linearGradient.cljs$lang$applyTo = function(arglist__8350) {
    var opts__5032__auto__ = cljs.core.first(arglist__8350);
    var children__5033__auto__ = cljs.core.rest(arglist__8350);
    return linearGradient__delegate(opts__5032__auto__, children__5033__auto__);
  };
  linearGradient.cljs$core$IFn$_invoke$arity$variadic = linearGradient__delegate;
  return linearGradient;
}();
om.dom.polygon = function() {
  var polygon__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var polygon = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return polygon__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 1;
  polygon.cljs$lang$applyTo = function(arglist__8351) {
    var opts__5032__auto__ = cljs.core.first(arglist__8351);
    var children__5033__auto__ = cljs.core.rest(arglist__8351);
    return polygon__delegate(opts__5032__auto__, children__5033__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
om.dom.radialGradient = function() {
  var radialGradient__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var radialGradient = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return radialGradient__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  radialGradient.cljs$lang$maxFixedArity = 1;
  radialGradient.cljs$lang$applyTo = function(arglist__8352) {
    var opts__5032__auto__ = cljs.core.first(arglist__8352);
    var children__5033__auto__ = cljs.core.rest(arglist__8352);
    return radialGradient__delegate(opts__5032__auto__, children__5033__auto__);
  };
  radialGradient.cljs$core$IFn$_invoke$arity$variadic = radialGradient__delegate;
  return radialGradient;
}();
om.dom.stop = function() {
  var stop__delegate = function(opts__5032__auto__, children__5033__auto__) {
    return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5032__auto__, children__5033__auto__)));
  };
  var stop = function(opts__5032__auto__, var_args) {
    var children__5033__auto__ = null;
    if (arguments.length > 1) {
      children__5033__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return stop__delegate.call(this, opts__5032__auto__, children__5033__auto__);
  };
  stop.cljs$lang$maxFixedArity = 1;
  stop.cljs$lang$applyTo = function(arglist__8353) {
    var opts__5032__auto__ = cljs.core.first(arglist__8353);
    var children__5033__auto__ = cljs.core.rest(arglist__8353);
    return stop__delegate(opts__5032__auto__, children__5033__auto__);
  };
  stop.cljs$core$IFn$_invoke$arity$variadic = stop__delegate;
  return stop;
}();
om.dom.wrap_form_element = function wrap_form_element(ctor, display_name) {
  return React.createClass({"render":function() {
    var this$ = this;
    return this$.transferPropsTo(ctor.call(null, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]}));
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }, "getDisplayName":function() {
    return display_name;
  }});
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.render = function render(component, el) {
  return React.renderComponent(component, el);
};
om.dom.render_to_str = function render_to_str(c) {
  return React.renderComponentToString(c);
};
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ":" + (this.nextId_++).toString(36);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("goog.ui.IdGenerator");
goog.require("om.dom");
goog.require("om.dom");
om.core._STAR_read_enabled_STAR_ = false;
om.core._STAR_parent_STAR_ = null;
om.core._STAR_instrument_STAR_ = null;
om.core._STAR_state_STAR_ = null;
om.core.IDisplayName = function() {
  var obj8007 = {};
  return obj8007;
}();
om.core.display_name = function display_name(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IDisplayName$display_name$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IDisplayName$display_name$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.display_name[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.display_name["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisplayName.display-name", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IInitState = function() {
  var obj8009 = {};
  return obj8009;
}();
om.core.init_state = function init_state(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.init_state[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.init_state["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj8011 = {};
  return obj8011;
}();
om.core.should_update = function should_update(this$, next_props, next_state) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.should_update[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.should_update["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj8013 = {};
  return obj8013;
}();
om.core.will_mount = function will_mount(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.will_mount[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.will_mount["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj8015 = {};
  return obj8015;
}();
om.core.did_mount = function did_mount(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.did_mount[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.did_mount["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj8017 = {};
  return obj8017;
}();
om.core.will_unmount = function will_unmount(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.will_unmount[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.will_unmount["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj8019 = {};
  return obj8019;
}();
om.core.will_update = function will_update(this$, next_props, next_state) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.will_update[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.will_update["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj8021 = {};
  return obj8021;
}();
om.core.did_update = function did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.did_update[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.did_update["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IWillReceiveProps = function() {
  var obj8023 = {};
  return obj8023;
}();
om.core.will_receive_props = function will_receive_props(this$, next_props) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IWillReceiveProps$will_receive_props$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IWillReceiveProps$will_receive_props$arity$2(this$, next_props);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.will_receive_props[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.will_receive_props["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillReceiveProps.will-receive-props", this$);
        }
      }
    }().call(null, this$, next_props);
  }
};
om.core.IRender = function() {
  var obj8025 = {};
  return obj8025;
}();
om.core.render = function render(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.render[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.render["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderState = function() {
  var obj8027 = {};
  return obj8027;
}();
om.core.render_state = function render_state(this$, state) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.render_state[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.render_state["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.IOmSwap = function() {
  var obj8029 = {};
  return obj8029;
}();
om.core._om_swap_BANG_ = function _om_swap_BANG_(this$, cursor, korks, f, tag) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5(this$, cursor, korks, f, tag);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core._om_swap_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._om_swap_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmSwap.-om-swap!", this$);
        }
      }
    }().call(null, this$, cursor, korks, f, tag);
  }
};
om.core.IGetState = function() {
  var obj8031 = {};
  return obj8031;
}();
om.core._get_state = function() {
  var _get_state = null;
  var _get_state__1 = function(this$) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$IGetState$_get_state$arity$1;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$1(this$);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._get_state[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._get_state["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_state__2 = function(this$, ks) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$IGetState$_get_state$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$2(this$, ks);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._get_state[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._get_state["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_state__1.call(this, this$);
      case 2:
        return _get_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_state.cljs$core$IFn$_invoke$arity$1 = _get_state__1;
  _get_state.cljs$core$IFn$_invoke$arity$2 = _get_state__2;
  return _get_state;
}();
om.core.IGetRenderState = function() {
  var obj8033 = {};
  return obj8033;
}();
om.core._get_render_state = function() {
  var _get_render_state = null;
  var _get_render_state__1 = function(this$) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$1;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$1(this$);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._get_render_state[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._get_render_state["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_render_state__2 = function(this$, ks) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$2(this$, ks);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._get_render_state[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._get_render_state["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_render_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_render_state__1.call(this, this$);
      case 2:
        return _get_render_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_render_state.cljs$core$IFn$_invoke$arity$1 = _get_render_state__1;
  _get_render_state.cljs$core$IFn$_invoke$arity$2 = _get_render_state__2;
  return _get_render_state;
}();
om.core.ISetState = function() {
  var obj8035 = {};
  return obj8035;
}();
om.core._set_state_BANG_ = function() {
  var _set_state_BANG_ = null;
  var _set_state_BANG___2 = function(this$, val) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$2(this$, val);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, val);
    }
  };
  var _set_state_BANG___3 = function(this$, ks, val) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$3(this$, ks, val);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, ks, val);
    }
  };
  _set_state_BANG_ = function(this$, ks, val) {
    switch(arguments.length) {
      case 2:
        return _set_state_BANG___2.call(this, this$, ks);
      case 3:
        return _set_state_BANG___3.call(this, this$, ks, val);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = _set_state_BANG___2;
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = _set_state_BANG___3;
  return _set_state_BANG_;
}();
om.core.IRenderQueue = function() {
  var obj8037 = {};
  return obj8037;
}();
om.core._get_queue = function _get_queue(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRenderQueue$_get_queue$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_get_queue$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core._get_queue[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._get_queue["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-get-queue", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._queue_render_BANG_ = function _queue_render_BANG_(this$, c) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2(this$, c);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core._queue_render_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._queue_render_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-queue-render!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._empty_queue_BANG_ = function _empty_queue_BANG_(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core._empty_queue_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._empty_queue_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-empty-queue!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IValue = function() {
  var obj8039 = {};
  return obj8039;
}();
om.core._value = function _value(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = om.core._value[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._value["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj8041 = {};
  return obj8041;
}();
om.core._path = function _path(cursor) {
  if (function() {
    var and__3467__auto__ = cursor;
    if (and__3467__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4106__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3479__auto__ = om.core._path[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._path["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function _state(cursor) {
  if (function() {
    var and__3467__auto__ = cursor;
    if (and__3467__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4106__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3479__auto__ = om.core._state[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._state["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj8043 = {};
  return obj8043;
}();
om.core._to_cursor = function() {
  var _to_cursor = null;
  var _to_cursor__2 = function(value, state) {
    if (function() {
      var and__3467__auto__ = value;
      if (and__3467__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
    } else {
      var x__4106__auto__ = value == null ? null : value;
      return function() {
        var or__3479__auto__ = om.core._to_cursor[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._to_cursor["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state);
    }
  };
  var _to_cursor__3 = function(value, state, path) {
    if (function() {
      var and__3467__auto__ = value;
      if (and__3467__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
    } else {
      var x__4106__auto__ = value == null ? null : value;
      return function() {
        var or__3479__auto__ = om.core._to_cursor[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._to_cursor["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path);
    }
  };
  _to_cursor = function(value, state, path) {
    switch(arguments.length) {
      case 2:
        return _to_cursor__2.call(this, value, state);
      case 3:
        return _to_cursor__3.call(this, value, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _to_cursor.cljs$core$IFn$_invoke$arity$2 = _to_cursor__2;
  _to_cursor.cljs$core$IFn$_invoke$arity$3 = _to_cursor__3;
  return _to_cursor;
}();
om.core.ICursorDerive = function() {
  var obj8045 = {};
  return obj8045;
}();
om.core._derive = function _derive(cursor, derived, state, path) {
  if (function() {
    var and__3467__auto__ = cursor;
    if (and__3467__auto__) {
      return cursor.om$core$ICursorDerive$_derive$arity$4;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cursor.om$core$ICursorDerive$_derive$arity$4(cursor, derived, state, path);
  } else {
    var x__4106__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3479__auto__ = om.core._derive[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._derive["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursorDerive.-derive", cursor);
        }
      }
    }().call(null, cursor, derived, state, path);
  }
};
om.core.ICursorDerive["_"] = true;
om.core._derive["_"] = function(this$, derived, state, path) {
  return om.core.to_cursor.call(null, derived, state, path);
};
om.core.path = function path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.state = function state(cursor) {
  return om.core._state.call(null, cursor);
};
om.core.ITransact = function() {
  var obj8047 = {};
  return obj8047;
}();
om.core._transact_BANG_ = function _transact_BANG_(cursor, korks, f, tag) {
  if (function() {
    var and__3467__auto__ = cursor;
    if (and__3467__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$4;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$4(cursor, korks, f, tag);
  } else {
    var x__4106__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3479__auto__ = om.core._transact_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._transact_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f, tag);
  }
};
om.core.INotify = function() {
  var obj8049 = {};
  return obj8049;
}();
om.core._listen_BANG_ = function _listen_BANG_(x, key, tx_listen) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.om$core$INotify$_listen_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.om$core$INotify$_listen_BANG_$arity$3(x, key, tx_listen);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = om.core._listen_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._listen_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-listen!", x);
        }
      }
    }().call(null, x, key, tx_listen);
  }
};
om.core._unlisten_BANG_ = function _unlisten_BANG_(x, key) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.om$core$INotify$_unlisten_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.om$core$INotify$_unlisten_BANG_$arity$2(x, key);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = om.core._unlisten_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._unlisten_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-unlisten!", x);
        }
      }
    }().call(null, x, key);
  }
};
om.core._notify_BANG_ = function _notify_BANG_(x, tx_data, root_cursor) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.om$core$INotify$_notify_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify_BANG_$arity$3(x, tx_data, root_cursor);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = om.core._notify_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._notify_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify!", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.transact_STAR_ = function transact_STAR_(state, cursor, korks, f, tag) {
  var old_state = cljs.core.deref.call(null, state);
  var path = cljs.core.into.call(null, om.core.path.call(null, cursor), korks);
  var ret = function() {
    var G__8051 = state;
    if (G__8051) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8051.om$core$IOmSwap$;
        }
      }())) {
        return true;
      } else {
        if (!G__8051.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__8051);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__8051);
    }
  }() ? om.core._om_swap_BANG_.call(null, state, cursor, korks, f, tag) : cljs.core.empty_QMARK_.call(null, path) ? cljs.core.swap_BANG_.call(null, state, f) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f) : null;
  if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "defer", "om.core/defer", 3145885106))) {
    return null;
  } else {
    var tx_data = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", 1017337751), path, new cljs.core.Keyword(null, "old-value", "old-value", 1451216317), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 3626601078), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1449001181), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 
    3624385942), cljs.core.deref.call(null, state)], null);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", 1014018828), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  }
};
om.core.cursor_QMARK_ = function cursor_QMARK_(x) {
  var G__8053 = x;
  if (G__8053) {
    var bit__4129__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3479__auto__ = bit__4129__auto__;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return G__8053.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__8053.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__8053);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__8053);
  }
};
om.core.children = function children(node) {
  var c = node.props.children;
  if (cljs.core.fn_QMARK_.call(null, c)) {
    return node.props.children = function() {
      var _STAR_read_enabled_STAR_8055 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        return c.call(null, node);
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8055;
      }
    }();
  } else {
    return c;
  }
};
om.core.get_props = function get_props(x) {
  return x.props["__om_cursor"];
};
om.core.get_state = function() {
  var get_state = null;
  var get_state__1 = function(owner) {
    return om.core._get_state.call(null, owner);
  };
  var get_state__2 = function(owner, korks) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_state.call(null, owner, ks);
  };
  get_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_state__1.call(this, owner);
      case 2:
        return get_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_state.cljs$core$IFn$_invoke$arity$1 = get_state__1;
  get_state.cljs$core$IFn$_invoke$arity$2 = get_state__2;
  return get_state;
}();
om.core.get_shared = function() {
  var get_shared = null;
  var get_shared__1 = function(owner) {
    if (owner == null) {
      return null;
    } else {
      return owner.props["__om_shared"];
    }
  };
  var get_shared__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_shared.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_shared.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_shared.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_shared = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_shared__1.call(this, owner);
      case 2:
        return get_shared__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_shared.cljs$core$IFn$_invoke$arity$1 = get_shared__1;
  get_shared.cljs$core$IFn$_invoke$arity$2 = get_shared__2;
  return get_shared;
}();
om.core.merge_pending_state = function merge_pending_state(owner) {
  var state = owner.state;
  var temp__4092__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var pending_state = temp__4092__auto__;
    var G__8057 = state;
    G__8057["__om_prev_state"] = state["__om_state"];
    G__8057["__om_state"] = pending_state;
    G__8057["__om_pending_state"] = null;
    return G__8057;
  } else {
    return null;
  }
};
om.core.merge_props_state = function() {
  var merge_props_state = null;
  var merge_props_state__1 = function(owner) {
    return merge_props_state.call(null, owner, null);
  };
  var merge_props_state__2 = function(owner, props) {
    var props__$1 = function() {
      var or__3479__auto__ = props;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return owner.props;
      }
    }();
    var temp__4092__auto__ = props__$1["__om_state"];
    if (cljs.core.truth_(temp__4092__auto__)) {
      var props_state = temp__4092__auto__;
      var state = owner.state;
      state["__om_pending_state"] = cljs.core.merge.call(null, function() {
        var or__3479__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return state["__om_state"];
        }
      }(), props_state);
      return props__$1["__om_state"] = null;
    } else {
      return null;
    }
  };
  merge_props_state = function(owner, props) {
    switch(arguments.length) {
      case 1:
        return merge_props_state__1.call(this, owner);
      case 2:
        return merge_props_state__2.call(this, owner, props);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge_props_state.cljs$core$IFn$_invoke$arity$1 = merge_props_state__1;
  merge_props_state.cljs$core$IFn$_invoke$arity$2 = merge_props_state__2;
  return merge_props_state;
}();
om.core.pure_methods = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 2086388618), new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", 4103164189), new cljs.core.Keyword(null, "render", "render", 4374279432), new cljs.core.Keyword(null, "componentWillReceiveProps", "componentWillReceiveProps", 2122862542), new cljs.core.Keyword(null, "getDisplayName", "getDisplayName", 2087784617), new cljs.core.Keyword(null, "componentWillUnmount", 
"componentWillUnmount", 4147620643), new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", 3257856604), new cljs.core.Keyword(null, "componentDidMount", "componentDidMount", 3877103209), new cljs.core.Keyword(null, "getInitialState", "getInitialState", 2219830677), new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 3193956709)], [function(next_props, next_state) {
  var this$ = this;
  var c_8085 = om.core.children.call(null, this$);
  if (function() {
    var G__8058 = c_8085;
    if (G__8058) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8058.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__8058.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__8058);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__8058);
    }
  }()) {
    var state_8086 = this$.state;
    var _STAR_read_enabled_STAR_8059_8087 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_update.call(null, c_8085, om.core.get_props.call(null, {"props":next_props}), om.core._get_state.call(null, this$));
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8059_8087;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__8060 = c;
    if (G__8060) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8060.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__8060.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__8060);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__8060);
    }
  }()) {
    var state_8088 = this$.state;
    var _STAR_read_enabled_STAR_8061_8089 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.did_update.call(null, c, om.core.get_props.call(null, {"props":prev_props}), function() {
        var or__3479__auto__ = state_8088["__om_prev_state"];
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return state_8088["__om_state"];
        }
      }());
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8061_8089;
    }
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var _STAR_read_enabled_STAR_8062 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    if (function() {
      var G__8063 = c;
      if (G__8063) {
        var bit__4129__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3479__auto__ = bit__4129__auto__;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return G__8063.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__8063.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__8063);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__8063);
      }
    }()) {
      var _STAR_parent_STAR_8064 = om.core._STAR_parent_STAR_;
      var _STAR_state_STAR_8065 = om.core._STAR_state_STAR_;
      var _STAR_instrument_STAR_8066 = om.core._STAR_instrument_STAR_;
      try {
        om.core._STAR_parent_STAR_ = this$;
        om.core._STAR_state_STAR_ = props["__om_app_state"];
        om.core._STAR_instrument_STAR_ = props["__om_instrument"];
        return om.core.render.call(null, c);
      } finally {
        om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_8066;
        om.core._STAR_state_STAR_ = _STAR_state_STAR_8065;
        om.core._STAR_parent_STAR_ = _STAR_parent_STAR_8064;
      }
    } else {
      if (function() {
        var G__8067 = c;
        if (G__8067) {
          var bit__4129__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3479__auto__ = bit__4129__auto__;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return G__8067.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__8067.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__8067);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__8067);
        }
      }()) {
        var _STAR_parent_STAR_8068 = om.core._STAR_parent_STAR_;
        var _STAR_state_STAR_8069 = om.core._STAR_state_STAR_;
        var _STAR_instrument_STAR_8070 = om.core._STAR_instrument_STAR_;
        try {
          om.core._STAR_parent_STAR_ = this$;
          om.core._STAR_state_STAR_ = props["__om_app_state"];
          om.core._STAR_instrument_STAR_ = props["__om_instrument"];
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } finally {
          om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_8070;
          om.core._STAR_state_STAR_ = _STAR_state_STAR_8069;
          om.core._STAR_parent_STAR_ = _STAR_parent_STAR_8068;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return c;
        } else {
          return null;
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8062;
  }
}, function(next_props) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__8071 = c;
    if (G__8071) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8071.om$core$IWillReceiveProps$;
        }
      }())) {
        return true;
      } else {
        if (!G__8071.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__8071);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__8071);
    }
  }()) {
    var _STAR_read_enabled_STAR_8072 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.will_receive_props.call(null, c, om.core.get_props.call(null, {"props":next_props}));
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8072;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__8073 = c;
    if (G__8073) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8073.om$core$IDisplayName$;
        }
      }())) {
        return true;
      } else {
        if (!G__8073.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__8073);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__8073);
    }
  }()) {
    var _STAR_read_enabled_STAR_8074 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.display_name.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8074;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__8075 = c;
    if (G__8075) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8075.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__8075.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__8075);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__8075);
    }
  }()) {
    var _STAR_read_enabled_STAR_8076 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.will_unmount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8076;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_8090 = om.core.children.call(null, this$);
  if (function() {
    var G__8077 = c_8090;
    if (G__8077) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8077.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__8077.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__8077);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__8077);
    }
  }()) {
    var _STAR_read_enabled_STAR_8078_8091 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_mount.call(null, c_8090);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8078_8091;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__8079 = c;
    if (G__8079) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8079.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__8079.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__8079);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__8079);
    }
  }()) {
    var _STAR_read_enabled_STAR_8080 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.did_mount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8080;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__3479__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var id = (new cljs.core.Keyword("om.core", "id", "om.core/id", 2663181321)).cljs$core$IFn$_invoke$arity$1(istate);
  var ret = {"__om_state":cljs.core.merge.call(null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 2663181321)), function() {
    var G__8081 = c;
    if (G__8081) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8081.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__8081.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__8081);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__8081);
    }
  }() ? function() {
    var _STAR_read_enabled_STAR_8082 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.init_state.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8082;
    }
  }() : null), "__om_id":function() {
    var or__3479__auto__ = id;
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }()};
  props["__om_init_state"] = null;
  return ret;
}, function(next_props, next_state) {
  var this$ = this;
  var _STAR_read_enabled_STAR_8083 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    var props = this$.props;
    var state = this$.state;
    var c = om.core.children.call(null, this$);
    om.core.merge_props_state.call(null, this$, next_props);
    if (function() {
      var G__8084 = c;
      if (G__8084) {
        var bit__4129__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3479__auto__ = bit__4129__auto__;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return G__8084.om$core$IShouldUpdate$;
          }
        }())) {
          return true;
        } else {
          if (!G__8084.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__8084);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__8084);
      }
    }()) {
      return om.core.should_update.call(null, c, om.core.get_props.call(null, {"props":next_props}), om.core._get_state.call(null, this$));
    } else {
      if (cljs.core.not_EQ_.call(null, om.core._value.call(null, props["__om_cursor"]), om.core._value.call(null, next_props["__om_cursor"]))) {
        return true;
      } else {
        if (!(state["__om_pending_state"] == null)) {
          return true;
        } else {
          if (!(props["__om_index"] === next_props["__om_index"])) {
            return true;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8083;
  }
}]);
om.core.specify_state_methods_BANG_ = function specify_state_methods_BANG_(obj) {
  var x8095 = obj;
  x8095.om$core$IGetState$ = true;
  x8095.om$core$IGetState$_get_state$arity$1 = function(x8095) {
    return function(this$) {
      var this$__$1 = this;
      var state = this$__$1.state;
      var or__3479__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return state["__om_state"];
      }
    };
  }(x8095);
  x8095.om$core$IGetState$_get_state$arity$2 = function(x8095) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x8095);
  x8095.om$core$IGetRenderState$ = true;
  x8095.om$core$IGetRenderState$_get_render_state$arity$1 = function(x8095) {
    return function(this$) {
      var this$__$1 = this;
      return this$__$1.state["__om_state"];
    };
  }(x8095);
  x8095.om$core$IGetRenderState$_get_render_state$arity$2 = function(x8095) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x8095);
  x8095.om$core$ISetState$ = true;
  x8095.om$core$ISetState$_set_state_BANG_$arity$2 = function(x8095) {
    return function(this$, val) {
      var this$__$1 = this;
      var _STAR_read_enabled_STAR_8096 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        var props = this$__$1.props;
        this$__$1.state["__om_pending_state"] = val;
        return om.core._queue_render_BANG_.call(null, props["__om_app_state"], this$__$1);
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8096;
      }
    };
  }(x8095);
  x8095.om$core$ISetState$_set_state_BANG_$arity$3 = function(x8095) {
    return function(this$, ks, val) {
      var this$__$1 = this;
      var _STAR_read_enabled_STAR_8097 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        var props = this$__$1.props;
        var state = this$__$1.state;
        var pstate = om.core._get_state.call(null, this$__$1);
        state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, ks, val);
        return om.core._queue_render_BANG_.call(null, props["__om_app_state"], this$__$1);
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8097;
      }
    };
  }(x8095);
  return x8095;
};
om.core.Pure = React.createClass(om.core.specify_state_methods_BANG_.call(null, cljs.core.clj__GT_js.call(null, om.core.pure_methods)));
om.core.pure = function pure(obj) {
  return new om.core.Pure(obj);
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2158397195;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "om.core/MapCursor");
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    var v = cljs.core._lookup.call(null, self__.value, k, not_found);
    if (!cljs.core._EQ_.call(null, v, not_found)) {
      return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k));
    } else {
      return not_found;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.call = function() {
  var G__8101 = null;
  var G__8101__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8101__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8101 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8101__2.call(this, self__, k);
      case 3:
        return G__8101__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8101;
}();
om.core.MapCursor.prototype.apply = function(self__, args8098) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args8098)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(this$__$1) {
        return function(p__8099) {
          var vec__8100 = p__8099;
          var k = cljs.core.nth.call(null, vec__8100, 0, null);
          var v = cljs.core.nth.call(null, vec__8100, 1, null);
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
        };
      }(this$__$1), self__.value);
    } else {
      return null;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.__GT_MapCursor = function __GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2175181595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "om.core/IndexedCursor");
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, null);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, not_found);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, n, v) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.call = function() {
  var G__8103 = null;
  var G__8103__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8103__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8103 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8103__2.call(this, self__, k);
      case 3:
        return G__8103__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8103;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args8102) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args8102)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(this$__$1) {
        return function(v, i) {
          return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, i));
        };
      }(this$__$1), self__.value, cljs.core.range.call(null));
    } else {
      return null;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (n < cljs.core._count.call(null, self__.value)) {
      return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
    } else {
      return not_found;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.__GT_IndexedCursor = function __GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function to_cursor_STAR_(val, state, path) {
  var x8105 = cljs.core.clone.call(null, val);
  x8105.cljs$core$IEquiv$ = true;
  x8105.cljs$core$IEquiv$_equiv$arity$2 = function(x8105) {
    return function(_, other) {
      var ___$1 = this;
      if (om.core._STAR_read_enabled_STAR_) {
        if (om.core.cursor_QMARK_.call(null, other)) {
          return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
        } else {
          return cljs.core._EQ_.call(null, val, other);
        }
      } else {
        throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
      }
    };
  }(x8105);
  x8105.om$core$ITransact$ = true;
  x8105.om$core$ITransact$_transact_BANG_$arity$4 = function(x8105) {
    return function(this$, korks, f, tag) {
      var this$__$1 = this;
      return om.core.transact_STAR_.call(null, state, this$__$1, korks, f, tag);
    };
  }(x8105);
  x8105.om$core$ICursor$ = true;
  x8105.om$core$ICursor$_path$arity$1 = function(x8105) {
    return function(_) {
      var ___$1 = this;
      return path;
    };
  }(x8105);
  x8105.om$core$ICursor$_state$arity$1 = function(x8105) {
    return function(_) {
      var ___$1 = this;
      return state;
    };
  }(x8105);
  x8105.cljs$core$IDeref$ = true;
  x8105.cljs$core$IDeref$_deref$arity$1 = function(x8105) {
    return function(this$) {
      var this$__$1 = this;
      if (!om.core._STAR_read_enabled_STAR_) {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path);
      } else {
        throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
      }
    };
  }(x8105);
  return x8105;
};
om.core.to_cursor = function() {
  var to_cursor = null;
  var to_cursor__1 = function(val) {
    return to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__2 = function(val, state) {
    return to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__3 = function(val, state, path) {
    if (om.core.cursor_QMARK_.call(null, val)) {
      return val;
    } else {
      if (function() {
        var G__8108 = val;
        if (G__8108) {
          var bit__4129__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3479__auto__ = bit__4129__auto__;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return G__8108.om$core$IToCursor$;
            }
          }())) {
            return true;
          } else {
            if (!G__8108.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__8108);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__8108);
        }
      }()) {
        return om.core._to_cursor.call(null, val, state, path);
      } else {
        if (cljs.core.indexed_QMARK_.call(null, val)) {
          return new om.core.IndexedCursor(val, state, path);
        } else {
          if (cljs.core.map_QMARK_.call(null, val)) {
            return new om.core.MapCursor(val, state, path);
          } else {
            if (function() {
              var G__8109 = val;
              if (G__8109) {
                var bit__4129__auto__ = G__8109.cljs$lang$protocol_mask$partition1$ & 8192;
                if (bit__4129__auto__ || G__8109.cljs$core$ICloneable$) {
                  return true;
                } else {
                  if (!G__8109.cljs$lang$protocol_mask$partition1$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__8109);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__8109);
              }
            }()) {
              return om.core.to_cursor_STAR_.call(null, val, state, path);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return val;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  to_cursor = function(val, state, path) {
    switch(arguments.length) {
      case 1:
        return to_cursor__1.call(this, val);
      case 2:
        return to_cursor__2.call(this, val, state);
      case 3:
        return to_cursor__3.call(this, val, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  to_cursor.cljs$core$IFn$_invoke$arity$1 = to_cursor__1;
  to_cursor.cljs$core$IFn$_invoke$arity$2 = to_cursor__2;
  to_cursor.cljs$core$IFn$_invoke$arity$3 = to_cursor__3;
  return to_cursor;
}();
om.core.notify_STAR_ = function notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify_BANG_.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.render_all = function render_all() {
  om.core.refresh_queued = false;
  var seq__8114 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
  var chunk__8115 = null;
  var count__8116 = 0;
  var i__8117 = 0;
  while (true) {
    if (i__8117 < count__8116) {
      var f = cljs.core._nth.call(null, chunk__8115, i__8117);
      f.call(null);
      var G__8118 = seq__8114;
      var G__8119 = chunk__8115;
      var G__8120 = count__8116;
      var G__8121 = i__8117 + 1;
      seq__8114 = G__8118;
      chunk__8115 = G__8119;
      count__8116 = G__8120;
      i__8117 = G__8121;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__8114);
      if (temp__4092__auto__) {
        var seq__8114__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8114__$1)) {
          var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__8114__$1);
          var G__8122 = cljs.core.chunk_rest.call(null, seq__8114__$1);
          var G__8123 = c__4227__auto__;
          var G__8124 = cljs.core.count.call(null, c__4227__auto__);
          var G__8125 = 0;
          seq__8114 = G__8122;
          chunk__8115 = G__8123;
          count__8116 = G__8124;
          i__8117 = G__8125;
          continue;
        } else {
          var f = cljs.core.first.call(null, seq__8114__$1);
          f.call(null);
          var G__8126 = cljs.core.next.call(null, seq__8114__$1);
          var G__8127 = null;
          var G__8128 = 0;
          var G__8129 = 0;
          seq__8114 = G__8126;
          chunk__8115 = G__8127;
          count__8116 = G__8128;
          i__8117 = G__8129;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_QMARK_ = function valid_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [new cljs.core.Keyword(null, "init-state", "init-state", 4479067398), null, new cljs.core.Keyword(null, "ctor", "ctor", 1016968582), null, new cljs.core.Keyword(null, "state", "state", 1123661827), null, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), null, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), null, new cljs.core.Keyword(null, 
  "key", "key", 1014010321), null, new cljs.core.Keyword(null, "instrument", "instrument", 2409387865), null, new cljs.core.Keyword(null, "shared", "shared", 4405305303), null, new cljs.core.Keyword(null, "opts", "opts", 1017322386), null, new cljs.core.Keyword(null, "fn", "fn", 1013907514), null], null), null), cljs.core.keys.call(null, m));
};
om.core.id = function id(owner) {
  return owner.state["__om_id"];
};
om.core.build_STAR_ = function() {
  var build_STAR_ = null;
  var build_STAR___2 = function(f, cursor) {
    return build_STAR_.call(null, f, cursor, null);
  };
  var build_STAR___3 = function(f, cursor, m) {
    if (om.core.valid_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid?", "valid?", 1830611324, null), new cljs.core.Symbol(null, "m", "m", -1640531418, null))))].join(""));
    }
    if (m == null) {
      var shared = function() {
        var or__3479__auto__ = (new cljs.core.Keyword(null, "shared", "shared", 4405305303)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
        }
      }();
      var ctor = function() {
        var or__3479__auto__ = (new cljs.core.Keyword(null, "ctor", "ctor", 1016968582)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return om.core.pure;
        }
      }();
      var pure__6331__auto__ = ctor.call(null, {"children":function(shared, ctor) {
        return function(this$) {
          var _STAR_read_enabled_STAR_8134 = om.core._STAR_read_enabled_STAR_;
          try {
            om.core._STAR_read_enabled_STAR_ = true;
            return f.call(null, cursor, this$);
          } finally {
            om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8134;
          }
        };
      }(shared, ctor), "__om_instrument":om.core._STAR_instrument_STAR_, "__om_app_state":om.core._STAR_state_STAR_, "__om_shared":shared, "__om_cursor":cursor});
      pure__6331__auto__.constructor = goog.getUid(f);
      return pure__6331__auto__;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var map__8135 = m;
        var map__8135__$1 = cljs.core.seq_QMARK_.call(null, map__8135) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8135) : map__8135;
        var opts = cljs.core.get.call(null, map__8135__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
        var init_state = cljs.core.get.call(null, map__8135__$1, new cljs.core.Keyword(null, "init-state", "init-state", 4479067398));
        var state = cljs.core.get.call(null, map__8135__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
        var key = cljs.core.get.call(null, map__8135__$1, new cljs.core.Keyword(null, "key", "key", 1014010321));
        var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", 1013907514));
        var cursor_SINGLEQUOTE_ = !(dataf == null) ? function() {
          var temp__4090__auto__ = (new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var i = temp__4090__auto__;
            return dataf.call(null, cursor, i);
          } else {
            return dataf.call(null, cursor);
          }
        }() : cursor;
        var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563));
        var shared = function() {
          var or__3479__auto__ = (new cljs.core.Keyword(null, "shared", "shared", 4405305303)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
          }
        }();
        var ctor = function() {
          var or__3479__auto__ = (new cljs.core.Keyword(null, "ctor", "ctor", 1016968582)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return om.core.pure;
          }
        }();
        var pure__6331__auto__ = ctor.call(null, {"__om_cursor":cursor_SINGLEQUOTE_, "__om_state":state, "__om_shared":shared, "__om_app_state":om.core._STAR_state_STAR_, "__om_instrument":om.core._STAR_instrument_STAR_, "key":rkey, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514)).cljs$core$IFn$_invoke$arity$1(m), "__om_init_state":init_state, "children":opts == null ? function(map__8135, map__8135__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, 
        rkey, shared, ctor) {
          return function(this$) {
            var _STAR_read_enabled_STAR_8136 = om.core._STAR_read_enabled_STAR_;
            try {
              om.core._STAR_read_enabled_STAR_ = true;
              return f.call(null, cursor_SINGLEQUOTE_, this$);
            } finally {
              om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8136;
            }
          };
        }(map__8135, map__8135__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) : function(map__8135, map__8135__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
          return function(this$) {
            var _STAR_read_enabled_STAR_8137 = om.core._STAR_read_enabled_STAR_;
            try {
              om.core._STAR_read_enabled_STAR_ = true;
              return f.call(null, cursor_SINGLEQUOTE_, this$, opts);
            } finally {
              om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8137;
            }
          };
        }(map__8135, map__8135__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor)});
        pure__6331__auto__.constructor = goog.getUid(f);
        return pure__6331__auto__;
      } else {
        return null;
      }
    }
  };
  build_STAR_ = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build_STAR___2.call(this, f, cursor);
      case 3:
        return build_STAR___3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_STAR_.cljs$core$IFn$_invoke$arity$2 = build_STAR___2;
  build_STAR_.cljs$core$IFn$_invoke$arity$3 = build_STAR___3;
  return build_STAR_;
}();
om.core.build = function() {
  var build = null;
  var build__2 = function(f, cursor) {
    return build.call(null, f, cursor, null);
  };
  var build__3 = function(f, cursor, m) {
    if (!(om.core._STAR_instrument_STAR_ == null)) {
      var ret = function() {
        var _STAR_read_enabled_STAR_8139 = om.core._STAR_read_enabled_STAR_;
        try {
          om.core._STAR_read_enabled_STAR_ = true;
          return om.core._STAR_instrument_STAR_.call(null, f, cursor, m);
        } finally {
          om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_8139;
        }
      }();
      if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "pass", "om.core/pass", 2667619603))) {
        return om.core.build_STAR_.call(null, f, cursor, m);
      } else {
        return ret;
      }
    } else {
      return om.core.build_STAR_.call(null, f, cursor, m);
    }
  };
  build = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build__2.call(this, f, cursor);
      case 3:
        return build__3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build.cljs$core$IFn$_invoke$arity$2 = build__2;
  build.cljs$core$IFn$_invoke$arity$3 = build__3;
  return build;
}();
om.core.build_all = function() {
  var build_all = null;
  var build_all__2 = function(f, xs) {
    return build_all.call(null, f, xs, null);
  };
  var build_all__3 = function(f, xs, m) {
    return cljs.core.map.call(null, function(x, i) {
      return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), i));
    }, xs, cljs.core.range.call(null));
  };
  build_all = function(f, xs, m) {
    switch(arguments.length) {
      case 2:
        return build_all__2.call(this, f, xs);
      case 3:
        return build_all__3.call(this, f, xs, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_all.cljs$core$IFn$_invoke$arity$2 = build_all__2;
  build_all.cljs$core$IFn$_invoke$arity$3 = build_all__3;
  return build_all;
}();
om.core.setup = function setup(state, key, tx_listen) {
  if (function() {
    var G__8148 = state;
    if (G__8148) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__8148.om$core$INotify$;
        }
      }())) {
        return true;
      } else {
        if (!G__8148.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__8148);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__8148);
    }
  }()) {
  } else {
    var listeners_8156 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var render_queue_8157 = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
    var x8149_8158 = state;
    x8149_8158.om$core$IRenderQueue$ = true;
    x8149_8158.om$core$IRenderQueue$_get_queue$arity$1 = function(x8149_8158, listeners_8156, render_queue_8157) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.deref.call(null, render_queue_8157);
      };
    }(x8149_8158, listeners_8156, render_queue_8157);
    x8149_8158.om$core$IRenderQueue$_queue_render_BANG_$arity$2 = function(x8149_8158, listeners_8156, render_queue_8157) {
      return function(this$, c) {
        var this$__$1 = this;
        if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, render_queue_8157), c)) {
          return null;
        } else {
          cljs.core.swap_BANG_.call(null, render_queue_8157, cljs.core.conj, c);
          return cljs.core.swap_BANG_.call(null, this$__$1, cljs.core.identity);
        }
      };
    }(x8149_8158, listeners_8156, render_queue_8157);
    x8149_8158.om$core$IRenderQueue$_empty_queue_BANG_$arity$1 = function(x8149_8158, listeners_8156, render_queue_8157) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.swap_BANG_.call(null, render_queue_8157, cljs.core.empty);
      };
    }(x8149_8158, listeners_8156, render_queue_8157);
    x8149_8158.om$core$INotify$ = true;
    x8149_8158.om$core$INotify$_listen_BANG_$arity$3 = function(x8149_8158, listeners_8156, render_queue_8157) {
      return function(this$, key__$1, tx_listen__$1) {
        var this$__$1 = this;
        if (tx_listen__$1 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, listeners_8156, cljs.core.assoc, key__$1, tx_listen__$1);
        }
        return this$__$1;
      };
    }(x8149_8158, listeners_8156, render_queue_8157);
    x8149_8158.om$core$INotify$_unlisten_BANG_$arity$2 = function(x8149_8158, listeners_8156, render_queue_8157) {
      return function(this$, key__$1) {
        var this$__$1 = this;
        cljs.core.swap_BANG_.call(null, listeners_8156, cljs.core.dissoc, key__$1);
        return this$__$1;
      };
    }(x8149_8158, listeners_8156, render_queue_8157);
    x8149_8158.om$core$INotify$_notify_BANG_$arity$3 = function(x8149_8158, listeners_8156, render_queue_8157) {
      return function(this$, tx_data, root_cursor) {
        var this$__$1 = this;
        if (tx_listen == null) {
        } else {
          var seq__8150_8159 = cljs.core.seq.call(null, cljs.core.deref.call(null, listeners_8156));
          var chunk__8151_8160 = null;
          var count__8152_8161 = 0;
          var i__8153_8162 = 0;
          while (true) {
            if (i__8153_8162 < count__8152_8161) {
              var vec__8154_8163 = cljs.core._nth.call(null, chunk__8151_8160, i__8153_8162);
              var __8164 = cljs.core.nth.call(null, vec__8154_8163, 0, null);
              var f_8165 = cljs.core.nth.call(null, vec__8154_8163, 1, null);
              f_8165.call(null, tx_data, root_cursor);
              var G__8166 = seq__8150_8159;
              var G__8167 = chunk__8151_8160;
              var G__8168 = count__8152_8161;
              var G__8169 = i__8153_8162 + 1;
              seq__8150_8159 = G__8166;
              chunk__8151_8160 = G__8167;
              count__8152_8161 = G__8168;
              i__8153_8162 = G__8169;
              continue;
            } else {
              var temp__4092__auto___8170 = cljs.core.seq.call(null, seq__8150_8159);
              if (temp__4092__auto___8170) {
                var seq__8150_8171__$1 = temp__4092__auto___8170;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__8150_8171__$1)) {
                  var c__4227__auto___8172 = cljs.core.chunk_first.call(null, seq__8150_8171__$1);
                  var G__8173 = cljs.core.chunk_rest.call(null, seq__8150_8171__$1);
                  var G__8174 = c__4227__auto___8172;
                  var G__8175 = cljs.core.count.call(null, c__4227__auto___8172);
                  var G__8176 = 0;
                  seq__8150_8159 = G__8173;
                  chunk__8151_8160 = G__8174;
                  count__8152_8161 = G__8175;
                  i__8153_8162 = G__8176;
                  continue;
                } else {
                  var vec__8155_8177 = cljs.core.first.call(null, seq__8150_8171__$1);
                  var __8178 = cljs.core.nth.call(null, vec__8155_8177, 0, null);
                  var f_8179 = cljs.core.nth.call(null, vec__8155_8177, 1, null);
                  f_8179.call(null, tx_data, root_cursor);
                  var G__8180 = cljs.core.next.call(null, seq__8150_8171__$1);
                  var G__8181 = null;
                  var G__8182 = 0;
                  var G__8183 = 0;
                  seq__8150_8159 = G__8180;
                  chunk__8151_8160 = G__8181;
                  count__8152_8161 = G__8182;
                  i__8153_8162 = G__8183;
                  continue;
                }
              } else {
              }
            }
            break;
          }
        }
        return this$__$1;
      };
    }(x8149_8158, listeners_8156, render_queue_8157);
  }
  return om.core._listen_BANG_.call(null, state, key, tx_listen);
};
om.core.tear_down = function tear_down(state, key) {
  return om.core._unlisten_BANG_.call(null, state, key);
};
om.core.root = function root(f, value, p__8184) {
  var map__8199 = p__8184;
  var map__8199__$1 = cljs.core.seq_QMARK_.call(null, map__8199) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8199) : map__8199;
  var options = map__8199__$1;
  var instrument = cljs.core.get.call(null, map__8199__$1, new cljs.core.Keyword(null, "instrument", "instrument", 2409387865));
  var path = cljs.core.get.call(null, map__8199__$1, new cljs.core.Keyword(null, "path", "path", 1017337751));
  var tx_listen = cljs.core.get.call(null, map__8199__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114));
  var target = cljs.core.get.call(null, map__8199__$1, new cljs.core.Keyword(null, "target", "target", 4427965699));
  if (!(target == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No target specified to om.core/root"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "target", "target", 1773529930, null)))))].join(""));
  }
  var roots_SINGLEQUOTE__8213 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__8213, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__8213, target).call(null);
  } else {
  }
  var watch_key = cljs.core.gensym.call(null);
  var state = function() {
    var G__8200 = value;
    if (G__8200) {
      var bit__4129__auto__ = G__8200.cljs$lang$protocol_mask$partition1$ & 16384;
      if (bit__4129__auto__ || G__8200.cljs$core$IAtom$) {
        return true;
      } else {
        if (!G__8200.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__8200);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__8200);
    }
  }() ? value : cljs.core.atom.call(null, value);
  var state__$1 = om.core.setup.call(null, state, watch_key, tx_listen);
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 4427965699), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114), new cljs.core.Keyword(null, "path", "path", 1017337751));
  var rootf = function(watch_key, state, state__$1, m, map__8199, map__8199__$1, options, instrument, path, tx_listen, target) {
    return function rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path);
      om.dom.render.call(null, function() {
        var _STAR_instrument_STAR_8207 = om.core._STAR_instrument_STAR_;
        var _STAR_state_STAR_8208 = om.core._STAR_state_STAR_;
        try {
          om.core._STAR_instrument_STAR_ = instrument;
          om.core._STAR_state_STAR_ = state__$1;
          return om.core.build.call(null, f, cursor, m);
        } finally {
          om.core._STAR_state_STAR_ = _STAR_state_STAR_8208;
          om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_8207;
        }
      }(), target);
      var queue = om.core._get_queue.call(null, state__$1);
      if (cljs.core.empty_QMARK_.call(null, queue)) {
        return null;
      } else {
        var seq__8209_8214 = cljs.core.seq.call(null, queue);
        var chunk__8210_8215 = null;
        var count__8211_8216 = 0;
        var i__8212_8217 = 0;
        while (true) {
          if (i__8212_8217 < count__8211_8216) {
            var c_8218 = cljs.core._nth.call(null, chunk__8210_8215, i__8212_8217);
            c_8218.forceUpdate();
            var G__8219 = seq__8209_8214;
            var G__8220 = chunk__8210_8215;
            var G__8221 = count__8211_8216;
            var G__8222 = i__8212_8217 + 1;
            seq__8209_8214 = G__8219;
            chunk__8210_8215 = G__8220;
            count__8211_8216 = G__8221;
            i__8212_8217 = G__8222;
            continue;
          } else {
            var temp__4092__auto___8223 = cljs.core.seq.call(null, seq__8209_8214);
            if (temp__4092__auto___8223) {
              var seq__8209_8224__$1 = temp__4092__auto___8223;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__8209_8224__$1)) {
                var c__4227__auto___8225 = cljs.core.chunk_first.call(null, seq__8209_8224__$1);
                var G__8226 = cljs.core.chunk_rest.call(null, seq__8209_8224__$1);
                var G__8227 = c__4227__auto___8225;
                var G__8228 = cljs.core.count.call(null, c__4227__auto___8225);
                var G__8229 = 0;
                seq__8209_8214 = G__8226;
                chunk__8210_8215 = G__8227;
                count__8211_8216 = G__8228;
                i__8212_8217 = G__8229;
                continue;
              } else {
                var c_8230 = cljs.core.first.call(null, seq__8209_8224__$1);
                c_8230.forceUpdate();
                var G__8231 = cljs.core.next.call(null, seq__8209_8224__$1);
                var G__8232 = null;
                var G__8233 = 0;
                var G__8234 = 0;
                seq__8209_8214 = G__8231;
                chunk__8210_8215 = G__8232;
                count__8211_8216 = G__8233;
                i__8212_8217 = G__8234;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return om.core._empty_queue_BANG_.call(null, state__$1);
      }
    };
  }(watch_key, state, state__$1, m, map__8199, map__8199__$1, options, instrument, path, tx_listen, target);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(watch_key, state, state__$1, m, rootf, map__8199, map__8199__$1, options, instrument, path, tx_listen, target) {
    return function(_, ___$1, ___$2, ___$3) {
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (typeof requestAnimationFrame !== "undefined") {
          return requestAnimationFrame(om.core.render_all);
        } else {
          return setTimeout(om.core.render_all, 16);
        }
      }
    };
  }(watch_key, state, state__$1, m, rootf, map__8199, map__8199__$1, options, instrument, path, tx_listen, target));
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function(watch_key, state, state__$1, m, rootf, map__8199, map__8199__$1, options, instrument, path, tx_listen, target) {
    return function() {
      cljs.core.remove_watch.call(null, state__$1, watch_key);
      om.core.tear_down.call(null, state__$1, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    };
  }(watch_key, state, state__$1, m, rootf, map__8199, map__8199__$1, options, instrument, path, tx_listen, target));
  return rootf.call(null);
};
om.core.transact_BANG_ = function() {
  var transact_BANG_ = null;
  var transact_BANG___2 = function(cursor, f) {
    return transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
  };
  var transact_BANG___3 = function(cursor, korks, f) {
    return transact_BANG_.call(null, cursor, korks, f, null);
  };
  var transact_BANG___4 = function(cursor, korks, f, tag) {
    var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.Keyword(null, "else", "else", 1017020587) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null) : null;
    return om.core._transact_BANG_.call(null, cursor, korks__$1, f, tag);
  };
  transact_BANG_ = function(cursor, korks, f, tag) {
    switch(arguments.length) {
      case 2:
        return transact_BANG___2.call(this, cursor, korks);
      case 3:
        return transact_BANG___3.call(this, cursor, korks, f);
      case 4:
        return transact_BANG___4.call(this, cursor, korks, f, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transact_BANG_.cljs$core$IFn$_invoke$arity$2 = transact_BANG___2;
  transact_BANG_.cljs$core$IFn$_invoke$arity$3 = transact_BANG___3;
  transact_BANG_.cljs$core$IFn$_invoke$arity$4 = transact_BANG___4;
  return transact_BANG_;
}();
om.core.update_BANG_ = function() {
  var update_BANG_ = null;
  var update_BANG___2 = function(cursor, v) {
    return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
      return v;
    }, null);
  };
  var update_BANG___3 = function(cursor, korks, v) {
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, null);
  };
  var update_BANG___4 = function(cursor, korks, v, tag) {
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, tag);
  };
  update_BANG_ = function(cursor, korks, v, tag) {
    switch(arguments.length) {
      case 2:
        return update_BANG___2.call(this, cursor, korks);
      case 3:
        return update_BANG___3.call(this, cursor, korks, v);
      case 4:
        return update_BANG___4.call(this, cursor, korks, v, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_BANG_.cljs$core$IFn$_invoke$arity$2 = update_BANG___2;
  update_BANG_.cljs$core$IFn$_invoke$arity$3 = update_BANG___3;
  update_BANG_.cljs$core$IFn$_invoke$arity$4 = update_BANG___4;
  return update_BANG_;
}();
om.core.get_node = function() {
  var get_node = null;
  var get_node__1 = function(owner) {
    return owner.getDOMNode();
  };
  var get_node__2 = function(owner, name) {
    var temp__4092__auto__ = owner.refs;
    if (cljs.core.truth_(temp__4092__auto__)) {
      var refs = temp__4092__auto__;
      return refs[name].getDOMNode();
    } else {
      return null;
    }
  };
  get_node = function(owner, name) {
    switch(arguments.length) {
      case 1:
        return get_node__1.call(this, owner);
      case 2:
        return get_node__2.call(this, owner, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_node.cljs$core$IFn$_invoke$arity$1 = get_node__1;
  get_node.cljs$core$IFn$_invoke$arity$2 = get_node__2;
  return get_node;
}();
om.core.set_state_BANG_ = function() {
  var set_state_BANG_ = null;
  var set_state_BANG___2 = function(owner, v) {
    return om.core._set_state_BANG_.call(null, owner, v);
  };
  var set_state_BANG___3 = function(owner, korks, v) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v);
  };
  set_state_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_BANG___2.call(this, owner, korks);
      case 3:
        return set_state_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_BANG___2;
  set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_BANG___3;
  return set_state_BANG_;
}();
om.core.update_state_BANG_ = function() {
  var update_state_BANG_ = null;
  var update_state_BANG___2 = function(owner, f) {
    return om.core.set_state_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var update_state_BANG___3 = function(owner, korks, f) {
    return om.core.set_state_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  update_state_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return update_state_BANG___2.call(this, owner, korks);
      case 3:
        return update_state_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = update_state_BANG___2;
  update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = update_state_BANG___3;
  return update_state_BANG_;
}();
om.core.refresh_BANG_ = function refresh_BANG_(owner) {
  return om.core.update_state_BANG_.call(null, owner, cljs.core.identity);
};
om.core.get_render_state = function() {
  var get_render_state = null;
  var get_render_state__1 = function(owner) {
    return om.core._get_render_state.call(null, owner);
  };
  var get_render_state__2 = function(owner, korks) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_render_state.call(null, owner, ks);
  };
  get_render_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_render_state__1.call(this, owner);
      case 2:
        return get_render_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_render_state.cljs$core$IFn$_invoke$arity$1 = get_render_state__1;
  get_render_state.cljs$core$IFn$_invoke$arity$2 = get_render_state__2;
  return get_render_state;
}();
om.core.rendering_QMARK_ = function rendering_QMARK_() {
  return om.core._STAR_read_enabled_STAR_ === true;
};
goog.provide("plumbing.core");
goog.require("cljs.core");
goog.require("plumbing.fnk.schema");
goog.require("plumbing.fnk.schema");
goog.require("schema.utils");
goog.require("schema.utils");
plumbing.core._PLUS_none_PLUS_ = new cljs.core.Keyword("plumbing.core", "missing", "plumbing.core/missing", 1730933117);
plumbing.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
  };
  var update__4 = function(m, k, f, x1) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x1));
  };
  var update__5 = function(m, k, f, x1, x2) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x1, x2));
  };
  var update__6 = function() {
    var G__10611__delegate = function(m, k, f, x1, x2, xs) {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), x1, x2, xs));
    };
    var G__10611 = function(m, k, f, x1, x2, var_args) {
      var xs = null;
      if (arguments.length > 5) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__10611__delegate.call(this, m, k, f, x1, x2, xs);
    };
    G__10611.cljs$lang$maxFixedArity = 5;
    G__10611.cljs$lang$applyTo = function(arglist__10612) {
      var m = cljs.core.first(arglist__10612);
      arglist__10612 = cljs.core.next(arglist__10612);
      var k = cljs.core.first(arglist__10612);
      arglist__10612 = cljs.core.next(arglist__10612);
      var f = cljs.core.first(arglist__10612);
      arglist__10612 = cljs.core.next(arglist__10612);
      var x1 = cljs.core.first(arglist__10612);
      arglist__10612 = cljs.core.next(arglist__10612);
      var x2 = cljs.core.first(arglist__10612);
      var xs = cljs.core.rest(arglist__10612);
      return G__10611__delegate(m, k, f, x1, x2, xs);
    };
    G__10611.cljs$core$IFn$_invoke$arity$variadic = G__10611__delegate;
    return G__10611;
  }();
  update = function(m, k, f, x1, x2, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x1);
      case 5:
        return update__5.call(this, m, k, f, x1, x2);
      default:
        return update__6.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x1, x2, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 5;
  update.cljs$lang$applyTo = update__6.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$variadic = update__6.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
plumbing.core.map_vals = function map_vals(f, m) {
  if (cljs.core.sorted_QMARK_.call(null, m)) {
    return cljs.core.reduce_kv.call(null, function(out_m, k, v) {
      return cljs.core.assoc.call(null, out_m, k, f.call(null, v));
    }, cljs.core.sorted_map.call(null), m);
  } else {
    if (cljs.core.map_QMARK_.call(null, m)) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, function(out_m, k, v) {
        return cljs.core.assoc_BANG_.call(null, out_m, k, f.call(null, v));
      }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), m));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var m_atom__6782__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
        var seq__10621_10627 = cljs.core.seq.call(null, m);
        var chunk__10622_10628 = null;
        var count__10623_10629 = 0;
        var i__10624_10630 = 0;
        while (true) {
          if (i__10624_10630 < count__10623_10629) {
            var vec__10625_10631 = cljs.core._nth.call(null, chunk__10622_10628, i__10624_10630);
            var k_10632 = cljs.core.nth.call(null, vec__10625_10631, 0, null);
            var v_10633 = cljs.core.nth.call(null, vec__10625_10631, 1, null);
            var m10620_10634 = cljs.core.deref.call(null, m_atom__6782__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10620_10634, k_10632, f.call(null, v_10633)));
            var G__10635 = seq__10621_10627;
            var G__10636 = chunk__10622_10628;
            var G__10637 = count__10623_10629;
            var G__10638 = i__10624_10630 + 1;
            seq__10621_10627 = G__10635;
            chunk__10622_10628 = G__10636;
            count__10623_10629 = G__10637;
            i__10624_10630 = G__10638;
            continue;
          } else {
            var temp__4092__auto___10639 = cljs.core.seq.call(null, seq__10621_10627);
            if (temp__4092__auto___10639) {
              var seq__10621_10640__$1 = temp__4092__auto___10639;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10621_10640__$1)) {
                var c__4227__auto___10641 = cljs.core.chunk_first.call(null, seq__10621_10640__$1);
                var G__10642 = cljs.core.chunk_rest.call(null, seq__10621_10640__$1);
                var G__10643 = c__4227__auto___10641;
                var G__10644 = cljs.core.count.call(null, c__4227__auto___10641);
                var G__10645 = 0;
                seq__10621_10627 = G__10642;
                chunk__10622_10628 = G__10643;
                count__10623_10629 = G__10644;
                i__10624_10630 = G__10645;
                continue;
              } else {
                var vec__10626_10646 = cljs.core.first.call(null, seq__10621_10640__$1);
                var k_10647 = cljs.core.nth.call(null, vec__10626_10646, 0, null);
                var v_10648 = cljs.core.nth.call(null, vec__10626_10646, 1, null);
                var m10620_10649 = cljs.core.deref.call(null, m_atom__6782__auto__);
                cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10620_10649, k_10647, f.call(null, v_10648)));
                var G__10650 = cljs.core.next.call(null, seq__10621_10640__$1);
                var G__10651 = null;
                var G__10652 = 0;
                var G__10653 = 0;
                seq__10621_10627 = G__10650;
                chunk__10622_10628 = G__10651;
                count__10623_10629 = G__10652;
                i__10624_10630 = G__10653;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__6782__auto__));
      } else {
        return null;
      }
    }
  }
};
plumbing.core.map_keys = function map_keys(f, m) {
  if (cljs.core.map_QMARK_.call(null, m)) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, function(out_m, k, v) {
      return cljs.core.assoc_BANG_.call(null, out_m, f.call(null, k), v);
    }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), m));
  } else {
    var m_atom__6782__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
    var seq__10662_10668 = cljs.core.seq.call(null, m);
    var chunk__10663_10669 = null;
    var count__10664_10670 = 0;
    var i__10665_10671 = 0;
    while (true) {
      if (i__10665_10671 < count__10664_10670) {
        var vec__10666_10672 = cljs.core._nth.call(null, chunk__10663_10669, i__10665_10671);
        var k_10673 = cljs.core.nth.call(null, vec__10666_10672, 0, null);
        var v_10674 = cljs.core.nth.call(null, vec__10666_10672, 1, null);
        var m10661_10675 = cljs.core.deref.call(null, m_atom__6782__auto__);
        cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10661_10675, f.call(null, k_10673), v_10674));
        var G__10676 = seq__10662_10668;
        var G__10677 = chunk__10663_10669;
        var G__10678 = count__10664_10670;
        var G__10679 = i__10665_10671 + 1;
        seq__10662_10668 = G__10676;
        chunk__10663_10669 = G__10677;
        count__10664_10670 = G__10678;
        i__10665_10671 = G__10679;
        continue;
      } else {
        var temp__4092__auto___10680 = cljs.core.seq.call(null, seq__10662_10668);
        if (temp__4092__auto___10680) {
          var seq__10662_10681__$1 = temp__4092__auto___10680;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10662_10681__$1)) {
            var c__4227__auto___10682 = cljs.core.chunk_first.call(null, seq__10662_10681__$1);
            var G__10683 = cljs.core.chunk_rest.call(null, seq__10662_10681__$1);
            var G__10684 = c__4227__auto___10682;
            var G__10685 = cljs.core.count.call(null, c__4227__auto___10682);
            var G__10686 = 0;
            seq__10662_10668 = G__10683;
            chunk__10663_10669 = G__10684;
            count__10664_10670 = G__10685;
            i__10665_10671 = G__10686;
            continue;
          } else {
            var vec__10667_10687 = cljs.core.first.call(null, seq__10662_10681__$1);
            var k_10688 = cljs.core.nth.call(null, vec__10667_10687, 0, null);
            var v_10689 = cljs.core.nth.call(null, vec__10667_10687, 1, null);
            var m10661_10690 = cljs.core.deref.call(null, m_atom__6782__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10661_10690, f.call(null, k_10688), v_10689));
            var G__10691 = cljs.core.next.call(null, seq__10662_10681__$1);
            var G__10692 = null;
            var G__10693 = 0;
            var G__10694 = 0;
            seq__10662_10668 = G__10691;
            chunk__10663_10669 = G__10692;
            count__10664_10670 = G__10693;
            i__10665_10671 = G__10694;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__6782__auto__));
  }
};
plumbing.core.map_from_keys = function map_from_keys(f, ks) {
  var m_atom__6782__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
  var seq__10701_10705 = cljs.core.seq.call(null, ks);
  var chunk__10702_10706 = null;
  var count__10703_10707 = 0;
  var i__10704_10708 = 0;
  while (true) {
    if (i__10704_10708 < count__10703_10707) {
      var k_10709 = cljs.core._nth.call(null, chunk__10702_10706, i__10704_10708);
      var m10700_10710 = cljs.core.deref.call(null, m_atom__6782__auto__);
      cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10700_10710, k_10709, f.call(null, k_10709)));
      var G__10711 = seq__10701_10705;
      var G__10712 = chunk__10702_10706;
      var G__10713 = count__10703_10707;
      var G__10714 = i__10704_10708 + 1;
      seq__10701_10705 = G__10711;
      chunk__10702_10706 = G__10712;
      count__10703_10707 = G__10713;
      i__10704_10708 = G__10714;
      continue;
    } else {
      var temp__4092__auto___10715 = cljs.core.seq.call(null, seq__10701_10705);
      if (temp__4092__auto___10715) {
        var seq__10701_10716__$1 = temp__4092__auto___10715;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10701_10716__$1)) {
          var c__4227__auto___10717 = cljs.core.chunk_first.call(null, seq__10701_10716__$1);
          var G__10718 = cljs.core.chunk_rest.call(null, seq__10701_10716__$1);
          var G__10719 = c__4227__auto___10717;
          var G__10720 = cljs.core.count.call(null, c__4227__auto___10717);
          var G__10721 = 0;
          seq__10701_10705 = G__10718;
          chunk__10702_10706 = G__10719;
          count__10703_10707 = G__10720;
          i__10704_10708 = G__10721;
          continue;
        } else {
          var k_10722 = cljs.core.first.call(null, seq__10701_10716__$1);
          var m10700_10723 = cljs.core.deref.call(null, m_atom__6782__auto__);
          cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10700_10723, k_10722, f.call(null, k_10722)));
          var G__10724 = cljs.core.next.call(null, seq__10701_10716__$1);
          var G__10725 = null;
          var G__10726 = 0;
          var G__10727 = 0;
          seq__10701_10705 = G__10724;
          chunk__10702_10706 = G__10725;
          count__10703_10707 = G__10726;
          i__10704_10708 = G__10727;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__6782__auto__));
};
plumbing.core.map_from_vals = function map_from_vals(f, vs) {
  var m_atom__6782__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
  var seq__10734_10738 = cljs.core.seq.call(null, vs);
  var chunk__10735_10739 = null;
  var count__10736_10740 = 0;
  var i__10737_10741 = 0;
  while (true) {
    if (i__10737_10741 < count__10736_10740) {
      var v_10742 = cljs.core._nth.call(null, chunk__10735_10739, i__10737_10741);
      var m10733_10743 = cljs.core.deref.call(null, m_atom__6782__auto__);
      cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10733_10743, f.call(null, v_10742), v_10742));
      var G__10744 = seq__10734_10738;
      var G__10745 = chunk__10735_10739;
      var G__10746 = count__10736_10740;
      var G__10747 = i__10737_10741 + 1;
      seq__10734_10738 = G__10744;
      chunk__10735_10739 = G__10745;
      count__10736_10740 = G__10746;
      i__10737_10741 = G__10747;
      continue;
    } else {
      var temp__4092__auto___10748 = cljs.core.seq.call(null, seq__10734_10738);
      if (temp__4092__auto___10748) {
        var seq__10734_10749__$1 = temp__4092__auto___10748;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10734_10749__$1)) {
          var c__4227__auto___10750 = cljs.core.chunk_first.call(null, seq__10734_10749__$1);
          var G__10751 = cljs.core.chunk_rest.call(null, seq__10734_10749__$1);
          var G__10752 = c__4227__auto___10750;
          var G__10753 = cljs.core.count.call(null, c__4227__auto___10750);
          var G__10754 = 0;
          seq__10734_10738 = G__10751;
          chunk__10735_10739 = G__10752;
          count__10736_10740 = G__10753;
          i__10737_10741 = G__10754;
          continue;
        } else {
          var v_10755 = cljs.core.first.call(null, seq__10734_10749__$1);
          var m10733_10756 = cljs.core.deref.call(null, m_atom__6782__auto__);
          cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10733_10756, f.call(null, v_10755), v_10755));
          var G__10757 = cljs.core.next.call(null, seq__10734_10749__$1);
          var G__10758 = null;
          var G__10759 = 0;
          var G__10760 = 0;
          seq__10734_10738 = G__10757;
          chunk__10735_10739 = G__10758;
          count__10736_10740 = G__10759;
          i__10737_10741 = G__10760;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__6782__auto__));
};
plumbing.core.dissoc_in = function dissoc_in(m, p__10761) {
  var vec__10763 = p__10761;
  var k = cljs.core.nth.call(null, vec__10763, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__10763, 1);
  if (cljs.core.truth_(m)) {
    var temp__4090__auto__ = function() {
      var and__3467__auto__ = ks;
      if (and__3467__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3467__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
plumbing.core.keywordize_map = function keywordize_map(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    var m_atom__6782__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
    var seq__10772_10778 = cljs.core.seq.call(null, x);
    var chunk__10773_10779 = null;
    var count__10774_10780 = 0;
    var i__10775_10781 = 0;
    while (true) {
      if (i__10775_10781 < count__10774_10780) {
        var vec__10776_10782 = cljs.core._nth.call(null, chunk__10773_10779, i__10775_10781);
        var k_10783 = cljs.core.nth.call(null, vec__10776_10782, 0, null);
        var v_10784 = cljs.core.nth.call(null, vec__10776_10782, 1, null);
        var m10771_10785 = cljs.core.deref.call(null, m_atom__6782__auto__);
        cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10771_10785, typeof k_10783 === "string" ? cljs.core.keyword.call(null, k_10783) : k_10783, keywordize_map.call(null, v_10784)));
        var G__10786 = seq__10772_10778;
        var G__10787 = chunk__10773_10779;
        var G__10788 = count__10774_10780;
        var G__10789 = i__10775_10781 + 1;
        seq__10772_10778 = G__10786;
        chunk__10773_10779 = G__10787;
        count__10774_10780 = G__10788;
        i__10775_10781 = G__10789;
        continue;
      } else {
        var temp__4092__auto___10790 = cljs.core.seq.call(null, seq__10772_10778);
        if (temp__4092__auto___10790) {
          var seq__10772_10791__$1 = temp__4092__auto___10790;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10772_10791__$1)) {
            var c__4227__auto___10792 = cljs.core.chunk_first.call(null, seq__10772_10791__$1);
            var G__10793 = cljs.core.chunk_rest.call(null, seq__10772_10791__$1);
            var G__10794 = c__4227__auto___10792;
            var G__10795 = cljs.core.count.call(null, c__4227__auto___10792);
            var G__10796 = 0;
            seq__10772_10778 = G__10793;
            chunk__10773_10779 = G__10794;
            count__10774_10780 = G__10795;
            i__10775_10781 = G__10796;
            continue;
          } else {
            var vec__10777_10797 = cljs.core.first.call(null, seq__10772_10791__$1);
            var k_10798 = cljs.core.nth.call(null, vec__10777_10797, 0, null);
            var v_10799 = cljs.core.nth.call(null, vec__10777_10797, 1, null);
            var m10771_10800 = cljs.core.deref.call(null, m_atom__6782__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__6782__auto__, cljs.core.assoc_BANG_.call(null, m10771_10800, typeof k_10798 === "string" ? cljs.core.keyword.call(null, k_10798) : k_10798, keywordize_map.call(null, v_10799)));
            var G__10801 = cljs.core.next.call(null, seq__10772_10791__$1);
            var G__10802 = null;
            var G__10803 = 0;
            var G__10804 = 0;
            seq__10772_10778 = G__10801;
            chunk__10773_10779 = G__10802;
            count__10774_10780 = G__10803;
            i__10775_10781 = G__10804;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__6782__auto__));
  } else {
    if (cljs.core.seq_QMARK_.call(null, x)) {
      return cljs.core.map.call(null, keywordize_map, x);
    } else {
      if (cljs.core.vector_QMARK_.call(null, x)) {
        return cljs.core.mapv.call(null, keywordize_map, x);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return x;
        } else {
          return null;
        }
      }
    }
  }
};
plumbing.core.safe_get = function safe_get(m, k) {
  var temp__4090__auto__ = cljs.core.find.call(null, m, k);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var pair__6851__auto__ = temp__4090__auto__;
    return cljs.core.val.call(null, pair__6851__auto__);
  } else {
    var e = schema.utils.format_STAR_.call(null, "Key %s not found in %s", k, cljs.core.mapv.call(null, cljs.core.key, m));
    throw new Error(e);
  }
};
plumbing.core.safe_get_in = function safe_get_in(m, ks) {
  while (true) {
    if (cljs.core.seq.call(null, ks)) {
      var G__10805 = plumbing.core.safe_get.call(null, m, cljs.core.first.call(null, ks));
      var G__10806 = cljs.core.next.call(null, ks);
      m = G__10805;
      ks = G__10806;
      continue;
    } else {
      return m;
    }
    break;
  }
};
plumbing.core.assoc_when = function() {
  var assoc_when__delegate = function(m, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    return cljs.core.into.call(null, function() {
      var or__3479__auto__ = m;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__4196__auto__ = function iter__10815(s__10816) {
        return new cljs.core.LazySeq(null, function() {
          var s__10816__$1 = s__10816;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__10816__$1);
            if (temp__4092__auto__) {
              var s__10816__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__10816__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__10816__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__10818 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__10817 = 0;
                  while (true) {
                    if (i__10817 < size__4195__auto__) {
                      var vec__10821 = cljs.core._nth.call(null, c__4194__auto__, i__10817);
                      var k = cljs.core.nth.call(null, vec__10821, 0, null);
                      var v = cljs.core.nth.call(null, vec__10821, 1, null);
                      if (cljs.core.truth_(v)) {
                        cljs.core.chunk_append.call(null, b__10818, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__10823 = i__10817 + 1;
                        i__10817 = G__10823;
                        continue;
                      } else {
                        var G__10824 = i__10817 + 1;
                        i__10817 = G__10824;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10818), iter__10815.call(null, cljs.core.chunk_rest.call(null, s__10816__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10818), null);
                }
              } else {
                var vec__10822 = cljs.core.first.call(null, s__10816__$2);
                var k = cljs.core.nth.call(null, vec__10822, 0, null);
                var v = cljs.core.nth.call(null, vec__10822, 1, null);
                if (cljs.core.truth_(v)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__10815.call(null, cljs.core.rest.call(null, s__10816__$2)));
                } else {
                  var G__10825 = cljs.core.rest.call(null, s__10816__$2);
                  s__10816__$1 = G__10825;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4196__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_when = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_when__delegate.call(this, m, kvs);
  };
  assoc_when.cljs$lang$maxFixedArity = 1;
  assoc_when.cljs$lang$applyTo = function(arglist__10826) {
    var m = cljs.core.first(arglist__10826);
    var kvs = cljs.core.rest(arglist__10826);
    return assoc_when__delegate(m, kvs);
  };
  assoc_when.cljs$core$IFn$_invoke$arity$variadic = assoc_when__delegate;
  return assoc_when;
}();
plumbing.core.update_in_when = function() {
  var update_in_when__delegate = function(m, key_seq, f, args) {
    var found = cljs.core.get_in.call(null, m, key_seq, plumbing.core._PLUS_none_PLUS_);
    if (!(plumbing.core._PLUS_none_PLUS_ === found)) {
      return cljs.core.assoc_in.call(null, m, key_seq, cljs.core.apply.call(null, f, found, args));
    } else {
      return m;
    }
  };
  var update_in_when = function(m, key_seq, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return update_in_when__delegate.call(this, m, key_seq, f, args);
  };
  update_in_when.cljs$lang$maxFixedArity = 3;
  update_in_when.cljs$lang$applyTo = function(arglist__10827) {
    var m = cljs.core.first(arglist__10827);
    arglist__10827 = cljs.core.next(arglist__10827);
    var key_seq = cljs.core.first(arglist__10827);
    arglist__10827 = cljs.core.next(arglist__10827);
    var f = cljs.core.first(arglist__10827);
    var args = cljs.core.rest(arglist__10827);
    return update_in_when__delegate(m, key_seq, f, args);
  };
  update_in_when.cljs$core$IFn$_invoke$arity$variadic = update_in_when__delegate;
  return update_in_when;
}();
plumbing.core.grouped_map = function grouped_map(key_fn, map_fn, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = key_fn.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), map_fn.call(null, x)));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
plumbing.core.aconcat = function aconcat(s) {
  return cljs.core.concat.call(null, new cljs.core.LazySeq(null, function() {
    return cljs.core.first.call(null, s);
  }, null, null), new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.next.call(null, s);
    if (temp__4092__auto__) {
      var n = temp__4092__auto__;
      return aconcat.call(null, n);
    } else {
      return null;
    }
  }, null, null));
};
plumbing.core.unchunk = function unchunk(s) {
  if (cljs.core.seq.call(null, s)) {
    return cljs.core.cons.call(null, cljs.core.first.call(null, s), new cljs.core.LazySeq(null, function() {
      return unchunk.call(null, cljs.core.rest.call(null, s));
    }, null, null));
  } else {
    return null;
  }
};
plumbing.core.sum = function() {
  var sum = null;
  var sum__1 = function(xs) {
    return cljs.core.reduce.call(null, cljs.core._PLUS_, xs);
  };
  var sum__2 = function(f, xs) {
    return cljs.core.reduce.call(null, cljs.core._PLUS_, cljs.core.map.call(null, f, xs));
  };
  sum = function(f, xs) {
    switch(arguments.length) {
      case 1:
        return sum__1.call(this, f);
      case 2:
        return sum__2.call(this, f, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sum.cljs$core$IFn$_invoke$arity$1 = sum__1;
  sum.cljs$core$IFn$_invoke$arity$2 = sum__2;
  return sum;
}();
plumbing.core.singleton = function singleton(xs) {
  var temp__4092__auto__ = cljs.core.seq.call(null, xs);
  if (temp__4092__auto__) {
    var xs__$1 = temp__4092__auto__;
    if (cljs.core.next.call(null, xs__$1)) {
      return null;
    } else {
      return cljs.core.first.call(null, xs__$1);
    }
  } else {
    return null;
  }
};
plumbing.core.indexed = function indexed(s) {
  return cljs.core.map_indexed.call(null, cljs.core.vector, s);
};
plumbing.core.positions = function positions(f, s) {
  return cljs.core.keep_indexed.call(null, function(i, x) {
    if (cljs.core.truth_(f.call(null, x))) {
      return i;
    } else {
      return null;
    }
  }, s);
};
plumbing.core.distinct_by = function distinct_by(f, xs) {
  var s = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
  var iter__4196__auto__ = function(s) {
    return function iter__10832(s__10833) {
      return new cljs.core.LazySeq(null, function(s) {
        return function() {
          var s__10833__$1 = s__10833;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__10833__$1);
            if (temp__4092__auto__) {
              var s__10833__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__10833__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__10833__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__10835 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__10834 = 0;
                  while (true) {
                    if (i__10834 < size__4195__auto__) {
                      var x = cljs.core._nth.call(null, c__4194__auto__, i__10834);
                      var id = f.call(null, x);
                      if (!cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, s), id)) {
                        cljs.core.chunk_append.call(null, b__10835, function() {
                          cljs.core.swap_BANG_.call(null, s, cljs.core.conj, id);
                          return x;
                        }());
                        var G__10836 = i__10834 + 1;
                        i__10834 = G__10836;
                        continue;
                      } else {
                        var G__10837 = i__10834 + 1;
                        i__10834 = G__10837;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10835), iter__10832.call(null, cljs.core.chunk_rest.call(null, s__10833__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10835), null);
                }
              } else {
                var x = cljs.core.first.call(null, s__10833__$2);
                var id = f.call(null, x);
                if (!cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, s), id)) {
                  return cljs.core.cons.call(null, function() {
                    cljs.core.swap_BANG_.call(null, s, cljs.core.conj, id);
                    return x;
                  }(), iter__10832.call(null, cljs.core.rest.call(null, s__10833__$2)));
                } else {
                  var G__10838 = cljs.core.rest.call(null, s__10833__$2);
                  s__10833__$1 = G__10838;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(s), null, null);
    };
  }(s);
  return iter__4196__auto__.call(null, xs);
};
plumbing.core.interleave_all = function() {
  var interleave_all__delegate = function(colls) {
    return new cljs.core.LazySeq(null, function() {
      return function helper(seqs) {
        if (cljs.core.seq.call(null, seqs)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, seqs), new cljs.core.LazySeq(null, function() {
            return helper.call(null, cljs.core.keep.call(null, cljs.core.next, seqs));
          }, null, null));
        } else {
          return null;
        }
      }.call(null, cljs.core.keep.call(null, cljs.core.seq, colls));
    }, null, null);
  };
  var interleave_all = function(var_args) {
    var colls = null;
    if (arguments.length > 0) {
      colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return interleave_all__delegate.call(this, colls);
  };
  interleave_all.cljs$lang$maxFixedArity = 0;
  interleave_all.cljs$lang$applyTo = function(arglist__10839) {
    var colls = cljs.core.seq(arglist__10839);
    return interleave_all__delegate(colls);
  };
  interleave_all.cljs$core$IFn$_invoke$arity$variadic = interleave_all__delegate;
  return interleave_all;
}();
plumbing.core.count_when = function count_when(pred, xs) {
  return cljs.core.count.call(null, cljs.core.filter.call(null, pred, xs));
};
plumbing.core.conj_when = function() {
  var conj_when = null;
  var conj_when__2 = function(coll, x) {
    if (cljs.core.truth_(x)) {
      return cljs.core.conj.call(null, coll, x);
    } else {
      return coll;
    }
  };
  var conj_when__3 = function() {
    var G__10840__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__10841 = conj_when.call(null, coll, x);
          var G__10842 = cljs.core.first.call(null, xs);
          var G__10843 = cljs.core.next.call(null, xs);
          coll = G__10841;
          x = G__10842;
          xs = G__10843;
          continue;
        } else {
          return conj_when.call(null, coll, x);
        }
        break;
      }
    };
    var G__10840 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__10840__delegate.call(this, coll, x, xs);
    };
    G__10840.cljs$lang$maxFixedArity = 2;
    G__10840.cljs$lang$applyTo = function(arglist__10844) {
      var coll = cljs.core.first(arglist__10844);
      arglist__10844 = cljs.core.next(arglist__10844);
      var x = cljs.core.first(arglist__10844);
      var xs = cljs.core.rest(arglist__10844);
      return G__10840__delegate(coll, x, xs);
    };
    G__10840.cljs$core$IFn$_invoke$arity$variadic = G__10840__delegate;
    return G__10840;
  }();
  conj_when = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj_when__2.call(this, coll, x);
      default:
        return conj_when__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_when.cljs$lang$maxFixedArity = 2;
  conj_when.cljs$lang$applyTo = conj_when__3.cljs$lang$applyTo;
  conj_when.cljs$core$IFn$_invoke$arity$2 = conj_when__2;
  conj_when.cljs$core$IFn$_invoke$arity$variadic = conj_when__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_when;
}();
plumbing.core.cons_when = function cons_when(x, s) {
  if (cljs.core.truth_(x)) {
    return cljs.core.cons.call(null, x, s);
  } else {
    return s;
  }
};
plumbing.core.rsort_by = cljs.core.comp.call(null, cljs.core.reverse, cljs.core.sort_by);
plumbing.core.swap_pair_BANG_ = function() {
  var swap_pair_BANG_ = null;
  var swap_pair_BANG___2 = function(a, f) {
    while (true) {
      var old_val = cljs.core.deref.call(null, a);
      var new_val = f.call(null, old_val);
      if (cljs.core.compare_and_set_BANG_.call(null, a, old_val, new_val)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old_val, new_val], null);
      } else {
        continue;
      }
      break;
    }
  };
  var swap_pair_BANG___3 = function() {
    var G__10846__delegate = function(a, f, args) {
      return swap_pair_BANG_.call(null, a, function(p1__10845_SHARP_) {
        return cljs.core.apply.call(null, f, p1__10845_SHARP_, args);
      });
    };
    var G__10846 = function(a, f, var_args) {
      var args = null;
      if (arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__10846__delegate.call(this, a, f, args);
    };
    G__10846.cljs$lang$maxFixedArity = 2;
    G__10846.cljs$lang$applyTo = function(arglist__10847) {
      var a = cljs.core.first(arglist__10847);
      arglist__10847 = cljs.core.next(arglist__10847);
      var f = cljs.core.first(arglist__10847);
      var args = cljs.core.rest(arglist__10847);
      return G__10846__delegate(a, f, args);
    };
    G__10846.cljs$core$IFn$_invoke$arity$variadic = G__10846__delegate;
    return G__10846;
  }();
  swap_pair_BANG_ = function(a, f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return swap_pair_BANG___2.call(this, a, f);
      default:
        return swap_pair_BANG___3.cljs$core$IFn$_invoke$arity$variadic(a, f, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_pair_BANG_.cljs$lang$maxFixedArity = 2;
  swap_pair_BANG_.cljs$lang$applyTo = swap_pair_BANG___3.cljs$lang$applyTo;
  swap_pair_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_pair_BANG___2;
  swap_pair_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_pair_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return swap_pair_BANG_;
}();
plumbing.core.get_and_set_BANG_ = function get_and_set_BANG_(a, new_val) {
  return cljs.core.first.call(null, plumbing.core.swap_pair_BANG_.call(null, a, cljs.core.constantly.call(null, new_val)));
};
plumbing.core.millis = function millis() {
  return(new Date).getTime();
};
plumbing.core.mapply = function() {
  var mapply = null;
  var mapply__2 = function(f, m) {
    return cljs.core.apply.call(null, f, cljs.core.apply.call(null, cljs.core.concat, m));
  };
  var mapply__3 = function() {
    var G__10848__delegate = function(f, arg, args) {
      return cljs.core.apply.call(null, f, arg, cljs.core.concat.call(null, cljs.core.butlast.call(null, args), cljs.core.apply.call(null, cljs.core.concat, cljs.core.last.call(null, args))));
    };
    var G__10848 = function(f, arg, var_args) {
      var args = null;
      if (arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__10848__delegate.call(this, f, arg, args);
    };
    G__10848.cljs$lang$maxFixedArity = 2;
    G__10848.cljs$lang$applyTo = function(arglist__10849) {
      var f = cljs.core.first(arglist__10849);
      arglist__10849 = cljs.core.next(arglist__10849);
      var arg = cljs.core.first(arglist__10849);
      var args = cljs.core.rest(arglist__10849);
      return G__10848__delegate(f, arg, args);
    };
    G__10848.cljs$core$IFn$_invoke$arity$variadic = G__10848__delegate;
    return G__10848;
  }();
  mapply = function(f, arg, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return mapply__2.call(this, f, arg);
      default:
        return mapply__3.cljs$core$IFn$_invoke$arity$variadic(f, arg, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapply.cljs$lang$maxFixedArity = 2;
  mapply.cljs$lang$applyTo = mapply__3.cljs$lang$applyTo;
  mapply.cljs$core$IFn$_invoke$arity$2 = mapply__2;
  mapply.cljs$core$IFn$_invoke$arity$variadic = mapply__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapply;
}();
goog.provide("om_tools.core");
goog.require("cljs.core");
goog.require("plumbing.core");
goog.require("plumbing.core");
goog.require("plumbing.fnk.schema");
goog.require("om.core");
goog.require("om.core");
om_tools.core.state_proxy = function state_proxy(owner) {
  if (cljs.core.truth_(owner)) {
    var get_state = function() {
      return om.core.get_state.call(null, owner);
    };
    if (typeof om_tools.core.t10313 !== "undefined") {
    } else {
      om_tools.core.t10313 = function(get_state, owner, state_proxy, meta10314) {
        this.get_state = get_state;
        this.owner = owner;
        this.state_proxy = state_proxy;
        this.meta10314 = meta10314;
        this.cljs$lang$protocol_mask$partition1$ = 98304;
        this.cljs$lang$protocol_mask$partition0$ = 425984;
      };
      om_tools.core.t10313.cljs$lang$type = true;
      om_tools.core.t10313.cljs$lang$ctorStr = "om-tools.core/t10313";
      om_tools.core.t10313.cljs$lang$ctorPrWriter = function(get_state) {
        return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
          return cljs.core._write.call(null, writer__4047__auto__, "om-tools.core/t10313");
        };
      }(get_state);
      om_tools.core.t10313.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(get_state) {
        return function(s, f) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null)));
        };
      }(get_state);
      om_tools.core.t10313.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(get_state) {
        return function(s, f, x) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null), x));
        };
      }(get_state);
      om_tools.core.t10313.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(get_state) {
        return function(s, f, x, y) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null), x, y));
        };
      }(get_state);
      om_tools.core.t10313.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(get_state) {
        return function(s, f, x, y, more) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, cljs.core.apply.call(null, f, self__.get_state.call(null), x, y, more));
        };
      }(get_state);
      om_tools.core.t10313.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(get_state) {
        return function(_, v) {
          var self__ = this;
          var ___$1 = this;
          return om.core.set_state_BANG_.call(null, self__.owner, v);
        };
      }(get_state);
      om_tools.core.t10313.prototype.cljs$core$IDeref$_deref$arity$1 = function(get_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.get_state.call(null);
        };
      }(get_state);
      om_tools.core.t10313.prototype.cljs$core$IMeta$_meta$arity$1 = function(get_state) {
        return function(_10315) {
          var self__ = this;
          var _10315__$1 = this;
          return self__.meta10314;
        };
      }(get_state);
      om_tools.core.t10313.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(get_state) {
        return function(_10315, meta10314__$1) {
          var self__ = this;
          var _10315__$1 = this;
          return new om_tools.core.t10313(self__.get_state, self__.owner, self__.state_proxy, meta10314__$1);
        };
      }(get_state);
      om_tools.core.__GT_t10313 = function(get_state) {
        return function __GT_t10313(get_state__$1, owner__$1, state_proxy__$1, meta10314) {
          return new om_tools.core.t10313(get_state__$1, owner__$1, state_proxy__$1, meta10314);
        };
      }(get_state);
    }
    return new om_tools.core.t10313(get_state, owner, state_proxy, null);
  } else {
    return null;
  }
};
om_tools.core.set_state_QMARK__BANG_ = function() {
  var set_state_QMARK__BANG_ = null;
  var set_state_QMARK__BANG___2 = function(owner, v) {
    if (cljs.core._EQ_.call(null, v, om.core.get_state.call(null, owner))) {
      return null;
    } else {
      return om.core.set_state_BANG_.call(null, owner, v);
    }
  };
  var set_state_QMARK__BANG___3 = function(owner, korks, v) {
    if (cljs.core._EQ_.call(null, v, om.core.get_state.call(null, owner, korks))) {
      return null;
    } else {
      return om.core.set_state_BANG_.call(null, owner, korks, v);
    }
  };
  set_state_QMARK__BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_QMARK__BANG___2.call(this, owner, korks);
      case 3:
        return set_state_QMARK__BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_QMARK__BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_QMARK__BANG___2;
  set_state_QMARK__BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_QMARK__BANG___3;
  return set_state_QMARK__BANG_;
}();
goog.provide("om_tools.dom");
goog.require("cljs.core");
goog.require("om.dom");
goog.require("clojure.string");
goog.require("clojure.string");
om_tools.dom.map_keys = function map_keys(f, m) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4196__auto__ = function iter__8362(s__8363) {
      return new cljs.core.LazySeq(null, function() {
        var s__8363__$1 = s__8363;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__8363__$1);
          if (temp__4092__auto__) {
            var s__8363__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__8363__$2)) {
              var c__4194__auto__ = cljs.core.chunk_first.call(null, s__8363__$2);
              var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
              var b__8365 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
              if (function() {
                var i__8364 = 0;
                while (true) {
                  if (i__8364 < size__4195__auto__) {
                    var vec__8368 = cljs.core._nth.call(null, c__4194__auto__, i__8364);
                    var k = cljs.core.nth.call(null, vec__8368, 0, null);
                    var v = cljs.core.nth.call(null, vec__8368, 1, null);
                    cljs.core.chunk_append.call(null, b__8365, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, k), v], null));
                    var G__8370 = i__8364 + 1;
                    i__8364 = G__8370;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8365), iter__8362.call(null, cljs.core.chunk_rest.call(null, s__8363__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8365), null);
              }
            } else {
              var vec__8369 = cljs.core.first.call(null, s__8363__$2);
              var k = cljs.core.nth.call(null, vec__8369, 0, null);
              var v = cljs.core.nth.call(null, vec__8369, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, k), v], null), iter__8362.call(null, cljs.core.rest.call(null, s__8363__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4196__auto__.call(null, m);
  }());
};
om_tools.dom.camel_case = function camel_case(s) {
  return clojure.string.replace.call(null, s, /-(\w)/, function(p1__8371_SHARP_) {
    return clojure.string.upper_case.call(null, cljs.core.second.call(null, p1__8371_SHARP_));
  });
};
om_tools.dom.opt_alias = function opt_alias(opt) {
  var G__8373 = opt;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "for", "for", 1014005819), G__8373)) {
    return new cljs.core.Keyword(null, "htmlFor", "htmlFor", 2249940112);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), G__8373)) {
      return new cljs.core.Keyword(null, "className", "className", 1004015509);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return opt;
      } else {
        return null;
      }
    }
  }
};
om_tools.dom.format_opt = function format_opt(opt) {
  return cljs.core.keyword.call(null, om_tools.dom.camel_case.call(null, cljs.core.name.call(null, om_tools.dom.opt_alias.call(null, opt))));
};
om_tools.dom.literal_QMARK_ = function literal_QMARK_(form) {
  return!(form instanceof cljs.core.Symbol || cljs.core.list_QMARK_.call(null, form));
};
om_tools.dom.possible_coll_QMARK_ = function possible_coll_QMARK_(form) {
  return cljs.core.coll_QMARK_.call(null, form) || (form instanceof cljs.core.Symbol || cljs.core.list_QMARK_.call(null, form));
};
om_tools.dom.form_tags = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "input", "input", -1540173437, null), new cljs.core.Symbol(null, "textarea", "textarea", 1651192051, null), new cljs.core.Symbol(null, "option", "option", 1644298798, null)], null);
om_tools.dom.el_ctor = function el_ctor(tag) {
  if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.partial.call(null, cljs.core._EQ_, tag), om_tools.dom.form_tags))) {
    return cljs.core.symbol.call(null, "om.dom", cljs.core.name.call(null, tag));
  } else {
    return cljs.core.symbol.call(null, "js", [cljs.core.str("React.DOM."), cljs.core.str(cljs.core.name.call(null, tag))].join(""));
  }
};
om_tools.dom.valid_opts_QMARK_ = function valid_opts_QMARK_(opts) {
  return opts == null || cljs.core.map_QMARK_.call(null, opts);
};
om_tools.dom.element = function element(ctor, opts, children) {
  var vec__8375 = om_tools.dom.valid_opts_QMARK_.call(null, opts) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.clj__GT_js.call(null, om_tools.dom.map_keys.call(null, om_tools.dom.format_opt, opts)), children], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.cons.call(null, opts, children)], null);
  var opts__$1 = cljs.core.nth.call(null, vec__8375, 0, null);
  var children__$1 = cljs.core.nth.call(null, vec__8375, 1, null);
  return cljs.core.apply.call(null, ctor, cljs.core.flatten.call(null, cljs.core.cons.call(null, opts__$1, children__$1)));
};
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function class_match_QMARK_(class_name, class$, idx) {
  var and__3467__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__3467__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__3467__auto__;
  }
};
dommy.attrs.class_index = function class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__11755 = i + class$.length;
        start_from = G__11755;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4090__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var class_list = temp__4090__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4092__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4092__auto__)) {
      var class_name = temp__4092__auto__;
      var temp__4092__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4092__auto____$1)) {
        var i = temp__4092__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function() {
  var add_class_BANG_ = null;
  var add_class_BANG___2 = function(elem, classes) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var classes__$1 = clojure.string.trim.call(null, cljs.core.name.call(null, classes));
    if (cljs.core.seq.call(null, classes__$1)) {
      var temp__4090__auto___11780 = elem__$1.classList;
      if (cljs.core.truth_(temp__4090__auto___11780)) {
        var class_list_11781 = temp__4090__auto___11780;
        var seq__11768_11782 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__11769_11783 = null;
        var count__11770_11784 = 0;
        var i__11771_11785 = 0;
        while (true) {
          if (i__11771_11785 < count__11770_11784) {
            var class_11786 = cljs.core._nth.call(null, chunk__11769_11783, i__11771_11785);
            class_list_11781.add(class_11786);
            var G__11787 = seq__11768_11782;
            var G__11788 = chunk__11769_11783;
            var G__11789 = count__11770_11784;
            var G__11790 = i__11771_11785 + 1;
            seq__11768_11782 = G__11787;
            chunk__11769_11783 = G__11788;
            count__11770_11784 = G__11789;
            i__11771_11785 = G__11790;
            continue;
          } else {
            var temp__4092__auto___11791 = cljs.core.seq.call(null, seq__11768_11782);
            if (temp__4092__auto___11791) {
              var seq__11768_11792__$1 = temp__4092__auto___11791;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11768_11792__$1)) {
                var c__4227__auto___11793 = cljs.core.chunk_first.call(null, seq__11768_11792__$1);
                var G__11794 = cljs.core.chunk_rest.call(null, seq__11768_11792__$1);
                var G__11795 = c__4227__auto___11793;
                var G__11796 = cljs.core.count.call(null, c__4227__auto___11793);
                var G__11797 = 0;
                seq__11768_11782 = G__11794;
                chunk__11769_11783 = G__11795;
                count__11770_11784 = G__11796;
                i__11771_11785 = G__11797;
                continue;
              } else {
                var class_11798 = cljs.core.first.call(null, seq__11768_11792__$1);
                class_list_11781.add(class_11798);
                var G__11799 = cljs.core.next.call(null, seq__11768_11792__$1);
                var G__11800 = null;
                var G__11801 = 0;
                var G__11802 = 0;
                seq__11768_11782 = G__11799;
                chunk__11769_11783 = G__11800;
                count__11770_11784 = G__11801;
                i__11771_11785 = G__11802;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        var class_name_11803 = elem__$1.className;
        var seq__11772_11804 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__11773_11805 = null;
        var count__11774_11806 = 0;
        var i__11775_11807 = 0;
        while (true) {
          if (i__11775_11807 < count__11774_11806) {
            var class_11808 = cljs.core._nth.call(null, chunk__11773_11805, i__11775_11807);
            if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_11803, class_11808))) {
            } else {
              elem__$1.className = class_name_11803 === "" ? class_11808 : [cljs.core.str(class_name_11803), cljs.core.str(" "), cljs.core.str(class_11808)].join("");
            }
            var G__11809 = seq__11772_11804;
            var G__11810 = chunk__11773_11805;
            var G__11811 = count__11774_11806;
            var G__11812 = i__11775_11807 + 1;
            seq__11772_11804 = G__11809;
            chunk__11773_11805 = G__11810;
            count__11774_11806 = G__11811;
            i__11775_11807 = G__11812;
            continue;
          } else {
            var temp__4092__auto___11813 = cljs.core.seq.call(null, seq__11772_11804);
            if (temp__4092__auto___11813) {
              var seq__11772_11814__$1 = temp__4092__auto___11813;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11772_11814__$1)) {
                var c__4227__auto___11815 = cljs.core.chunk_first.call(null, seq__11772_11814__$1);
                var G__11816 = cljs.core.chunk_rest.call(null, seq__11772_11814__$1);
                var G__11817 = c__4227__auto___11815;
                var G__11818 = cljs.core.count.call(null, c__4227__auto___11815);
                var G__11819 = 0;
                seq__11772_11804 = G__11816;
                chunk__11773_11805 = G__11817;
                count__11774_11806 = G__11818;
                i__11775_11807 = G__11819;
                continue;
              } else {
                var class_11820 = cljs.core.first.call(null, seq__11772_11814__$1);
                if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_11803, class_11820))) {
                } else {
                  elem__$1.className = class_name_11803 === "" ? class_11820 : [cljs.core.str(class_name_11803), cljs.core.str(" "), cljs.core.str(class_11820)].join("");
                }
                var G__11821 = cljs.core.next.call(null, seq__11772_11814__$1);
                var G__11822 = null;
                var G__11823 = 0;
                var G__11824 = 0;
                seq__11772_11804 = G__11821;
                chunk__11773_11805 = G__11822;
                count__11774_11806 = G__11823;
                i__11775_11807 = G__11824;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
    } else {
    }
    return elem__$1;
  };
  var add_class_BANG___3 = function() {
    var G__11825__delegate = function(elem, classes, more_classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__11776_11826 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
      var chunk__11777_11827 = null;
      var count__11778_11828 = 0;
      var i__11779_11829 = 0;
      while (true) {
        if (i__11779_11829 < count__11778_11828) {
          var c_11830 = cljs.core._nth.call(null, chunk__11777_11827, i__11779_11829);
          add_class_BANG_.call(null, elem__$1, c_11830);
          var G__11831 = seq__11776_11826;
          var G__11832 = chunk__11777_11827;
          var G__11833 = count__11778_11828;
          var G__11834 = i__11779_11829 + 1;
          seq__11776_11826 = G__11831;
          chunk__11777_11827 = G__11832;
          count__11778_11828 = G__11833;
          i__11779_11829 = G__11834;
          continue;
        } else {
          var temp__4092__auto___11835 = cljs.core.seq.call(null, seq__11776_11826);
          if (temp__4092__auto___11835) {
            var seq__11776_11836__$1 = temp__4092__auto___11835;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11776_11836__$1)) {
              var c__4227__auto___11837 = cljs.core.chunk_first.call(null, seq__11776_11836__$1);
              var G__11838 = cljs.core.chunk_rest.call(null, seq__11776_11836__$1);
              var G__11839 = c__4227__auto___11837;
              var G__11840 = cljs.core.count.call(null, c__4227__auto___11837);
              var G__11841 = 0;
              seq__11776_11826 = G__11838;
              chunk__11777_11827 = G__11839;
              count__11778_11828 = G__11840;
              i__11779_11829 = G__11841;
              continue;
            } else {
              var c_11842 = cljs.core.first.call(null, seq__11776_11836__$1);
              add_class_BANG_.call(null, elem__$1, c_11842);
              var G__11843 = cljs.core.next.call(null, seq__11776_11836__$1);
              var G__11844 = null;
              var G__11845 = 0;
              var G__11846 = 0;
              seq__11776_11826 = G__11843;
              chunk__11777_11827 = G__11844;
              count__11778_11828 = G__11845;
              i__11779_11829 = G__11846;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__11825 = function(elem, classes, var_args) {
      var more_classes = null;
      if (arguments.length > 2) {
        more_classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11825__delegate.call(this, elem, classes, more_classes);
    };
    G__11825.cljs$lang$maxFixedArity = 2;
    G__11825.cljs$lang$applyTo = function(arglist__11847) {
      var elem = cljs.core.first(arglist__11847);
      arglist__11847 = cljs.core.next(arglist__11847);
      var classes = cljs.core.first(arglist__11847);
      var more_classes = cljs.core.rest(arglist__11847);
      return G__11825__delegate(elem, classes, more_classes);
    };
    G__11825.cljs$core$IFn$_invoke$arity$variadic = G__11825__delegate;
    return G__11825;
  }();
  add_class_BANG_ = function(elem, classes, var_args) {
    var more_classes = var_args;
    switch(arguments.length) {
      case 2:
        return add_class_BANG___2.call(this, elem, classes);
      default:
        return add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, classes, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_class_BANG_.cljs$lang$maxFixedArity = 2;
  add_class_BANG_.cljs$lang$applyTo = add_class_BANG___3.cljs$lang$applyTo;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = add_class_BANG___2;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return add_class_BANG_;
}();
dommy.attrs.remove_class_str = function remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4090__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var i = temp__4090__auto__;
      var G__11848 = function() {
        var end = i + class$.length;
        return[cljs.core.str(end < class_len ? [cljs.core.str(class_name.substring(0, i)), cljs.core.str(class_name.substr(end + 1))].join("") : class_name.substring(0, i - 1))].join("");
      }();
      class_name = G__11848;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function() {
  var remove_class_BANG_ = null;
  var remove_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4090__auto___11857 = elem__$1.classList;
    if (cljs.core.truth_(temp__4090__auto___11857)) {
      var class_list_11858 = temp__4090__auto___11857;
      class_list_11858.remove(class$__$1);
    } else {
      var class_name_11859 = elem__$1.className;
      var new_class_name_11860 = dommy.attrs.remove_class_str.call(null, class_name_11859, class$__$1);
      if (class_name_11859 === new_class_name_11860) {
      } else {
        elem__$1.className = new_class_name_11860;
      }
    }
    return elem__$1;
  };
  var remove_class_BANG___3 = function() {
    var G__11861__delegate = function(elem, class$, classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__11853 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
      var chunk__11854 = null;
      var count__11855 = 0;
      var i__11856 = 0;
      while (true) {
        if (i__11856 < count__11855) {
          var c = cljs.core._nth.call(null, chunk__11854, i__11856);
          remove_class_BANG_.call(null, elem__$1, c);
          var G__11862 = seq__11853;
          var G__11863 = chunk__11854;
          var G__11864 = count__11855;
          var G__11865 = i__11856 + 1;
          seq__11853 = G__11862;
          chunk__11854 = G__11863;
          count__11855 = G__11864;
          i__11856 = G__11865;
          continue;
        } else {
          var temp__4092__auto__ = cljs.core.seq.call(null, seq__11853);
          if (temp__4092__auto__) {
            var seq__11853__$1 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11853__$1)) {
              var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__11853__$1);
              var G__11866 = cljs.core.chunk_rest.call(null, seq__11853__$1);
              var G__11867 = c__4227__auto__;
              var G__11868 = cljs.core.count.call(null, c__4227__auto__);
              var G__11869 = 0;
              seq__11853 = G__11866;
              chunk__11854 = G__11867;
              count__11855 = G__11868;
              i__11856 = G__11869;
              continue;
            } else {
              var c = cljs.core.first.call(null, seq__11853__$1);
              remove_class_BANG_.call(null, elem__$1, c);
              var G__11870 = cljs.core.next.call(null, seq__11853__$1);
              var G__11871 = null;
              var G__11872 = 0;
              var G__11873 = 0;
              seq__11853 = G__11870;
              chunk__11854 = G__11871;
              count__11855 = G__11872;
              i__11856 = G__11873;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
    var G__11861 = function(elem, class$, var_args) {
      var classes = null;
      if (arguments.length > 2) {
        classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11861__delegate.call(this, elem, class$, classes);
    };
    G__11861.cljs$lang$maxFixedArity = 2;
    G__11861.cljs$lang$applyTo = function(arglist__11874) {
      var elem = cljs.core.first(arglist__11874);
      arglist__11874 = cljs.core.next(arglist__11874);
      var class$ = cljs.core.first(arglist__11874);
      var classes = cljs.core.rest(arglist__11874);
      return G__11861__delegate(elem, class$, classes);
    };
    G__11861.cljs$core$IFn$_invoke$arity$variadic = G__11861__delegate;
    return G__11861;
  }();
  remove_class_BANG_ = function(elem, class$, var_args) {
    var classes = var_args;
    switch(arguments.length) {
      case 2:
        return remove_class_BANG___2.call(this, elem, class$);
      default:
        return remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, class$, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_class_BANG_.cljs$lang$maxFixedArity = 2;
  remove_class_BANG_.cljs$lang$applyTo = remove_class_BANG___3.cljs$lang$applyTo;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_class_BANG___2;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_class_BANG_;
}();
dommy.attrs.toggle_class_BANG_ = function() {
  var toggle_class_BANG_ = null;
  var toggle_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4090__auto___11875 = elem__$1.classList;
    if (cljs.core.truth_(temp__4090__auto___11875)) {
      var class_list_11876 = temp__4090__auto___11875;
      class_list_11876.toggle(class$__$1);
    } else {
      toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
    }
    return elem__$1;
  };
  var toggle_class_BANG___3 = function(elem, class$, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
    } else {
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
    }
    return elem__$1;
  };
  toggle_class_BANG_ = function(elem, class$, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_class_BANG___2.call(this, elem, class$);
      case 3:
        return toggle_class_BANG___3.call(this, elem, class$, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_class_BANG___2;
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_class_BANG___3;
  return toggle_class_BANG_;
}();
dommy.attrs.style_str = function style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__11879) {
      var vec__11880 = p__11879;
      var k = cljs.core.nth.call(null, vec__11880, 0, null);
      var v = cljs.core.nth.call(null, vec__11880, 1, null);
      return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str(":"), cljs.core.str(cljs.core.name.call(null, v)), cljs.core.str(";")].join("");
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var style = elem__$1.style;
    var seq__11887_11893 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__11888_11894 = null;
    var count__11889_11895 = 0;
    var i__11890_11896 = 0;
    while (true) {
      if (i__11890_11896 < count__11889_11895) {
        var vec__11891_11897 = cljs.core._nth.call(null, chunk__11888_11894, i__11890_11896);
        var k_11898 = cljs.core.nth.call(null, vec__11891_11897, 0, null);
        var v_11899 = cljs.core.nth.call(null, vec__11891_11897, 1, null);
        style[cljs.core.name.call(null, k_11898)] = v_11899;
        var G__11900 = seq__11887_11893;
        var G__11901 = chunk__11888_11894;
        var G__11902 = count__11889_11895;
        var G__11903 = i__11890_11896 + 1;
        seq__11887_11893 = G__11900;
        chunk__11888_11894 = G__11901;
        count__11889_11895 = G__11902;
        i__11890_11896 = G__11903;
        continue;
      } else {
        var temp__4092__auto___11904 = cljs.core.seq.call(null, seq__11887_11893);
        if (temp__4092__auto___11904) {
          var seq__11887_11905__$1 = temp__4092__auto___11904;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11887_11905__$1)) {
            var c__4227__auto___11906 = cljs.core.chunk_first.call(null, seq__11887_11905__$1);
            var G__11907 = cljs.core.chunk_rest.call(null, seq__11887_11905__$1);
            var G__11908 = c__4227__auto___11906;
            var G__11909 = cljs.core.count.call(null, c__4227__auto___11906);
            var G__11910 = 0;
            seq__11887_11893 = G__11907;
            chunk__11888_11894 = G__11908;
            count__11889_11895 = G__11909;
            i__11890_11896 = G__11910;
            continue;
          } else {
            var vec__11892_11911 = cljs.core.first.call(null, seq__11887_11905__$1);
            var k_11912 = cljs.core.nth.call(null, vec__11892_11911, 0, null);
            var v_11913 = cljs.core.nth.call(null, vec__11892_11911, 1, null);
            style[cljs.core.name.call(null, k_11912)] = v_11913;
            var G__11914 = cljs.core.next.call(null, seq__11887_11905__$1);
            var G__11915 = null;
            var G__11916 = 0;
            var G__11917 = 0;
            seq__11887_11893 = G__11914;
            chunk__11888_11894 = G__11915;
            count__11889_11895 = G__11916;
            i__11890_11896 = G__11917;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_style_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_style_BANG___delegate.call(this, elem, kvs);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 1;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__11918) {
    var elem = cljs.core.first(arglist__11918);
    var kvs = cljs.core.rest(arglist__11918);
    return set_style_BANG___delegate(elem, kvs);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
dommy.attrs.style = function style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -1640531420, null)))].join(""));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function() {
  var set_px_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var seq__11925_11931 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__11926_11932 = null;
    var count__11927_11933 = 0;
    var i__11928_11934 = 0;
    while (true) {
      if (i__11928_11934 < count__11927_11933) {
        var vec__11929_11935 = cljs.core._nth.call(null, chunk__11926_11932, i__11928_11934);
        var k_11936 = cljs.core.nth.call(null, vec__11929_11935, 0, null);
        var v_11937 = cljs.core.nth.call(null, vec__11929_11935, 1, null);
        dommy.attrs.set_style_BANG_.call(null, elem__$1, k_11936, [cljs.core.str(v_11937), cljs.core.str("px")].join(""));
        var G__11938 = seq__11925_11931;
        var G__11939 = chunk__11926_11932;
        var G__11940 = count__11927_11933;
        var G__11941 = i__11928_11934 + 1;
        seq__11925_11931 = G__11938;
        chunk__11926_11932 = G__11939;
        count__11927_11933 = G__11940;
        i__11928_11934 = G__11941;
        continue;
      } else {
        var temp__4092__auto___11942 = cljs.core.seq.call(null, seq__11925_11931);
        if (temp__4092__auto___11942) {
          var seq__11925_11943__$1 = temp__4092__auto___11942;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11925_11943__$1)) {
            var c__4227__auto___11944 = cljs.core.chunk_first.call(null, seq__11925_11943__$1);
            var G__11945 = cljs.core.chunk_rest.call(null, seq__11925_11943__$1);
            var G__11946 = c__4227__auto___11944;
            var G__11947 = cljs.core.count.call(null, c__4227__auto___11944);
            var G__11948 = 0;
            seq__11925_11931 = G__11945;
            chunk__11926_11932 = G__11946;
            count__11927_11933 = G__11947;
            i__11928_11934 = G__11948;
            continue;
          } else {
            var vec__11930_11949 = cljs.core.first.call(null, seq__11925_11943__$1);
            var k_11950 = cljs.core.nth.call(null, vec__11930_11949, 0, null);
            var v_11951 = cljs.core.nth.call(null, vec__11930_11949, 1, null);
            dommy.attrs.set_style_BANG_.call(null, elem__$1, k_11950, [cljs.core.str(v_11951), cljs.core.str("px")].join(""));
            var G__11952 = cljs.core.next.call(null, seq__11925_11943__$1);
            var G__11953 = null;
            var G__11954 = 0;
            var G__11955 = 0;
            seq__11925_11931 = G__11952;
            chunk__11926_11932 = G__11953;
            count__11927_11933 = G__11954;
            i__11928_11934 = G__11955;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_px_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_px_BANG___delegate.call(this, elem, kvs);
  };
  set_px_BANG_.cljs$lang$maxFixedArity = 1;
  set_px_BANG_.cljs$lang$applyTo = function(arglist__11956) {
    var elem = cljs.core.first(arglist__11956);
    var kvs = cljs.core.rest(arglist__11956);
    return set_px_BANG___delegate(elem, kvs);
  };
  set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_px_BANG___delegate;
  return set_px_BANG_;
}();
dommy.attrs.px = function px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function() {
  var set_attr_BANG_ = null;
  var set_attr_BANG___2 = function(elem, k) {
    return set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
  };
  var set_attr_BANG___3 = function(elem, k, v) {
    if (cljs.core.truth_(v)) {
      if (cljs.core.fn_QMARK_.call(null, v)) {
        var G__11965 = dommy.template.__GT_node_like.call(null, elem);
        G__11965[cljs.core.name.call(null, k)] = v;
        return G__11965;
      } else {
        var G__11966 = dommy.template.__GT_node_like.call(null, elem);
        G__11966.setAttribute(cljs.core.name.call(null, k), k === new cljs.core.Keyword(null, "style", "style", 1123684643) ? dommy.attrs.style_str.call(null, v) : v);
        return G__11966;
      }
    } else {
      return null;
    }
  };
  var set_attr_BANG___4 = function() {
    var G__11973__delegate = function(elem, k, v, kvs) {
      if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
      }
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__11967_11974 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
      var chunk__11968_11975 = null;
      var count__11969_11976 = 0;
      var i__11970_11977 = 0;
      while (true) {
        if (i__11970_11977 < count__11969_11976) {
          var vec__11971_11978 = cljs.core._nth.call(null, chunk__11968_11975, i__11970_11977);
          var k_11979__$1 = cljs.core.nth.call(null, vec__11971_11978, 0, null);
          var v_11980__$1 = cljs.core.nth.call(null, vec__11971_11978, 1, null);
          set_attr_BANG_.call(null, elem__$1, k_11979__$1, v_11980__$1);
          var G__11981 = seq__11967_11974;
          var G__11982 = chunk__11968_11975;
          var G__11983 = count__11969_11976;
          var G__11984 = i__11970_11977 + 1;
          seq__11967_11974 = G__11981;
          chunk__11968_11975 = G__11982;
          count__11969_11976 = G__11983;
          i__11970_11977 = G__11984;
          continue;
        } else {
          var temp__4092__auto___11985 = cljs.core.seq.call(null, seq__11967_11974);
          if (temp__4092__auto___11985) {
            var seq__11967_11986__$1 = temp__4092__auto___11985;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11967_11986__$1)) {
              var c__4227__auto___11987 = cljs.core.chunk_first.call(null, seq__11967_11986__$1);
              var G__11988 = cljs.core.chunk_rest.call(null, seq__11967_11986__$1);
              var G__11989 = c__4227__auto___11987;
              var G__11990 = cljs.core.count.call(null, c__4227__auto___11987);
              var G__11991 = 0;
              seq__11967_11974 = G__11988;
              chunk__11968_11975 = G__11989;
              count__11969_11976 = G__11990;
              i__11970_11977 = G__11991;
              continue;
            } else {
              var vec__11972_11992 = cljs.core.first.call(null, seq__11967_11986__$1);
              var k_11993__$1 = cljs.core.nth.call(null, vec__11972_11992, 0, null);
              var v_11994__$1 = cljs.core.nth.call(null, vec__11972_11992, 1, null);
              set_attr_BANG_.call(null, elem__$1, k_11993__$1, v_11994__$1);
              var G__11995 = cljs.core.next.call(null, seq__11967_11986__$1);
              var G__11996 = null;
              var G__11997 = 0;
              var G__11998 = 0;
              seq__11967_11974 = G__11995;
              chunk__11968_11975 = G__11996;
              count__11969_11976 = G__11997;
              i__11970_11977 = G__11998;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__11973 = function(elem, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11973__delegate.call(this, elem, k, v, kvs);
    };
    G__11973.cljs$lang$maxFixedArity = 3;
    G__11973.cljs$lang$applyTo = function(arglist__11999) {
      var elem = cljs.core.first(arglist__11999);
      arglist__11999 = cljs.core.next(arglist__11999);
      var k = cljs.core.first(arglist__11999);
      arglist__11999 = cljs.core.next(arglist__11999);
      var v = cljs.core.first(arglist__11999);
      var kvs = cljs.core.rest(arglist__11999);
      return G__11973__delegate(elem, k, v, kvs);
    };
    G__11973.cljs$core$IFn$_invoke$arity$variadic = G__11973__delegate;
    return G__11973;
  }();
  set_attr_BANG_ = function(elem, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 2:
        return set_attr_BANG___2.call(this, elem, k);
      case 3:
        return set_attr_BANG___3.call(this, elem, k, v);
      default:
        return set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic(elem, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 3;
  set_attr_BANG_.cljs$lang$applyTo = set_attr_BANG___4.cljs$lang$applyTo;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_attr_BANG___2;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_attr_BANG___3;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return set_attr_BANG_;
}();
dommy.attrs.remove_attr_BANG_ = function() {
  var remove_attr_BANG_ = null;
  var remove_attr_BANG___2 = function(elem, k) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", 1108647146), null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), null], null), null)).call(null, k))) {
      elem__$1.className = "";
    } else {
      elem__$1.removeAttribute(cljs.core.name.call(null, k));
    }
    return elem__$1;
  };
  var remove_attr_BANG___3 = function() {
    var G__12008__delegate = function(elem, k, ks) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__12004_12009 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
      var chunk__12005_12010 = null;
      var count__12006_12011 = 0;
      var i__12007_12012 = 0;
      while (true) {
        if (i__12007_12012 < count__12006_12011) {
          var k_12013__$1 = cljs.core._nth.call(null, chunk__12005_12010, i__12007_12012);
          remove_attr_BANG_.call(null, elem__$1, k_12013__$1);
          var G__12014 = seq__12004_12009;
          var G__12015 = chunk__12005_12010;
          var G__12016 = count__12006_12011;
          var G__12017 = i__12007_12012 + 1;
          seq__12004_12009 = G__12014;
          chunk__12005_12010 = G__12015;
          count__12006_12011 = G__12016;
          i__12007_12012 = G__12017;
          continue;
        } else {
          var temp__4092__auto___12018 = cljs.core.seq.call(null, seq__12004_12009);
          if (temp__4092__auto___12018) {
            var seq__12004_12019__$1 = temp__4092__auto___12018;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12004_12019__$1)) {
              var c__4227__auto___12020 = cljs.core.chunk_first.call(null, seq__12004_12019__$1);
              var G__12021 = cljs.core.chunk_rest.call(null, seq__12004_12019__$1);
              var G__12022 = c__4227__auto___12020;
              var G__12023 = cljs.core.count.call(null, c__4227__auto___12020);
              var G__12024 = 0;
              seq__12004_12009 = G__12021;
              chunk__12005_12010 = G__12022;
              count__12006_12011 = G__12023;
              i__12007_12012 = G__12024;
              continue;
            } else {
              var k_12025__$1 = cljs.core.first.call(null, seq__12004_12019__$1);
              remove_attr_BANG_.call(null, elem__$1, k_12025__$1);
              var G__12026 = cljs.core.next.call(null, seq__12004_12019__$1);
              var G__12027 = null;
              var G__12028 = 0;
              var G__12029 = 0;
              seq__12004_12009 = G__12026;
              chunk__12005_12010 = G__12027;
              count__12006_12011 = G__12028;
              i__12007_12012 = G__12029;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__12008 = function(elem, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12008__delegate.call(this, elem, k, ks);
    };
    G__12008.cljs$lang$maxFixedArity = 2;
    G__12008.cljs$lang$applyTo = function(arglist__12030) {
      var elem = cljs.core.first(arglist__12030);
      arglist__12030 = cljs.core.next(arglist__12030);
      var k = cljs.core.first(arglist__12030);
      var ks = cljs.core.rest(arglist__12030);
      return G__12008__delegate(elem, k, ks);
    };
    G__12008.cljs$core$IFn$_invoke$arity$variadic = G__12008__delegate;
    return G__12008;
  }();
  remove_attr_BANG_ = function(elem, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return remove_attr_BANG___2.call(this, elem, k);
      default:
        return remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
  remove_attr_BANG_.cljs$lang$applyTo = remove_attr_BANG___3.cljs$lang$applyTo;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_attr_BANG___2;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_attr_BANG_;
}();
dommy.attrs.attr = function attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(cljs.core.name.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function() {
  var toggle_attr_BANG_ = null;
  var toggle_attr_BANG___2 = function(elem, k) {
    return toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
  };
  var toggle_attr_BANG___3 = function(elem, k, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
    } else {
      return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
    }
  };
  toggle_attr_BANG_ = function(elem, k, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_attr_BANG___2.call(this, elem, k);
      case 3:
        return toggle_attr_BANG___3.call(this, elem, k, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_attr_BANG___2;
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_attr_BANG___3;
  return toggle_attr_BANG_;
}();
dommy.attrs.hidden_QMARK_ = function hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function() {
  var toggle_BANG_ = null;
  var toggle_BANG___1 = function(elem) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
    return elem__$1;
  };
  var toggle_BANG___2 = function(elem, show_QMARK_) {
    var G__12032 = dommy.template.__GT_node_like.call(null, elem);
    G__12032.style.display = show_QMARK_ ? "" : "none";
    return G__12032;
  };
  toggle_BANG_ = function(elem, show_QMARK_) {
    switch(arguments.length) {
      case 1:
        return toggle_BANG___1.call(this, elem);
      case 2:
        return toggle_BANG___2.call(this, elem, show_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = toggle_BANG___1;
  toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_BANG___2;
  return toggle_BANG_;
}();
dommy.attrs.hide_BANG_ = function hide_BANG_(elem) {
  var G__12034 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__12034, false);
  return G__12034;
};
dommy.attrs.show_BANG_ = function show_BANG_(elem) {
  var G__12036 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__12036, true);
  return G__12036;
};
dommy.attrs.bounding_client_rect = function bounding_client_rect(elem) {
  return cljs.core.js__GT_clj.call(null, function() {
    var G__12038 = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
    G__12038["constructor"] = Object;
    return G__12038;
  }(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
};
dommy.attrs.scroll_into_view = function scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", 1014019271)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["svg", null, "line", null], null), null);
dommy.template.PElement = function() {
  var obj11602 = {};
  return obj11602;
}();
dommy.template._elem = function _elem(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = dommy.template._elem[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = dommy.template._elem["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function base_element(node_key) {
  var node_str = cljs.core.name.call(null, node_key);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : new cljs.core.Keyword(null, "else", "else", 1017020587) ? node_str : null;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_11605 = node_str.substring(base_idx);
    while (true) {
      var next_idx_11606 = dommy.template.next_css_index.call(null, str_11605, 1);
      var frag_11607 = next_idx_11606 >= 0 ? str_11605.substring(0, next_idx_11606) : str_11605;
      var G__11604_11608 = frag_11607.charAt(0);
      if (cljs.core._EQ_.call(null, "#", G__11604_11608)) {
        node.setAttribute("id", frag_11607.substring(1));
      } else {
        if (cljs.core._EQ_.call(null, ".", G__11604_11608)) {
          dommy.attrs.add_class_BANG_.call(null, node, frag_11607.substring(1));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(frag_11607.charAt(0))].join(""));
          } else {
          }
        }
      }
      if (next_idx_11606 >= 0) {
        var G__11609 = str_11605.substring(next_idx_11606);
        str_11605 = G__11609;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function throw_unable_to_make_node(node_data) {
  throw[cljs.core.str("Don't know how to make node from: "), cljs.core.str(cljs.core.pr_str.call(null, node_data))].join("");
};
dommy.template.__GT_document_fragment = function() {
  var __GT_document_fragment = null;
  var __GT_document_fragment__1 = function(data) {
    return __GT_document_fragment.call(null, document.createDocumentFragment(), data);
  };
  var __GT_document_fragment__2 = function(result_frag, data) {
    if (function() {
      var G__11615 = data;
      if (G__11615) {
        var bit__4129__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3479__auto__ = bit__4129__auto__;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return G__11615.dommy$template$PElement$;
          }
        }())) {
          return true;
        } else {
          if (!G__11615.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11615);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11615);
      }
    }()) {
      result_frag.appendChild(dommy.template._elem.call(null, data));
      return result_frag;
    } else {
      if (cljs.core.seq_QMARK_.call(null, data)) {
        var seq__11616_11620 = cljs.core.seq.call(null, data);
        var chunk__11617_11621 = null;
        var count__11618_11622 = 0;
        var i__11619_11623 = 0;
        while (true) {
          if (i__11619_11623 < count__11618_11622) {
            var child_11624 = cljs.core._nth.call(null, chunk__11617_11621, i__11619_11623);
            __GT_document_fragment.call(null, result_frag, child_11624);
            var G__11625 = seq__11616_11620;
            var G__11626 = chunk__11617_11621;
            var G__11627 = count__11618_11622;
            var G__11628 = i__11619_11623 + 1;
            seq__11616_11620 = G__11625;
            chunk__11617_11621 = G__11626;
            count__11618_11622 = G__11627;
            i__11619_11623 = G__11628;
            continue;
          } else {
            var temp__4092__auto___11629 = cljs.core.seq.call(null, seq__11616_11620);
            if (temp__4092__auto___11629) {
              var seq__11616_11630__$1 = temp__4092__auto___11629;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11616_11630__$1)) {
                var c__4227__auto___11631 = cljs.core.chunk_first.call(null, seq__11616_11630__$1);
                var G__11632 = cljs.core.chunk_rest.call(null, seq__11616_11630__$1);
                var G__11633 = c__4227__auto___11631;
                var G__11634 = cljs.core.count.call(null, c__4227__auto___11631);
                var G__11635 = 0;
                seq__11616_11620 = G__11632;
                chunk__11617_11621 = G__11633;
                count__11618_11622 = G__11634;
                i__11619_11623 = G__11635;
                continue;
              } else {
                var child_11636 = cljs.core.first.call(null, seq__11616_11630__$1);
                __GT_document_fragment.call(null, result_frag, child_11636);
                var G__11637 = cljs.core.next.call(null, seq__11616_11630__$1);
                var G__11638 = null;
                var G__11639 = 0;
                var G__11640 = 0;
                seq__11616_11620 = G__11637;
                chunk__11617_11621 = G__11638;
                count__11618_11622 = G__11639;
                i__11619_11623 = G__11640;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return result_frag;
      } else {
        if (data == null) {
          return result_frag;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return dommy.template.throw_unable_to_make_node.call(null, data);
          } else {
            return null;
          }
        }
      }
    }
  };
  __GT_document_fragment = function(result_frag, data) {
    switch(arguments.length) {
      case 1:
        return __GT_document_fragment__1.call(this, result_frag);
      case 2:
        return __GT_document_fragment__2.call(this, result_frag, data);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = __GT_document_fragment__1;
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = __GT_document_fragment__2;
  return __GT_document_fragment;
}();
dommy.template.__GT_node_like = function __GT_node_like(data) {
  if (function() {
    var G__11642 = data;
    if (G__11642) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__11642.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__11642.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11642);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11642);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function compound_element(p__11643) {
  var vec__11663 = p__11643;
  var tag_name = cljs.core.nth.call(null, vec__11663, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__11663, 1, null);
  var children = cljs.core.nthnext.call(null, vec__11663, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__11665 = maybe_attrs;
    if (G__11665) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__11665.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__11665.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11665);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11665);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__11666_11682 = cljs.core.seq.call(null, attrs);
  var chunk__11667_11683 = null;
  var count__11668_11684 = 0;
  var i__11669_11685 = 0;
  while (true) {
    if (i__11669_11685 < count__11668_11684) {
      var vec__11670_11686 = cljs.core._nth.call(null, chunk__11667_11683, i__11669_11685);
      var k_11687 = cljs.core.nth.call(null, vec__11670_11686, 0, null);
      var v_11688 = cljs.core.nth.call(null, vec__11670_11686, 1, null);
      var G__11671_11689 = k_11687;
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), G__11671_11689)) {
        var seq__11672_11690 = cljs.core.seq.call(null, v_11688);
        var chunk__11673_11691 = null;
        var count__11674_11692 = 0;
        var i__11675_11693 = 0;
        while (true) {
          if (i__11675_11693 < count__11674_11692) {
            var c_11694 = cljs.core._nth.call(null, chunk__11673_11691, i__11675_11693);
            dommy.attrs.add_class_BANG_.call(null, n, c_11694);
            var G__11695 = seq__11672_11690;
            var G__11696 = chunk__11673_11691;
            var G__11697 = count__11674_11692;
            var G__11698 = i__11675_11693 + 1;
            seq__11672_11690 = G__11695;
            chunk__11673_11691 = G__11696;
            count__11674_11692 = G__11697;
            i__11675_11693 = G__11698;
            continue;
          } else {
            var temp__4092__auto___11699 = cljs.core.seq.call(null, seq__11672_11690);
            if (temp__4092__auto___11699) {
              var seq__11672_11700__$1 = temp__4092__auto___11699;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11672_11700__$1)) {
                var c__4227__auto___11701 = cljs.core.chunk_first.call(null, seq__11672_11700__$1);
                var G__11702 = cljs.core.chunk_rest.call(null, seq__11672_11700__$1);
                var G__11703 = c__4227__auto___11701;
                var G__11704 = cljs.core.count.call(null, c__4227__auto___11701);
                var G__11705 = 0;
                seq__11672_11690 = G__11702;
                chunk__11673_11691 = G__11703;
                count__11674_11692 = G__11704;
                i__11675_11693 = G__11705;
                continue;
              } else {
                var c_11706 = cljs.core.first.call(null, seq__11672_11700__$1);
                dommy.attrs.add_class_BANG_.call(null, n, c_11706);
                var G__11707 = cljs.core.next.call(null, seq__11672_11700__$1);
                var G__11708 = null;
                var G__11709 = 0;
                var G__11710 = 0;
                seq__11672_11690 = G__11707;
                chunk__11673_11691 = G__11708;
                count__11674_11692 = G__11709;
                i__11675_11693 = G__11710;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), G__11671_11689)) {
          dommy.attrs.add_class_BANG_.call(null, n, v_11688);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            dommy.attrs.set_attr_BANG_.call(null, n, k_11687, v_11688);
          } else {
          }
        }
      }
      var G__11711 = seq__11666_11682;
      var G__11712 = chunk__11667_11683;
      var G__11713 = count__11668_11684;
      var G__11714 = i__11669_11685 + 1;
      seq__11666_11682 = G__11711;
      chunk__11667_11683 = G__11712;
      count__11668_11684 = G__11713;
      i__11669_11685 = G__11714;
      continue;
    } else {
      var temp__4092__auto___11715 = cljs.core.seq.call(null, seq__11666_11682);
      if (temp__4092__auto___11715) {
        var seq__11666_11716__$1 = temp__4092__auto___11715;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11666_11716__$1)) {
          var c__4227__auto___11717 = cljs.core.chunk_first.call(null, seq__11666_11716__$1);
          var G__11718 = cljs.core.chunk_rest.call(null, seq__11666_11716__$1);
          var G__11719 = c__4227__auto___11717;
          var G__11720 = cljs.core.count.call(null, c__4227__auto___11717);
          var G__11721 = 0;
          seq__11666_11682 = G__11718;
          chunk__11667_11683 = G__11719;
          count__11668_11684 = G__11720;
          i__11669_11685 = G__11721;
          continue;
        } else {
          var vec__11676_11722 = cljs.core.first.call(null, seq__11666_11716__$1);
          var k_11723 = cljs.core.nth.call(null, vec__11676_11722, 0, null);
          var v_11724 = cljs.core.nth.call(null, vec__11676_11722, 1, null);
          var G__11677_11725 = k_11723;
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), G__11677_11725)) {
            var seq__11678_11726 = cljs.core.seq.call(null, v_11724);
            var chunk__11679_11727 = null;
            var count__11680_11728 = 0;
            var i__11681_11729 = 0;
            while (true) {
              if (i__11681_11729 < count__11680_11728) {
                var c_11730 = cljs.core._nth.call(null, chunk__11679_11727, i__11681_11729);
                dommy.attrs.add_class_BANG_.call(null, n, c_11730);
                var G__11731 = seq__11678_11726;
                var G__11732 = chunk__11679_11727;
                var G__11733 = count__11680_11728;
                var G__11734 = i__11681_11729 + 1;
                seq__11678_11726 = G__11731;
                chunk__11679_11727 = G__11732;
                count__11680_11728 = G__11733;
                i__11681_11729 = G__11734;
                continue;
              } else {
                var temp__4092__auto___11735__$1 = cljs.core.seq.call(null, seq__11678_11726);
                if (temp__4092__auto___11735__$1) {
                  var seq__11678_11736__$1 = temp__4092__auto___11735__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__11678_11736__$1)) {
                    var c__4227__auto___11737 = cljs.core.chunk_first.call(null, seq__11678_11736__$1);
                    var G__11738 = cljs.core.chunk_rest.call(null, seq__11678_11736__$1);
                    var G__11739 = c__4227__auto___11737;
                    var G__11740 = cljs.core.count.call(null, c__4227__auto___11737);
                    var G__11741 = 0;
                    seq__11678_11726 = G__11738;
                    chunk__11679_11727 = G__11739;
                    count__11680_11728 = G__11740;
                    i__11681_11729 = G__11741;
                    continue;
                  } else {
                    var c_11742 = cljs.core.first.call(null, seq__11678_11736__$1);
                    dommy.attrs.add_class_BANG_.call(null, n, c_11742);
                    var G__11743 = cljs.core.next.call(null, seq__11678_11736__$1);
                    var G__11744 = null;
                    var G__11745 = 0;
                    var G__11746 = 0;
                    seq__11678_11726 = G__11743;
                    chunk__11679_11727 = G__11744;
                    count__11680_11728 = G__11745;
                    i__11681_11729 = G__11746;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), G__11677_11725)) {
              dommy.attrs.add_class_BANG_.call(null, n, v_11724);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                dommy.attrs.set_attr_BANG_.call(null, n, k_11723, v_11724);
              } else {
              }
            }
          }
          var G__11747 = cljs.core.next.call(null, seq__11666_11716__$1);
          var G__11748 = null;
          var G__11749 = 0;
          var G__11750 = 0;
          seq__11666_11682 = G__11747;
          chunk__11667_11683 = G__11748;
          count__11668_11684 = G__11749;
          i__11669_11685 = G__11750;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode([cljs.core.str(this$)].join(""));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode([cljs.core.str(this$)].join(""));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
SVGElement.prototype.dommy$template$PElement$ = true;
SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Document.prototype.dommy$template$PElement$ = true;
Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
DocumentFragment.prototype.dommy$template$PElement$ = true;
DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
HTMLElement.prototype.dommy$template$PElement$ = true;
HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
try {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} catch (e11751) {
  if (e11751 instanceof ReferenceError) {
    var __11752 = e11751;
    console.log("PElement: js/Window not defined by browser, skipping it... (running on phantomjs?)");
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      throw e11751;
    } else {
    }
  }
}
dommy.template.node = function node(data) {
  if (function() {
    var G__11754 = data;
    if (G__11754) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__11754.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__11754.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11754);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11754);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function html__GT_nodes(html) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dissoc_in(m, p__11598) {
  var vec__11600 = p__11598;
  var k = cljs.core.nth.call(null, vec__11600, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__11600, 1);
  if (cljs.core.truth_(m)) {
    var temp__4090__auto__ = function() {
      var and__3467__auto__ = ks;
      if (and__3467__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3467__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function __GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function set_html_BANG_(elem, html) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html;
  return elem__$1;
};
dommy.core.html = function html(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function text(elem) {
  var or__3479__auto__ = elem.textContent;
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function() {
  var append_BANG_ = null;
  var append_BANG___2 = function(parent, child) {
    var G__11208 = dommy.template.__GT_node_like.call(null, parent);
    G__11208.appendChild(dommy.template.__GT_node_like.call(null, child));
    return G__11208;
  };
  var append_BANG___3 = function() {
    var G__11213__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__11209_11214 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__11210_11215 = null;
      var count__11211_11216 = 0;
      var i__11212_11217 = 0;
      while (true) {
        if (i__11212_11217 < count__11211_11216) {
          var c_11218 = cljs.core._nth.call(null, chunk__11210_11215, i__11212_11217);
          append_BANG_.call(null, parent__$1, c_11218);
          var G__11219 = seq__11209_11214;
          var G__11220 = chunk__11210_11215;
          var G__11221 = count__11211_11216;
          var G__11222 = i__11212_11217 + 1;
          seq__11209_11214 = G__11219;
          chunk__11210_11215 = G__11220;
          count__11211_11216 = G__11221;
          i__11212_11217 = G__11222;
          continue;
        } else {
          var temp__4092__auto___11223 = cljs.core.seq.call(null, seq__11209_11214);
          if (temp__4092__auto___11223) {
            var seq__11209_11224__$1 = temp__4092__auto___11223;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11209_11224__$1)) {
              var c__4227__auto___11225 = cljs.core.chunk_first.call(null, seq__11209_11224__$1);
              var G__11226 = cljs.core.chunk_rest.call(null, seq__11209_11224__$1);
              var G__11227 = c__4227__auto___11225;
              var G__11228 = cljs.core.count.call(null, c__4227__auto___11225);
              var G__11229 = 0;
              seq__11209_11214 = G__11226;
              chunk__11210_11215 = G__11227;
              count__11211_11216 = G__11228;
              i__11212_11217 = G__11229;
              continue;
            } else {
              var c_11230 = cljs.core.first.call(null, seq__11209_11224__$1);
              append_BANG_.call(null, parent__$1, c_11230);
              var G__11231 = cljs.core.next.call(null, seq__11209_11224__$1);
              var G__11232 = null;
              var G__11233 = 0;
              var G__11234 = 0;
              seq__11209_11214 = G__11231;
              chunk__11210_11215 = G__11232;
              count__11211_11216 = G__11233;
              i__11212_11217 = G__11234;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__11213 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11213__delegate.call(this, parent, child, more_children);
    };
    G__11213.cljs$lang$maxFixedArity = 2;
    G__11213.cljs$lang$applyTo = function(arglist__11235) {
      var parent = cljs.core.first(arglist__11235);
      arglist__11235 = cljs.core.next(arglist__11235);
      var child = cljs.core.first(arglist__11235);
      var more_children = cljs.core.rest(arglist__11235);
      return G__11213__delegate(parent, child, more_children);
    };
    G__11213.cljs$core$IFn$_invoke$arity$variadic = G__11213__delegate;
    return G__11213;
  }();
  append_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return append_BANG___2.call(this, parent, child);
      default:
        return append_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  append_BANG_.cljs$lang$maxFixedArity = 2;
  append_BANG_.cljs$lang$applyTo = append_BANG___3.cljs$lang$applyTo;
  append_BANG_.cljs$core$IFn$_invoke$arity$2 = append_BANG___2;
  append_BANG_.cljs$core$IFn$_invoke$arity$variadic = append_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return append_BANG_;
}();
dommy.core.prepend_BANG_ = function() {
  var prepend_BANG_ = null;
  var prepend_BANG___2 = function(parent, child) {
    var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
    return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
  };
  var prepend_BANG___3 = function() {
    var G__11244__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__11240_11245 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__11241_11246 = null;
      var count__11242_11247 = 0;
      var i__11243_11248 = 0;
      while (true) {
        if (i__11243_11248 < count__11242_11247) {
          var c_11249 = cljs.core._nth.call(null, chunk__11241_11246, i__11243_11248);
          prepend_BANG_.call(null, parent__$1, c_11249);
          var G__11250 = seq__11240_11245;
          var G__11251 = chunk__11241_11246;
          var G__11252 = count__11242_11247;
          var G__11253 = i__11243_11248 + 1;
          seq__11240_11245 = G__11250;
          chunk__11241_11246 = G__11251;
          count__11242_11247 = G__11252;
          i__11243_11248 = G__11253;
          continue;
        } else {
          var temp__4092__auto___11254 = cljs.core.seq.call(null, seq__11240_11245);
          if (temp__4092__auto___11254) {
            var seq__11240_11255__$1 = temp__4092__auto___11254;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11240_11255__$1)) {
              var c__4227__auto___11256 = cljs.core.chunk_first.call(null, seq__11240_11255__$1);
              var G__11257 = cljs.core.chunk_rest.call(null, seq__11240_11255__$1);
              var G__11258 = c__4227__auto___11256;
              var G__11259 = cljs.core.count.call(null, c__4227__auto___11256);
              var G__11260 = 0;
              seq__11240_11245 = G__11257;
              chunk__11241_11246 = G__11258;
              count__11242_11247 = G__11259;
              i__11243_11248 = G__11260;
              continue;
            } else {
              var c_11261 = cljs.core.first.call(null, seq__11240_11255__$1);
              prepend_BANG_.call(null, parent__$1, c_11261);
              var G__11262 = cljs.core.next.call(null, seq__11240_11255__$1);
              var G__11263 = null;
              var G__11264 = 0;
              var G__11265 = 0;
              seq__11240_11245 = G__11262;
              chunk__11241_11246 = G__11263;
              count__11242_11247 = G__11264;
              i__11243_11248 = G__11265;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__11244 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11244__delegate.call(this, parent, child, more_children);
    };
    G__11244.cljs$lang$maxFixedArity = 2;
    G__11244.cljs$lang$applyTo = function(arglist__11266) {
      var parent = cljs.core.first(arglist__11266);
      arglist__11266 = cljs.core.next(arglist__11266);
      var child = cljs.core.first(arglist__11266);
      var more_children = cljs.core.rest(arglist__11266);
      return G__11244__delegate(parent, child, more_children);
    };
    G__11244.cljs$core$IFn$_invoke$arity$variadic = G__11244__delegate;
    return G__11244;
  }();
  prepend_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return prepend_BANG___2.call(this, parent, child);
      default:
        return prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prepend_BANG_.cljs$lang$maxFixedArity = 2;
  prepend_BANG_.cljs$lang$applyTo = prepend_BANG___3.cljs$lang$applyTo;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = prepend_BANG___2;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return prepend_BANG_;
}();
dommy.core.insert_before_BANG_ = function insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "other", "other", -1534461751, null))))].join(""));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4090__auto___11267 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4090__auto___11267)) {
    var next_11268 = temp__4090__auto___11267;
    parent.insertBefore(actual_node, next_11268);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "elem", "elem", -1637415608, null))))].join(""));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function replace_contents_BANG_(parent, node_like) {
  var G__11270 = dommy.template.__GT_node_like.call(null, parent);
  G__11270.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__11270, node_like);
  return G__11270;
};
dommy.core.remove_BANG_ = function remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__11272 = elem__$1.parentNode;
  G__11272.removeChild(elem__$1);
  return G__11272;
};
dommy.core.clear_BANG_ = function clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", 602947571))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -2051487815, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 19054414, null), new cljs.core.Keyword(null, "container", "container", 602947571)))))].join(""));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", 602947571), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(container) {
    return function(p__11278) {
      var vec__11279 = p__11278;
      var k = cljs.core.nth.call(null, vec__11279, 0, null);
      var v = cljs.core.nth.call(null, vec__11279, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", 1017226334)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
        if (typeof dommy.core.t11280 !== "undefined") {
        } else {
          dommy.core.t11280 = function(v, k, vec__11279, p__11278, container, key_selectors_map, template, selector_map, meta11281) {
            this.v = v;
            this.k = k;
            this.vec__11279 = vec__11279;
            this.p__11278 = p__11278;
            this.container = container;
            this.key_selectors_map = key_selectors_map;
            this.template = template;
            this.selector_map = selector_map;
            this.meta11281 = meta11281;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 425984;
          };
          dommy.core.t11280.cljs$lang$type = true;
          dommy.core.t11280.cljs$lang$ctorStr = "dommy.core/t11280";
          dommy.core.t11280.cljs$lang$ctorPrWriter = function(vec__11279, k, v, container) {
            return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
              return cljs.core._write.call(null, writer__4047__auto__, "dommy.core/t11280");
            };
          }(vec__11279, k, v, container);
          dommy.core.t11280.prototype.cljs$core$IDeref$_deref$arity$1 = function(vec__11279, k, v, container) {
            return function(this$) {
              var self__ = this;
              var this$__$1 = this;
              return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
            };
          }(vec__11279, k, v, container);
          dommy.core.t11280.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__11279, k, v, container) {
            return function(_11282) {
              var self__ = this;
              var _11282__$1 = this;
              return self__.meta11281;
            };
          }(vec__11279, k, v, container);
          dommy.core.t11280.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__11279, k, v, container) {
            return function(_11282, meta11281__$1) {
              var self__ = this;
              var _11282__$1 = this;
              return new dommy.core.t11280(self__.v, self__.k, self__.vec__11279, self__.p__11278, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta11281__$1);
            };
          }(vec__11279, k, v, container);
          dommy.core.__GT_t11280 = function(vec__11279, k, v, container) {
            return function __GT_t11280(v__$1, k__$1, vec__11279__$1, p__11278__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta11281) {
              return new dommy.core.t11280(v__$1, k__$1, vec__11279__$1, p__11278__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta11281);
            };
          }(vec__11279, k, v, container);
        }
        return new dommy.core.t11280(v, k, vec__11279, p__11278, container, key_selectors_map, template, selector_map, null);
      }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
    };
  }(container), key_selectors_map)));
};
dommy.core.ancestor_nodes = function ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__11283_SHARP_) {
    return p1__11283_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function() {
  var matches_pred = null;
  var matches_pred__1 = function(selector) {
    return matches_pred.call(null, document, selector);
  };
  var matches_pred__2 = function(base, selector) {
    var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
    return function(matches) {
      return function(elem) {
        return matches.indexOf(elem) >= 0;
      };
    }(matches);
  };
  matches_pred = function(base, selector) {
    switch(arguments.length) {
      case 1:
        return matches_pred__1.call(this, base);
      case 2:
        return matches_pred__2.call(this, base, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matches_pred.cljs$core$IFn$_invoke$arity$1 = matches_pred__1;
  matches_pred.cljs$core$IFn$_invoke$arity$2 = matches_pred__2;
  return matches_pred;
}();
dommy.core.closest = function() {
  var closest = null;
  var closest__2 = function(elem, selector) {
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
  };
  var closest__3 = function(base, elem, selector) {
    var base__$1 = dommy.template.__GT_node_like.call(null, base);
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(base__$1, elem__$1) {
      return function(p1__11284_SHARP_) {
        return!(p1__11284_SHARP_ === base__$1);
      };
    }(base__$1, elem__$1), dommy.core.ancestor_nodes.call(null, elem__$1))));
  };
  closest = function(base, elem, selector) {
    switch(arguments.length) {
      case 2:
        return closest__2.call(this, base, elem);
      case 3:
        return closest__3.call(this, base, elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  closest.cljs$core$IFn$_invoke$arity$2 = closest__2;
  closest.cljs$core$IFn$_invoke$arity$3 = closest__3;
  return closest;
}();
dommy.core.descendant_QMARK_ = function descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__11285) {
  var vec__11286 = p__11285;
  var special_mouse_event = cljs.core.nth.call(null, vec__11286, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__11286, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__11286, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__11286, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__3479__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__3467__auto__ = related_target;
            if (cljs.core.truth_(and__3467__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__3467__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__11286, special_mouse_event, real_mouse_event);
    };
  }(vec__11286, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", 2027084997), new cljs.core.Keyword(null, "mouseover", "mouseover", 1601081963), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 2033263780), new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107)], null)));
dommy.core.live_listener = function live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__3467__auto__ = selected_target;
      if (cljs.core.truth_(and__3467__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", 1284845038)));
      } else {
        return and__3467__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function event_listeners(elem) {
  var or__3479__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function() {
  var update_event_listeners_BANG___delegate = function(elem, f, args) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
  };
  var update_event_listeners_BANG_ = function(elem, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return update_event_listeners_BANG___delegate.call(this, elem, f, args);
  };
  update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
  update_event_listeners_BANG_.cljs$lang$applyTo = function(arglist__11287) {
    var elem = cljs.core.first(arglist__11287);
    arglist__11287 = cljs.core.next(arglist__11287);
    var f = cljs.core.first(arglist__11287);
    var args = cljs.core.rest(arglist__11287);
    return update_event_listeners_BANG___delegate(elem, f, args);
  };
  update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_event_listeners_BANG___delegate;
  return update_event_listeners_BANG_;
}();
dommy.core.elem_and_selector = function elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__11288_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__11288_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function() {
  var listen_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__11312_11335 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_11336 = cljs.core.nth.call(null, vec__11312_11335, 0, null);
    var selector_11337 = cljs.core.nth.call(null, vec__11312_11335, 1, null);
    var seq__11313_11338 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__11320_11339 = null;
    var count__11321_11340 = 0;
    var i__11322_11341 = 0;
    while (true) {
      if (i__11322_11341 < count__11321_11340) {
        var vec__11329_11342 = cljs.core._nth.call(null, chunk__11320_11339, i__11322_11341);
        var orig_type_11343 = cljs.core.nth.call(null, vec__11329_11342, 0, null);
        var f_11344 = cljs.core.nth.call(null, vec__11329_11342, 1, null);
        var seq__11323_11345 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_11343, new cljs.core.PersistentArrayMap.fromArray([orig_type_11343, cljs.core.identity], true, false)));
        var chunk__11325_11346 = null;
        var count__11326_11347 = 0;
        var i__11327_11348 = 0;
        while (true) {
          if (i__11327_11348 < count__11326_11347) {
            var vec__11330_11349 = cljs.core._nth.call(null, chunk__11325_11346, i__11327_11348);
            var actual_type_11350 = cljs.core.nth.call(null, vec__11330_11349, 0, null);
            var factory_11351 = cljs.core.nth.call(null, vec__11330_11349, 1, null);
            var canonical_f_11352 = (cljs.core.truth_(selector_11337) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_11336, selector_11337) : cljs.core.identity).call(null, factory_11351.call(null, f_11344));
            dommy.core.update_event_listeners_BANG_.call(null, elem_11336, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_11337, actual_type_11350, f_11344], null), canonical_f_11352);
            if (cljs.core.truth_(elem_11336.addEventListener)) {
              elem_11336.addEventListener(cljs.core.name.call(null, actual_type_11350), canonical_f_11352);
            } else {
              elem_11336.attachEvent(cljs.core.name.call(null, actual_type_11350), canonical_f_11352);
            }
            var G__11353 = seq__11323_11345;
            var G__11354 = chunk__11325_11346;
            var G__11355 = count__11326_11347;
            var G__11356 = i__11327_11348 + 1;
            seq__11323_11345 = G__11353;
            chunk__11325_11346 = G__11354;
            count__11326_11347 = G__11355;
            i__11327_11348 = G__11356;
            continue;
          } else {
            var temp__4092__auto___11357 = cljs.core.seq.call(null, seq__11323_11345);
            if (temp__4092__auto___11357) {
              var seq__11323_11358__$1 = temp__4092__auto___11357;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11323_11358__$1)) {
                var c__4227__auto___11359 = cljs.core.chunk_first.call(null, seq__11323_11358__$1);
                var G__11360 = cljs.core.chunk_rest.call(null, seq__11323_11358__$1);
                var G__11361 = c__4227__auto___11359;
                var G__11362 = cljs.core.count.call(null, c__4227__auto___11359);
                var G__11363 = 0;
                seq__11323_11345 = G__11360;
                chunk__11325_11346 = G__11361;
                count__11326_11347 = G__11362;
                i__11327_11348 = G__11363;
                continue;
              } else {
                var vec__11331_11364 = cljs.core.first.call(null, seq__11323_11358__$1);
                var actual_type_11365 = cljs.core.nth.call(null, vec__11331_11364, 0, null);
                var factory_11366 = cljs.core.nth.call(null, vec__11331_11364, 1, null);
                var canonical_f_11367 = (cljs.core.truth_(selector_11337) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_11336, selector_11337) : cljs.core.identity).call(null, factory_11366.call(null, f_11344));
                dommy.core.update_event_listeners_BANG_.call(null, elem_11336, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_11337, actual_type_11365, f_11344], null), canonical_f_11367);
                if (cljs.core.truth_(elem_11336.addEventListener)) {
                  elem_11336.addEventListener(cljs.core.name.call(null, actual_type_11365), canonical_f_11367);
                } else {
                  elem_11336.attachEvent(cljs.core.name.call(null, actual_type_11365), canonical_f_11367);
                }
                var G__11368 = cljs.core.next.call(null, seq__11323_11358__$1);
                var G__11369 = null;
                var G__11370 = 0;
                var G__11371 = 0;
                seq__11323_11345 = G__11368;
                chunk__11325_11346 = G__11369;
                count__11326_11347 = G__11370;
                i__11327_11348 = G__11371;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__11372 = seq__11313_11338;
        var G__11373 = chunk__11320_11339;
        var G__11374 = count__11321_11340;
        var G__11375 = i__11322_11341 + 1;
        seq__11313_11338 = G__11372;
        chunk__11320_11339 = G__11373;
        count__11321_11340 = G__11374;
        i__11322_11341 = G__11375;
        continue;
      } else {
        var temp__4092__auto___11376 = cljs.core.seq.call(null, seq__11313_11338);
        if (temp__4092__auto___11376) {
          var seq__11313_11377__$1 = temp__4092__auto___11376;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11313_11377__$1)) {
            var c__4227__auto___11378 = cljs.core.chunk_first.call(null, seq__11313_11377__$1);
            var G__11379 = cljs.core.chunk_rest.call(null, seq__11313_11377__$1);
            var G__11380 = c__4227__auto___11378;
            var G__11381 = cljs.core.count.call(null, c__4227__auto___11378);
            var G__11382 = 0;
            seq__11313_11338 = G__11379;
            chunk__11320_11339 = G__11380;
            count__11321_11340 = G__11381;
            i__11322_11341 = G__11382;
            continue;
          } else {
            var vec__11332_11383 = cljs.core.first.call(null, seq__11313_11377__$1);
            var orig_type_11384 = cljs.core.nth.call(null, vec__11332_11383, 0, null);
            var f_11385 = cljs.core.nth.call(null, vec__11332_11383, 1, null);
            var seq__11314_11386 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_11384, new cljs.core.PersistentArrayMap.fromArray([orig_type_11384, cljs.core.identity], true, false)));
            var chunk__11316_11387 = null;
            var count__11317_11388 = 0;
            var i__11318_11389 = 0;
            while (true) {
              if (i__11318_11389 < count__11317_11388) {
                var vec__11333_11390 = cljs.core._nth.call(null, chunk__11316_11387, i__11318_11389);
                var actual_type_11391 = cljs.core.nth.call(null, vec__11333_11390, 0, null);
                var factory_11392 = cljs.core.nth.call(null, vec__11333_11390, 1, null);
                var canonical_f_11393 = (cljs.core.truth_(selector_11337) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_11336, selector_11337) : cljs.core.identity).call(null, factory_11392.call(null, f_11385));
                dommy.core.update_event_listeners_BANG_.call(null, elem_11336, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_11337, actual_type_11391, f_11385], null), canonical_f_11393);
                if (cljs.core.truth_(elem_11336.addEventListener)) {
                  elem_11336.addEventListener(cljs.core.name.call(null, actual_type_11391), canonical_f_11393);
                } else {
                  elem_11336.attachEvent(cljs.core.name.call(null, actual_type_11391), canonical_f_11393);
                }
                var G__11394 = seq__11314_11386;
                var G__11395 = chunk__11316_11387;
                var G__11396 = count__11317_11388;
                var G__11397 = i__11318_11389 + 1;
                seq__11314_11386 = G__11394;
                chunk__11316_11387 = G__11395;
                count__11317_11388 = G__11396;
                i__11318_11389 = G__11397;
                continue;
              } else {
                var temp__4092__auto___11398__$1 = cljs.core.seq.call(null, seq__11314_11386);
                if (temp__4092__auto___11398__$1) {
                  var seq__11314_11399__$1 = temp__4092__auto___11398__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__11314_11399__$1)) {
                    var c__4227__auto___11400 = cljs.core.chunk_first.call(null, seq__11314_11399__$1);
                    var G__11401 = cljs.core.chunk_rest.call(null, seq__11314_11399__$1);
                    var G__11402 = c__4227__auto___11400;
                    var G__11403 = cljs.core.count.call(null, c__4227__auto___11400);
                    var G__11404 = 0;
                    seq__11314_11386 = G__11401;
                    chunk__11316_11387 = G__11402;
                    count__11317_11388 = G__11403;
                    i__11318_11389 = G__11404;
                    continue;
                  } else {
                    var vec__11334_11405 = cljs.core.first.call(null, seq__11314_11399__$1);
                    var actual_type_11406 = cljs.core.nth.call(null, vec__11334_11405, 0, null);
                    var factory_11407 = cljs.core.nth.call(null, vec__11334_11405, 1, null);
                    var canonical_f_11408 = (cljs.core.truth_(selector_11337) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_11336, selector_11337) : cljs.core.identity).call(null, factory_11407.call(null, f_11385));
                    dommy.core.update_event_listeners_BANG_.call(null, elem_11336, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_11337, actual_type_11406, f_11385], null), canonical_f_11408);
                    if (cljs.core.truth_(elem_11336.addEventListener)) {
                      elem_11336.addEventListener(cljs.core.name.call(null, actual_type_11406), canonical_f_11408);
                    } else {
                      elem_11336.attachEvent(cljs.core.name.call(null, actual_type_11406), canonical_f_11408);
                    }
                    var G__11409 = cljs.core.next.call(null, seq__11314_11399__$1);
                    var G__11410 = null;
                    var G__11411 = 0;
                    var G__11412 = 0;
                    seq__11314_11386 = G__11409;
                    chunk__11316_11387 = G__11410;
                    count__11317_11388 = G__11411;
                    i__11318_11389 = G__11412;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__11413 = cljs.core.next.call(null, seq__11313_11377__$1);
            var G__11414 = null;
            var G__11415 = 0;
            var G__11416 = 0;
            seq__11313_11338 = G__11413;
            chunk__11320_11339 = G__11414;
            count__11321_11340 = G__11415;
            i__11322_11341 = G__11416;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_BANG_.cljs$lang$maxFixedArity = 1;
  listen_BANG_.cljs$lang$applyTo = function(arglist__11417) {
    var elem_sel = cljs.core.first(arglist__11417);
    var type_fs = cljs.core.rest(arglist__11417);
    return listen_BANG___delegate(elem_sel, type_fs);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_BANG___delegate;
  return listen_BANG_;
}();
dommy.core.unlisten_BANG_ = function() {
  var unlisten_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__11441_11464 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_11465 = cljs.core.nth.call(null, vec__11441_11464, 0, null);
    var selector_11466 = cljs.core.nth.call(null, vec__11441_11464, 1, null);
    var seq__11442_11467 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__11449_11468 = null;
    var count__11450_11469 = 0;
    var i__11451_11470 = 0;
    while (true) {
      if (i__11451_11470 < count__11450_11469) {
        var vec__11458_11471 = cljs.core._nth.call(null, chunk__11449_11468, i__11451_11470);
        var orig_type_11472 = cljs.core.nth.call(null, vec__11458_11471, 0, null);
        var f_11473 = cljs.core.nth.call(null, vec__11458_11471, 1, null);
        var seq__11452_11474 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_11472, new cljs.core.PersistentArrayMap.fromArray([orig_type_11472, cljs.core.identity], true, false)));
        var chunk__11454_11475 = null;
        var count__11455_11476 = 0;
        var i__11456_11477 = 0;
        while (true) {
          if (i__11456_11477 < count__11455_11476) {
            var vec__11459_11478 = cljs.core._nth.call(null, chunk__11454_11475, i__11456_11477);
            var actual_type_11479 = cljs.core.nth.call(null, vec__11459_11478, 0, null);
            var __11480 = cljs.core.nth.call(null, vec__11459_11478, 1, null);
            var keys_11481 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_11466, actual_type_11479, f_11473], null);
            var canonical_f_11482 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_11465), keys_11481);
            dommy.core.update_event_listeners_BANG_.call(null, elem_11465, dommy.utils.dissoc_in, keys_11481);
            if (cljs.core.truth_(elem_11465.removeEventListener)) {
              elem_11465.removeEventListener(cljs.core.name.call(null, actual_type_11479), canonical_f_11482);
            } else {
              elem_11465.detachEvent(cljs.core.name.call(null, actual_type_11479), canonical_f_11482);
            }
            var G__11483 = seq__11452_11474;
            var G__11484 = chunk__11454_11475;
            var G__11485 = count__11455_11476;
            var G__11486 = i__11456_11477 + 1;
            seq__11452_11474 = G__11483;
            chunk__11454_11475 = G__11484;
            count__11455_11476 = G__11485;
            i__11456_11477 = G__11486;
            continue;
          } else {
            var temp__4092__auto___11487 = cljs.core.seq.call(null, seq__11452_11474);
            if (temp__4092__auto___11487) {
              var seq__11452_11488__$1 = temp__4092__auto___11487;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11452_11488__$1)) {
                var c__4227__auto___11489 = cljs.core.chunk_first.call(null, seq__11452_11488__$1);
                var G__11490 = cljs.core.chunk_rest.call(null, seq__11452_11488__$1);
                var G__11491 = c__4227__auto___11489;
                var G__11492 = cljs.core.count.call(null, c__4227__auto___11489);
                var G__11493 = 0;
                seq__11452_11474 = G__11490;
                chunk__11454_11475 = G__11491;
                count__11455_11476 = G__11492;
                i__11456_11477 = G__11493;
                continue;
              } else {
                var vec__11460_11494 = cljs.core.first.call(null, seq__11452_11488__$1);
                var actual_type_11495 = cljs.core.nth.call(null, vec__11460_11494, 0, null);
                var __11496 = cljs.core.nth.call(null, vec__11460_11494, 1, null);
                var keys_11497 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_11466, actual_type_11495, f_11473], null);
                var canonical_f_11498 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_11465), keys_11497);
                dommy.core.update_event_listeners_BANG_.call(null, elem_11465, dommy.utils.dissoc_in, keys_11497);
                if (cljs.core.truth_(elem_11465.removeEventListener)) {
                  elem_11465.removeEventListener(cljs.core.name.call(null, actual_type_11495), canonical_f_11498);
                } else {
                  elem_11465.detachEvent(cljs.core.name.call(null, actual_type_11495), canonical_f_11498);
                }
                var G__11499 = cljs.core.next.call(null, seq__11452_11488__$1);
                var G__11500 = null;
                var G__11501 = 0;
                var G__11502 = 0;
                seq__11452_11474 = G__11499;
                chunk__11454_11475 = G__11500;
                count__11455_11476 = G__11501;
                i__11456_11477 = G__11502;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__11503 = seq__11442_11467;
        var G__11504 = chunk__11449_11468;
        var G__11505 = count__11450_11469;
        var G__11506 = i__11451_11470 + 1;
        seq__11442_11467 = G__11503;
        chunk__11449_11468 = G__11504;
        count__11450_11469 = G__11505;
        i__11451_11470 = G__11506;
        continue;
      } else {
        var temp__4092__auto___11507 = cljs.core.seq.call(null, seq__11442_11467);
        if (temp__4092__auto___11507) {
          var seq__11442_11508__$1 = temp__4092__auto___11507;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11442_11508__$1)) {
            var c__4227__auto___11509 = cljs.core.chunk_first.call(null, seq__11442_11508__$1);
            var G__11510 = cljs.core.chunk_rest.call(null, seq__11442_11508__$1);
            var G__11511 = c__4227__auto___11509;
            var G__11512 = cljs.core.count.call(null, c__4227__auto___11509);
            var G__11513 = 0;
            seq__11442_11467 = G__11510;
            chunk__11449_11468 = G__11511;
            count__11450_11469 = G__11512;
            i__11451_11470 = G__11513;
            continue;
          } else {
            var vec__11461_11514 = cljs.core.first.call(null, seq__11442_11508__$1);
            var orig_type_11515 = cljs.core.nth.call(null, vec__11461_11514, 0, null);
            var f_11516 = cljs.core.nth.call(null, vec__11461_11514, 1, null);
            var seq__11443_11517 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_11515, new cljs.core.PersistentArrayMap.fromArray([orig_type_11515, cljs.core.identity], true, false)));
            var chunk__11445_11518 = null;
            var count__11446_11519 = 0;
            var i__11447_11520 = 0;
            while (true) {
              if (i__11447_11520 < count__11446_11519) {
                var vec__11462_11521 = cljs.core._nth.call(null, chunk__11445_11518, i__11447_11520);
                var actual_type_11522 = cljs.core.nth.call(null, vec__11462_11521, 0, null);
                var __11523 = cljs.core.nth.call(null, vec__11462_11521, 1, null);
                var keys_11524 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_11466, actual_type_11522, f_11516], null);
                var canonical_f_11525 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_11465), keys_11524);
                dommy.core.update_event_listeners_BANG_.call(null, elem_11465, dommy.utils.dissoc_in, keys_11524);
                if (cljs.core.truth_(elem_11465.removeEventListener)) {
                  elem_11465.removeEventListener(cljs.core.name.call(null, actual_type_11522), canonical_f_11525);
                } else {
                  elem_11465.detachEvent(cljs.core.name.call(null, actual_type_11522), canonical_f_11525);
                }
                var G__11526 = seq__11443_11517;
                var G__11527 = chunk__11445_11518;
                var G__11528 = count__11446_11519;
                var G__11529 = i__11447_11520 + 1;
                seq__11443_11517 = G__11526;
                chunk__11445_11518 = G__11527;
                count__11446_11519 = G__11528;
                i__11447_11520 = G__11529;
                continue;
              } else {
                var temp__4092__auto___11530__$1 = cljs.core.seq.call(null, seq__11443_11517);
                if (temp__4092__auto___11530__$1) {
                  var seq__11443_11531__$1 = temp__4092__auto___11530__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__11443_11531__$1)) {
                    var c__4227__auto___11532 = cljs.core.chunk_first.call(null, seq__11443_11531__$1);
                    var G__11533 = cljs.core.chunk_rest.call(null, seq__11443_11531__$1);
                    var G__11534 = c__4227__auto___11532;
                    var G__11535 = cljs.core.count.call(null, c__4227__auto___11532);
                    var G__11536 = 0;
                    seq__11443_11517 = G__11533;
                    chunk__11445_11518 = G__11534;
                    count__11446_11519 = G__11535;
                    i__11447_11520 = G__11536;
                    continue;
                  } else {
                    var vec__11463_11537 = cljs.core.first.call(null, seq__11443_11531__$1);
                    var actual_type_11538 = cljs.core.nth.call(null, vec__11463_11537, 0, null);
                    var __11539 = cljs.core.nth.call(null, vec__11463_11537, 1, null);
                    var keys_11540 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_11466, actual_type_11538, f_11516], null);
                    var canonical_f_11541 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_11465), keys_11540);
                    dommy.core.update_event_listeners_BANG_.call(null, elem_11465, dommy.utils.dissoc_in, keys_11540);
                    if (cljs.core.truth_(elem_11465.removeEventListener)) {
                      elem_11465.removeEventListener(cljs.core.name.call(null, actual_type_11538), canonical_f_11541);
                    } else {
                      elem_11465.detachEvent(cljs.core.name.call(null, actual_type_11538), canonical_f_11541);
                    }
                    var G__11542 = cljs.core.next.call(null, seq__11443_11531__$1);
                    var G__11543 = null;
                    var G__11544 = 0;
                    var G__11545 = 0;
                    seq__11443_11517 = G__11542;
                    chunk__11445_11518 = G__11543;
                    count__11446_11519 = G__11544;
                    i__11447_11520 = G__11545;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__11546 = cljs.core.next.call(null, seq__11442_11508__$1);
            var G__11547 = null;
            var G__11548 = 0;
            var G__11549 = 0;
            seq__11442_11467 = G__11546;
            chunk__11449_11468 = G__11547;
            count__11450_11469 = G__11548;
            i__11451_11470 = G__11549;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var unlisten_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return unlisten_BANG___delegate.call(this, elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$lang$maxFixedArity = 1;
  unlisten_BANG_.cljs$lang$applyTo = function(arglist__11550) {
    var elem_sel = cljs.core.first(arglist__11550);
    var type_fs = cljs.core.rest(arglist__11550);
    return unlisten_BANG___delegate(elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = unlisten_BANG___delegate;
  return unlisten_BANG_;
}();
dommy.core.listen_once_BANG_ = function() {
  var listen_once_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__11558_11565 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_11566 = cljs.core.nth.call(null, vec__11558_11565, 0, null);
    var selector_11567 = cljs.core.nth.call(null, vec__11558_11565, 1, null);
    var seq__11559_11568 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__11560_11569 = null;
    var count__11561_11570 = 0;
    var i__11562_11571 = 0;
    while (true) {
      if (i__11562_11571 < count__11561_11570) {
        var vec__11563_11572 = cljs.core._nth.call(null, chunk__11560_11569, i__11562_11571);
        var type_11573 = cljs.core.nth.call(null, vec__11563_11572, 0, null);
        var f_11574 = cljs.core.nth.call(null, vec__11563_11572, 1, null);
        dommy.core.listen_BANG_.call(null, elem_sel, type_11573, function(seq__11559_11568, chunk__11560_11569, count__11561_11570, i__11562_11571, vec__11563_11572, type_11573, f_11574, vec__11558_11565, elem_11566, selector_11567) {
          return function this_fn(e) {
            dommy.core.unlisten_BANG_.call(null, elem_sel, type_11573, this_fn);
            return f_11574.call(null, e);
          };
        }(seq__11559_11568, chunk__11560_11569, count__11561_11570, i__11562_11571, vec__11563_11572, type_11573, f_11574, vec__11558_11565, elem_11566, selector_11567));
        var G__11575 = seq__11559_11568;
        var G__11576 = chunk__11560_11569;
        var G__11577 = count__11561_11570;
        var G__11578 = i__11562_11571 + 1;
        seq__11559_11568 = G__11575;
        chunk__11560_11569 = G__11576;
        count__11561_11570 = G__11577;
        i__11562_11571 = G__11578;
        continue;
      } else {
        var temp__4092__auto___11579 = cljs.core.seq.call(null, seq__11559_11568);
        if (temp__4092__auto___11579) {
          var seq__11559_11580__$1 = temp__4092__auto___11579;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11559_11580__$1)) {
            var c__4227__auto___11581 = cljs.core.chunk_first.call(null, seq__11559_11580__$1);
            var G__11582 = cljs.core.chunk_rest.call(null, seq__11559_11580__$1);
            var G__11583 = c__4227__auto___11581;
            var G__11584 = cljs.core.count.call(null, c__4227__auto___11581);
            var G__11585 = 0;
            seq__11559_11568 = G__11582;
            chunk__11560_11569 = G__11583;
            count__11561_11570 = G__11584;
            i__11562_11571 = G__11585;
            continue;
          } else {
            var vec__11564_11586 = cljs.core.first.call(null, seq__11559_11580__$1);
            var type_11587 = cljs.core.nth.call(null, vec__11564_11586, 0, null);
            var f_11588 = cljs.core.nth.call(null, vec__11564_11586, 1, null);
            dommy.core.listen_BANG_.call(null, elem_sel, type_11587, function(seq__11559_11568, chunk__11560_11569, count__11561_11570, i__11562_11571, vec__11564_11586, type_11587, f_11588, seq__11559_11580__$1, temp__4092__auto___11579, vec__11558_11565, elem_11566, selector_11567) {
              return function this_fn(e) {
                dommy.core.unlisten_BANG_.call(null, elem_sel, type_11587, this_fn);
                return f_11588.call(null, e);
              };
            }(seq__11559_11568, chunk__11560_11569, count__11561_11570, i__11562_11571, vec__11564_11586, type_11587, f_11588, seq__11559_11580__$1, temp__4092__auto___11579, vec__11558_11565, elem_11566, selector_11567));
            var G__11589 = cljs.core.next.call(null, seq__11559_11580__$1);
            var G__11590 = null;
            var G__11591 = 0;
            var G__11592 = 0;
            seq__11559_11568 = G__11589;
            chunk__11560_11569 = G__11590;
            count__11561_11570 = G__11591;
            i__11562_11571 = G__11592;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_once_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_once_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$lang$maxFixedArity = 1;
  listen_once_BANG_.cljs$lang$applyTo = function(arglist__11593) {
    var elem_sel = cljs.core.first(arglist__11593);
    var type_fs = cljs.core.rest(arglist__11593);
    return listen_once_BANG___delegate(elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_once_BANG___delegate;
  return listen_once_BANG_;
}();
dommy.core.fire_BANG_ = function() {
  var fire_BANG___delegate = function(node, event_type, p__11594) {
    var vec__11596 = p__11594;
    var update_event_BANG_ = cljs.core.nth.call(null, vec__11596, 0, null);
    if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1886221157, null), new cljs.core.Symbol(null, "node", "node", -1637144645, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", -1449696112, null))))].join(""));
    }
    var update_event_BANG___$1 = function() {
      var or__3479__auto__ = update_event_BANG_;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return cljs.core.identity;
      }
    }();
    if (cljs.core.truth_(document.createEvent)) {
      var event = document.createEvent("Event");
      event.initEvent(cljs.core.name.call(null, event_type), true, true);
      return node.dispatchEvent(update_event_BANG___$1.call(null, event));
    } else {
      return node.fireEvent([cljs.core.str("on"), cljs.core.str(cljs.core.name.call(null, event_type))].join(""), update_event_BANG___$1.call(null, document.createEventObject()));
    }
  };
  var fire_BANG_ = function(node, event_type, var_args) {
    var p__11594 = null;
    if (arguments.length > 2) {
      p__11594 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fire_BANG___delegate.call(this, node, event_type, p__11594);
  };
  fire_BANG_.cljs$lang$maxFixedArity = 2;
  fire_BANG_.cljs$lang$applyTo = function(arglist__11597) {
    var node = cljs.core.first(arglist__11597);
    arglist__11597 = cljs.core.next(arglist__11597);
    var event_type = cljs.core.first(arglist__11597);
    var p__11594 = cljs.core.rest(arglist__11597);
    return fire_BANG___delegate(node, event_type, p__11594);
  };
  fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = fire_BANG___delegate;
  return fire_BANG_;
}();
goog.provide("tri.core");
goog.require("cljs.core");
goog.require("om_tools.core");
goog.require("schema.core");
goog.require("plumbing.core");
goog.require("schema.core");
goog.require("om_tools.dom");
goog.require("om.core");
goog.require("plumbing.core");
goog.require("om.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("om_tools.dom");
goog.require("dommy.core");
goog.require("dommy.core");
tri.core.Point = schema.core.schema_with_name.call(null, schema.core.pair.call(null, schema.core.Num, "x", schema.core.Num, "y"), new cljs.core.Symbol(null, "Point", "Point", -1563238615, null));
tri.core.Triangle = schema.core.schema_with_name.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, tri.core.Point, "a"), schema.core.one.call(null, tri.core.Point, "b"), schema.core.one.call(null, tri.core.Point, "c")], null), new cljs.core.Symbol(null, "Triangle", "Triangle", -78125087, null));
tri.core.Color = schema.core.schema_with_name.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Num, "red"), schema.core.one.call(null, schema.core.Num, "green"), schema.core.one.call(null, schema.core.Num, "blue")], null), new cljs.core.Symbol(null, "Color", "Color", -1575241476, null));
tri.core.wrap_array_fn = function wrap_array_fn(f) {
  return cljs.core.comp.call(null, cljs.core.js__GT_clj, f, cljs.core.clj__GT_js);
};
tri.core.triangulate_STAR_ = tri.core.wrap_array_fn.call(null, Delaunay.triangulate);
var ufv___14023 = schema.utils.use_fn_validation;
var output_schema14018_14024 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tri.core.Triangle], null);
var input_schema14019_14025 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tri.core.Point], null), new cljs.core.Symbol(null, "points", "points", 1671681692, null))], null);
var input_checker14020_14026 = schema.core.checker.call(null, input_schema14019_14025);
var output_checker14021_14027 = schema.core.checker.call(null, output_schema14018_14024);
tri.core.triangulate = function(ufv___14023, output_schema14018_14024, input_schema14019_14025, input_checker14020_14026, output_checker14021_14027) {
  return function triangulate(G__14022) {
    var validate__5281__auto__ = ufv___14023.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___14028 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14022], null);
      var temp__4092__auto___14029 = input_checker14020_14026.call(null, args__5282__auto___14028);
      if (cljs.core.truth_(temp__4092__auto___14029)) {
        var error__5283__auto___14030 = temp__4092__auto___14029;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "triangulate", "triangulate", 2084851557, null), cljs.core.pr_str.call(null, error__5283__auto___14030)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___14030, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14019_14025, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), args__5282__auto___14028], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var points = G__14022;
      while (true) {
        return cljs.core.partition.call(null, 3, cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.nth, points), tri.core.triangulate_STAR_.call(null, points)));
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___14031 = output_checker14021_14027.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___14031)) {
        var error__5283__auto___14032 = temp__4092__auto___14031;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "triangulate", "triangulate", 2084851557, null), cljs.core.pr_str.call(null, error__5283__auto___14032)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___14032, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14018_14024, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___14023, output_schema14018_14024, input_schema14019_14025, input_checker14020_14026, output_checker14021_14027);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, tri.core.triangulate), schema.core.make_fn_schema.call(null, output_schema14018_14024, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14019_14025], null)));
var ufv___14038 = schema.utils.use_fn_validation;
var output_schema14033_14039 = schema.core.Str;
var input_schema14034_14040 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tri.core.Point], null), new cljs.core.Symbol(null, "points", "points", 1671681692, null))], null);
var input_checker14035_14041 = schema.core.checker.call(null, input_schema14034_14040);
var output_checker14036_14042 = schema.core.checker.call(null, output_schema14033_14039);
tri.core.point_str = function(ufv___14038, output_schema14033_14039, input_schema14034_14040, input_checker14035_14041, output_checker14036_14042) {
  return function point_str(G__14037) {
    var validate__5281__auto__ = ufv___14038.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___14043 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14037], null);
      var temp__4092__auto___14044 = input_checker14035_14041.call(null, args__5282__auto___14043);
      if (cljs.core.truth_(temp__4092__auto___14044)) {
        var error__5283__auto___14045 = temp__4092__auto___14044;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "point-str", "point-str", -77153747, null), cljs.core.pr_str.call(null, error__5283__auto___14045)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___14045, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14034_14040, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), args__5282__auto___14043], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var points = G__14037;
      while (true) {
        return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.partial.call(null, clojure.string.join, ","), points));
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___14046 = output_checker14036_14042.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___14046)) {
        var error__5283__auto___14047 = temp__4092__auto___14046;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "point-str", "point-str", -77153747, null), cljs.core.pr_str.call(null, error__5283__auto___14047)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___14047, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14033_14039, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___14038, output_schema14033_14039, input_schema14034_14040, input_checker14035_14041, output_checker14036_14042);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, tri.core.point_str), schema.core.make_fn_schema.call(null, output_schema14033_14039, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14034_14040], null)));
var ufv___14053 = schema.utils.use_fn_validation;
var output_schema14048_14054 = tri.core.Point;
var input_schema14049_14055 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "e", "e", -1640531426, null))], null);
var input_checker14050_14056 = schema.core.checker.call(null, input_schema14049_14055);
var output_checker14051_14057 = schema.core.checker.call(null, output_schema14048_14054);
tri.core.mouse_pos = function(ufv___14053, output_schema14048_14054, input_schema14049_14055, input_checker14050_14056, output_checker14051_14057) {
  return function mouse_pos(G__14052) {
    var validate__5281__auto__ = ufv___14053.get_cell();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var args__5282__auto___14058 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14052], null);
      var temp__4092__auto___14059 = input_checker14050_14056.call(null, args__5282__auto___14058);
      if (cljs.core.truth_(temp__4092__auto___14059)) {
        var error__5283__auto___14060 = temp__4092__auto___14059;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "mouse-pos", "mouse-pos", -1055325467, null), cljs.core.pr_str.call(null, error__5283__auto___14060)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___14060, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14049_14055, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), args__5282__auto___14058], null));
      } else {
      }
    } else {
    }
    var o__5284__auto__ = function() {
      var e = G__14052;
      while (true) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e.clientX, e.clientY], null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__5281__auto__)) {
      var temp__4092__auto___14061 = output_checker14051_14057.call(null, o__5284__auto__);
      if (cljs.core.truth_(temp__4092__auto___14061)) {
        var error__5283__auto___14062 = temp__4092__auto___14061;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "mouse-pos", "mouse-pos", -1055325467, null), cljs.core.pr_str.call(null, error__5283__auto___14062)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___14062, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14048_14054, new cljs.core.Keyword(null, "value", 
        "value", 1125876963), o__5284__auto__], null));
      } else {
      }
    } else {
    }
    return o__5284__auto__;
  };
}(ufv___14053, output_schema14048_14054, input_schema14049_14055, input_checker14050_14056, output_checker14051_14057);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, tri.core.mouse_pos), schema.core.make_fn_schema.call(null, output_schema14048_14054, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14049_14055], null)));
tri.core.triangles = function() {
  var triangles__delegate = function(data__7080__auto__, owner14065, p__14067) {
    var vec__14091 = p__14067;
    var opts__7081__auto__ = cljs.core.nth.call(null, vec__14091, 0, null);
    return function() {
      var ufv__ = schema.utils.use_fn_validation;
      var output_schema14095 = schema.core.Any;
      var input_schema14096 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Any, new cljs.core.Keyword(null, "data", "data", 1016980252), new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Any, new cljs.core.Keyword(null, "mouse-point", "mouse-point", 756206042), schema.core.Any, new cljs.core.Keyword(null, "points", "points", 4326117461), 
      schema.core.Any], true, false)], true, false), new cljs.core.Symbol(null, "map14092", "map14092", -1505907677, null))], null);
      var input_checker14097 = schema.core.checker.call(null, input_schema14096);
      var output_checker14098 = schema.core.checker.call(null, output_schema14095);
      return schema.core.schematize_fn.call(null, function(ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
        return function fnk14094(G__14099) {
          var validate__5281__auto__ = ufv__.get_cell();
          if (cljs.core.truth_(validate__5281__auto__)) {
            var args__5282__auto___14114 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14099], null);
            var temp__4092__auto___14115 = input_checker14097.call(null, args__5282__auto___14114);
            if (cljs.core.truth_(temp__4092__auto___14115)) {
              var error__5283__auto___14116 = temp__4092__auto___14115;
              throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "fnk14094", "fnk14094", 1983789374, null), cljs.core.pr_str.call(null, error__5283__auto___14116)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___14116, new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14096, new cljs.core.Keyword(null, "value", "value", 
              1125876963), args__5282__auto___14114], null));
            } else {
            }
          } else {
          }
          var o__5284__auto__ = function() {
            var map14092 = G__14099;
            while (true) {
              if (cljs.core.map_QMARK_.call(null, map14092)) {
              } else {
                throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "fnk called on non-map: %s", map14092));
              }
              var map14093 = plumbing.fnk.schema.safe_get.call(null, map14092, new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.PersistentVector.EMPTY);
              var points = plumbing.fnk.schema.safe_get.call(null, map14093, new cljs.core.Keyword(null, "points", "points", 4326117461), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252)], null));
              var mouse_point = plumbing.fnk.schema.safe_get.call(null, map14093, new cljs.core.Keyword(null, "mouse-point", "mouse-point", 756206042), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252)], null));
              if (typeof tri.core.t14107 !== "undefined") {
              } else {
                tri.core.t14107 = function(data__7080__auto__, output_schema14095, owner14065, ufv__, opts__7081__auto__, input_schema14096, validate__5281__auto__, G__14099, points, input_checker14097, triangles, map14093, map14092, output_checker14098, mouse_point, vec__14091, p__14067, fnk14094, meta14108) {
                  this.data__7080__auto__ = data__7080__auto__;
                  this.output_schema14095 = output_schema14095;
                  this.owner14065 = owner14065;
                  this.ufv__ = ufv__;
                  this.opts__7081__auto__ = opts__7081__auto__;
                  this.input_schema14096 = input_schema14096;
                  this.validate__5281__auto__ = validate__5281__auto__;
                  this.G__14099 = G__14099;
                  this.points = points;
                  this.input_checker14097 = input_checker14097;
                  this.triangles = triangles;
                  this.map14093 = map14093;
                  this.map14092 = map14092;
                  this.output_checker14098 = output_checker14098;
                  this.mouse_point = mouse_point;
                  this.vec__14091 = vec__14091;
                  this.p__14067 = p__14067;
                  this.fnk14094 = fnk14094;
                  this.meta14108 = meta14108;
                  this.cljs$lang$protocol_mask$partition1$ = 0;
                  this.cljs$lang$protocol_mask$partition0$ = 393216;
                };
                tri.core.t14107.cljs$lang$type = true;
                tri.core.t14107.cljs$lang$ctorStr = "tri.core/t14107";
                tri.core.t14107.cljs$lang$ctorPrWriter = function(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                  return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
                    return cljs.core._write.call(null, writer__4047__auto__, "tri.core/t14107");
                  };
                }(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__);
                tri.core.t14107.prototype.om$core$IRender$ = true;
                tri.core.t14107.prototype.om$core$IRender$render$arity$1 = function(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                  return function(this$) {
                    var self__ = this;
                    var this$__$1 = this;
                    var triangles__$2 = tri.core.triangulate.call(null, self__.points);
                    console.log([cljs.core.str(self__.mouse_point)].join(""));
                    return cljs.core.apply.call(null, React.DOM.svg, {"onMouseDown":function(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                      return function(e) {
                        return om.core.transact_BANG_.call(null, self__.points, function(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                          return function(p1__14064_SHARP_) {
                            return cljs.core.conj.call(null, p1__14064_SHARP_, tri.core.mouse_pos.call(null, e));
                          };
                        }(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__));
                      };
                    }(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__), "onMouseMove":function(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                      return function(p1__14063_SHARP_) {
                        return om.core.update_BANG_.call(null, self__.mouse_point, tri.core.mouse_pos.call(null, p1__14063_SHARP_));
                      };
                    }(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__)}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                      var iter__4196__auto__ = function(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                        return function iter__14110(s__14111) {
                          return new cljs.core.LazySeq(null, function(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                            return function() {
                              var s__14111__$1 = s__14111;
                              while (true) {
                                var temp__4092__auto__ = cljs.core.seq.call(null, s__14111__$1);
                                if (temp__4092__auto__) {
                                  var s__14111__$2 = temp__4092__auto__;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__14111__$2)) {
                                    var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14111__$2);
                                    var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                                    var b__14113 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                                    if (function() {
                                      var i__14112 = 0;
                                      while (true) {
                                        if (i__14112 < size__4195__auto__) {
                                          var triangle = cljs.core._nth.call(null, c__4194__auto__, i__14112);
                                          cljs.core.chunk_append.call(null, b__14113, React.DOM.polygon({"style":{"stroke-width":1, "stroke":"white"}, "points":tri.core.point_str.call(null, triangle)}));
                                          var G__14117 = i__14112 + 1;
                                          i__14112 = G__14117;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14113), iter__14110.call(null, cljs.core.chunk_rest.call(null, s__14111__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14113), null);
                                    }
                                  } else {
                                    var triangle = cljs.core.first.call(null, s__14111__$2);
                                    return cljs.core.cons.call(null, React.DOM.polygon({"style":{"stroke-width":1, "stroke":"white"}, "points":tri.core.point_str.call(null, triangle)}), iter__14110.call(null, cljs.core.rest.call(null, s__14111__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__), null, null);
                        };
                      }(triangles__$2, this$__$1, mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__);
                      return iter__4196__auto__.call(null, tri.core.triangulate.call(null, plumbing.core.conj_when.call(null, self__.points, self__.mouse_point)));
                    }()], null)));
                  };
                }(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__);
                tri.core.t14107.prototype.cljs$core$IMeta$_meta$arity$1 = function(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                  return function(_14109) {
                    var self__ = this;
                    var _14109__$1 = this;
                    return self__.meta14108;
                  };
                }(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__);
                tri.core.t14107.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                  return function(_14109, meta14108__$1) {
                    var self__ = this;
                    var _14109__$1 = this;
                    return new tri.core.t14107(self__.data__7080__auto__, self__.output_schema14095, self__.owner14065, self__.ufv__, self__.opts__7081__auto__, self__.input_schema14096, self__.validate__5281__auto__, self__.G__14099, self__.points, self__.input_checker14097, self__.triangles, self__.map14093, self__.map14092, self__.output_checker14098, self__.mouse_point, self__.vec__14091, self__.p__14067, self__.fnk14094, meta14108__$1);
                  };
                }(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__);
                tri.core.__GT_t14107 = function(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__) {
                  return function __GT_t14107(data__7080__auto____$1, output_schema14095__$1, owner14065__$1, ufv____$1, opts__7081__auto____$1, input_schema14096__$1, validate__5281__auto____$1, G__14099__$1, points__$1, input_checker14097__$1, triangles__$1, map14093__$1, map14092__$1, output_checker14098__$1, mouse_point__$1, vec__14091__$1, p__14067__$1, fnk14094__$1, meta14108) {
                    return new tri.core.t14107(data__7080__auto____$1, output_schema14095__$1, owner14065__$1, ufv____$1, opts__7081__auto____$1, input_schema14096__$1, validate__5281__auto____$1, G__14099__$1, points__$1, input_checker14097__$1, triangles__$1, map14093__$1, map14092__$1, output_checker14098__$1, mouse_point__$1, vec__14091__$1, p__14067__$1, fnk14094__$1, meta14108);
                  };
                }(mouse_point, points, map14093, validate__5281__auto__, ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__);
              }
              return new tri.core.t14107(data__7080__auto__, output_schema14095, owner14065, ufv__, opts__7081__auto__, input_schema14096, validate__5281__auto__, G__14099, points, input_checker14097, triangles, map14093, map14092, output_checker14098, mouse_point, vec__14091, p__14067, fnk14094, null);
              break;
            }
          }();
          if (cljs.core.truth_(validate__5281__auto__)) {
            var temp__4092__auto___14118 = output_checker14098.call(null, o__5284__auto__);
            if (cljs.core.truth_(temp__4092__auto___14118)) {
              var error__5283__auto___14119 = temp__4092__auto___14118;
              throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "fnk14094", "fnk14094", 1983789374, null), cljs.core.pr_str.call(null, error__5283__auto___14119)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), error__5283__auto___14119, new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14095, new cljs.core.Keyword(null, "value", 
              "value", 1125876963), o__5284__auto__], null));
            } else {
            }
          } else {
          }
          return o__5284__auto__;
        };
      }(ufv__, output_schema14095, input_schema14096, input_checker14097, output_checker14098, vec__14091, opts__7081__auto__), schema.core.make_fn_schema.call(null, output_schema14095, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14096], null)));
    }().call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "data", "data", 1016980252), data__7080__auto__, new cljs.core.Keyword(null, "owner", "owner", 1120069157), owner14065, new cljs.core.Keyword(null, "opts", "opts", 1017322386), opts__7081__auto__], null));
  };
  var triangles = function(data__7080__auto__, owner14065, var_args) {
    var p__14067 = null;
    if (arguments.length > 2) {
      p__14067 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return triangles__delegate.call(this, data__7080__auto__, owner14065, p__14067);
  };
  triangles.cljs$lang$maxFixedArity = 2;
  triangles.cljs$lang$applyTo = function(arglist__14120) {
    var data__7080__auto__ = cljs.core.first(arglist__14120);
    arglist__14120 = cljs.core.next(arglist__14120);
    var owner14065 = cljs.core.first(arglist__14120);
    var p__14067 = cljs.core.rest(arglist__14120);
    return triangles__delegate(data__7080__auto__, owner14065, p__14067);
  };
  triangles.cljs$core$IFn$_invoke$arity$variadic = triangles__delegate;
  return triangles;
}();
tri.core.__GT_triangles = function() {
  var __GT_triangles = null;
  var __GT_triangles__1 = function(cursor__7049__auto__) {
    return om.core.build.call(null, tri.core.triangles, cursor__7049__auto__);
  };
  var __GT_triangles__2 = function(cursor__7049__auto__, m14066) {
    return om.core.build.call(null, tri.core.triangles, cursor__7049__auto__, m14066);
  };
  __GT_triangles = function(cursor__7049__auto__, m14066) {
    switch(arguments.length) {
      case 1:
        return __GT_triangles__1.call(this, cursor__7049__auto__);
      case 2:
        return __GT_triangles__2.call(this, cursor__7049__auto__, m14066);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_triangles.cljs$core$IFn$_invoke$arity$1 = __GT_triangles__1;
  __GT_triangles.cljs$core$IFn$_invoke$arity$2 = __GT_triangles__2;
  return __GT_triangles;
}();
tri.core.app_state = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "points", "points", 4326117461), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "mouse-point", "mouse-point", 756206042), cljs.core.PersistentVector.EMPTY], null);
tri.core.init = function init() {
  var container = function() {
    var dom14122 = document.createElement("div");
    dom14122.setAttribute("id", "container");
    return dom14122;
  }();
  dommy.core.append_BANG_.call(null, document.body, container);
  return om.core.root.call(null, tri.core.triangles, tri.core.app_state, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "target", "target", 4427965699), container], null));
};
goog.exportSymbol("tri.core.init", tri.core.init);
tri.core.init.call(null);
